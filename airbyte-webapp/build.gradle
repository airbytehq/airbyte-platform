plugins {
    id "base"
    alias(libs.plugins.node.gradle)
}

// Use the node version that's defined in the .nvmrc file
def nodeVersion = new File("${projectDir}/.nvmrc").text.trim();

// Read pnpm version to use from package.json engines.pnpm entry
def pnpmVer = new groovy.json.JsonSlurper().parse(new File("${projectDir}/package.json")).engines.pnpm.trim();

// This array should contain a path to all configs that are common to most build tasks and
// might affect them (i.e. if any of those files change we want to rerun most tasks)
def commonConfigs = [
    '.env',
    'package.json',
    'pnpm-lock.yaml',
    'tsconfig.json',
    '.prettierrc.js'
]

node {
    download = true
    version = nodeVersion
    pnpmVersion = pnpmVer
    distBaseUrl = "https://nodejs-mirror.airbyte.com/dist"
}

task validateLockFiles {
    description "Validate only a pnpm-lock.yaml lock file exists"
    inputs.files "pnpm-lock.yaml", "package-lock.json", "yarn.lock"

    // The validateLockFiles has no outputs, thus we always treat the outpus up to date
    // as long as the inputs have not changed
    outputs.upToDateWhen { true }

    doLast {
        assert file("pnpm-lock.yaml").exists()
        assert !file("package-lock.json").exists()
        assert !file("yarn.lock").exists()
    }
}

pnpmInstall.dependsOn validateLockFiles
// Add patches folder to inputs of pnpmInstall task, since it has pnpm-lock.yml as an output
// thus wouldn't rerun in case a patch get changed
pnpmInstall.inputs.dir "patches"

// fileTree to watch node_modules, but exclude the .cache dir since that might have changes on every build
def nodeModules = fileTree('node_modules').matching {
    exclude '.cache'
}

// fileTree to watch the public dir but exclude the auto generated buildInfo.json. It's content is anyway a
// content hash, depending on the other files.
def publicDir = fileTree('public').matching {
    exclude 'buildInfo.json'
}

task pnpmBuild(type: PnpmTask) {
    dependsOn pnpmInstall

    args = ['build']

    inputs.files commonConfigs
    inputs.files nodeModules
    inputs.files publicDir
    inputs.file '.eslintrc.js'
    inputs.file '.stylelintrc'
    inputs.file 'orval.config.ts'
    inputs.file 'vite.config.ts'
    inputs.file 'index.html'
    inputs.dir 'scripts'
    inputs.dir 'src'

    outputs.dir 'build/app'
}

task test(type: PnpmTask) {
    dependsOn assemble

    args = ['run', 'test:ci']
    inputs.files commonConfigs
    inputs.file 'jest.config.ts'
    inputs.file 'babel.config.js'
    inputs.dir 'src'

    // The test has no outputs, thus we always treat the outpus up to date
    // as long as the inputs have not changed
    outputs.upToDateWhen { true }
}

task licenseCheck(type: PnpmTask) {
    dependsOn pnpmInstall

    args = ['run', 'license-check']
    inputs.files nodeModules
    inputs.file 'package.json'
    inputs.file 'scripts/license-check.js'

    // The licenseCheck has no outputs, thus we always treat the outpus up to date
    // as long as the inputs have not changed
    outputs.upToDateWhen { true }
}

task validateLinks(type: PnpmTask) {
    dependsOn pnpmInstall

    args = ['run', 'validate-links']

    inputs.file 'scripts/validate-links.ts'
    inputs.file 'src/utils/links.ts'

    // Since the output of this task depends on availability of URLs
    // we never want to treat it as "up-to-date" on CI and always want to run it
    // but running locally we treat it as up-to-date just depending on its inputs
    outputs.upToDateWhen {
        System.getenv("CI") === null
    }
}

task buildStorybook(type: PnpmTask) {
    dependsOn pnpmInstall
    args = ['run', 'build:storybook']

    inputs.files commonConfigs
    inputs.files nodeModules
    inputs.files publicDir
    inputs.dir '.storybook'
    inputs.dir 'src'

    outputs.dir 'build/storybook'

    environment = [
        'NODE_OPTIONS': '--max_old_space_size=4096'
    ]
}

task copyBuildOutput(type: Copy) {
    dependsOn copyDocker, pnpmBuild

    from "${project.projectDir}/build/app"
    into 'build/docker/bin/build'
}

task copyNginx(type: Copy) {
    dependsOn copyDocker

    from "${project.projectDir}/nginx"
    into "build/docker/bin/nginx"
}

// Those tasks should be run as part of the "check" task
check.dependsOn validateLinks, licenseCheck, test

build.dependsOn buildStorybook

tasks.named("buildDockerImage") {
    dependsOn copyDocker, copyNginx, copyBuildOutput
}
