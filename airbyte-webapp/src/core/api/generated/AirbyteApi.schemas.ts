/* eslint-disable */
/**
 * Generated by orval üç∫
 * Do not edit manually. Run "pnpm run generate-client" instead.
 * Airbyte Public API
 * OpenAPI spec version: 1.0.0
 */
/**
 * Response from the initiate OAuth call should be an object with a single property which will be the `redirect_url`. If a user is redirected to this URL, they'll be prompted by the identity provider to authenticate.
 */
export type InitiateOauthResponseResponse = unknown;

/**
 * Whether you're setting this override for a source or destination
 */
export type ActorTypeEnum = (typeof ActorTypeEnum)[keyof typeof ActorTypeEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ActorTypeEnum = {
  source: "source",
  destination: "destination",
} as const;

export type ConnectionSyncModeEnum = (typeof ConnectionSyncModeEnum)[keyof typeof ConnectionSyncModeEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConnectionSyncModeEnum = {
  full_refresh_overwrite: "full_refresh_overwrite",
  full_refresh_append: "full_refresh_append",
  incremental_append: "incremental_append",
  incremental_deduped_history: "incremental_deduped_history",
} as const;

/**
 * The stream properties associated with a connection.
 */
export interface StreamProperties {
  streamName?: string;
  syncModes?: ConnectionSyncModeEnum[];
  defaultCursorField?: string[];
  sourceDefinedCursorField?: boolean;
  sourceDefinedPrimaryKey?: string[][];
  propertyFields?: string[][];
}

/**
 * Configurations for a single stream.
 */
export interface StreamConfiguration {
  name: string;
  syncMode?: ConnectionSyncModeEnum;
  /** Path to the field that will be used to determine if a record is new or modified since the last sync. This field is REQUIRED if `sync_mode` is `incremental` unless there is a default. */
  cursorField?: string[];
  /** Paths to the fields that will be used as primary key. This field is REQUIRED if `destination_sync_mode` is `*_dedup` unless it is already supplied by the source schema. */
  primaryKey?: string[][];
}

/**
 * A list of configured stream options for a connection.
 */
export interface StreamConfigurations {
  streams?: StreamConfiguration[];
}

export interface SourcesResponse {
  previous?: string;
  next?: string;
  data: SourceResponse[];
}

export interface ConnectionsResponse {
  previous?: string;
  next?: string;
  data: ConnectionResponse[];
}

/**
 * Provides details of a single workspace.
 */
export interface WorkspaceResponse {
  workspaceId: string;
  name: string;
  dataResidency: GeographyEnum;
}

export interface WorkspacesResponse {
  previous?: string;
  next?: string;
  data: WorkspaceResponse[];
}

export interface WorkspaceUpdateRequest {
  /** Name of the workspace */
  name: string;
}

export interface WorkspaceCreateRequest {
  /** Name of the workspace */
  name: string;
}

export interface DestinationPutRequest {
  name: string;
  configuration: DestinationConfiguration;
}

export interface DestinationPatchRequest {
  name?: string;
  configuration?: DestinationConfiguration;
}

export interface DestinationCreateRequest {
  name: string;
  workspaceId: string;
  configuration: DestinationConfiguration;
}

/**
 * Provides details of a single source.
 */
export interface SourceResponse {
  sourceId: string;
  name: string;
  sourceType: string;
  workspaceId: string;
  configuration: SourceConfiguration;
}

/**
 * Provides details of a single destination.
 */
export interface DestinationResponse {
  destinationId: string;
  name: string;
  destinationType: string;
  workspaceId: string;
  configuration: DestinationConfiguration;
}

export interface DestinationsResponse {
  previous?: string;
  next?: string;
  data: DestinationResponse[];
}

/**
 * Set how Airbyte handles syncs when it detects a non-breaking schema change in the source
 */
export type NonBreakingSchemaUpdatesBehaviorEnumNoDefault =
  (typeof NonBreakingSchemaUpdatesBehaviorEnumNoDefault)[keyof typeof NonBreakingSchemaUpdatesBehaviorEnumNoDefault];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NonBreakingSchemaUpdatesBehaviorEnumNoDefault = {
  ignore: "ignore",
  disable_connection: "disable_connection",
} as const;

/**
 * Define the location where the data will be stored in the destination
 */
export type NamespaceDefinitionEnumNoDefault =
  (typeof NamespaceDefinitionEnumNoDefault)[keyof typeof NamespaceDefinitionEnumNoDefault];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NamespaceDefinitionEnumNoDefault = {
  source: "source",
  destination: "destination",
  custom_format: "custom_format",
} as const;

/**
 * Set how Airbyte handles syncs when it detects a non-breaking schema change in the source
 */
export type NonBreakingSchemaUpdatesBehaviorEnum =
  (typeof NonBreakingSchemaUpdatesBehaviorEnum)[keyof typeof NonBreakingSchemaUpdatesBehaviorEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NonBreakingSchemaUpdatesBehaviorEnum = {
  ignore: "ignore",
  disable_connection: "disable_connection",
} as const;

/**
 * Define the location where the data will be stored in the destination
 */
export type NamespaceDefinitionEnum = (typeof NamespaceDefinitionEnum)[keyof typeof NamespaceDefinitionEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NamespaceDefinitionEnum = {
  source: "source",
  destination: "destination",
  custom_format: "custom_format",
} as const;

export type ConnectionStatusEnum = (typeof ConnectionStatusEnum)[keyof typeof ConnectionStatusEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConnectionStatusEnum = {
  active: "active",
  inactive: "inactive",
  deprecated: "deprecated",
} as const;

export type GeographyEnumNoDefault = (typeof GeographyEnumNoDefault)[keyof typeof GeographyEnumNoDefault];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GeographyEnumNoDefault = {
  auto: "auto",
  us: "us",
  eu: "eu",
} as const;

export type GeographyEnum = (typeof GeographyEnum)[keyof typeof GeographyEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GeographyEnum = {
  auto: "auto",
  us: "us",
  eu: "eu",
} as const;

export type ScheduleTypeWithBasicEnum = (typeof ScheduleTypeWithBasicEnum)[keyof typeof ScheduleTypeWithBasicEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ScheduleTypeWithBasicEnum = {
  manual: "manual",
  cron: "cron",
  basic: "basic",
} as const;

/**
 * schedule for when the the connection should run, per the schedule type
 */
export interface ConnectionScheduleResponse {
  scheduleType: ScheduleTypeWithBasicEnum;
  cronExpression?: string;
  basicTiming?: string;
}

export type ScheduleTypeEnum = (typeof ScheduleTypeEnum)[keyof typeof ScheduleTypeEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ScheduleTypeEnum = {
  manual: "manual",
  cron: "cron",
} as const;

/**
 * schedule for when the the connection should run, per the schedule type
 */
export interface ConnectionSchedule {
  scheduleType: ScheduleTypeEnum;
  cronExpression?: string;
}

/**
 * Provides details of a single connection.
 */
export interface ConnectionResponse {
  connectionId: string;
  name: string;
  sourceId: string;
  destinationId: string;
  workspaceId: string;
  status: ConnectionStatusEnum;
  schedule: ConnectionScheduleResponse;
  dataResidency: GeographyEnum;
  nonBreakingSchemaUpdatesBehavior?: NonBreakingSchemaUpdatesBehaviorEnum;
  namespaceDefinition?: NamespaceDefinitionEnum;
  namespaceFormat?: string;
  prefix?: string;
  configurations: StreamConfigurations;
}

/**
 * Arbitrary vars to pass for OAuth depending on what the source/destination spec requires.
 */
export interface OAuthInputConfiguration {
  [key: string]: any;
}

/**
 * The configuration for this source/destination based on the OAuth section of the relevant specification.
 */
export interface OAuthCredentialsConfiguration {
  [key: string]: any;
}

/**
 * POST body for creating/updating workspace level OAuth credentials
 */
export interface WorkspaceOAuthCredentialsRequest {
  actorType: ActorTypeEnum;
  name: string;
  configuration: OAuthCredentialsConfiguration;
}

/**
 * POST body for initiating OAuth via the public API
 */
export interface InitiateOauthRequest {
  /** The name of the source to authenticate to */
  name: string;
  /** The URL to redirect the user to with the OAuth secret stored in the secret_id query string parameter after authentication is complete. */
  redirectUrl: string;
  /** The workspace to create the secret and eventually the full source. */
  workspaceId: string;
  /** Input configuration for OAuth required by some sources. */
  oAuthInputConfiguration?: OAuthInputConfiguration;
}

export interface SourcePatchRequest {
  name?: string;
  workspaceId?: string;
  configuration?: SourceConfiguration;
  /** Optional secretID obtained through the public API OAuth redirect flow. */
  secretId?: string;
}

export interface SourcePutRequest {
  name: string;
  configuration: SourceConfiguration;
}

export interface SourceCreateRequest {
  name: string;
  workspaceId: string;
  configuration: SourceConfiguration;
  /** Optional secretID obtained through the public API OAuth redirect flow. */
  secretId?: string;
}

/**
 * Enum that describes the different types of jobs that the platform runs.
 */
export type JobTypeEnum = (typeof JobTypeEnum)[keyof typeof JobTypeEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const JobTypeEnum = {
  sync: "sync",
  reset: "reset",
} as const;

export type JobStatusEnum = (typeof JobStatusEnum)[keyof typeof JobStatusEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const JobStatusEnum = {
  pending: "pending",
  running: "running",
  incomplete: "incomplete",
  failed: "failed",
  succeeded: "succeeded",
  cancelled: "cancelled",
} as const;

/**
 * Creates a new Job from the configuration provided in the request body.
 */
export interface JobCreateRequest {
  connectionId: string;
  jobType: JobTypeEnum;
}

export interface ConnectionPatchRequest {
  /** Optional name of the connection */
  name?: string;
  configurations?: StreamConfigurations;
  schedule?: ConnectionSchedule;
  dataResidency?: GeographyEnumNoDefault;
  namespaceDefinition?: NamespaceDefinitionEnumNoDefault;
  /** Used when namespaceDefinition is 'custom_format'. If blank then behaves like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = 'source'. */
  namespaceFormat?: string;
  /** Prefix that will be prepended to the name of each stream when it is written to the destination (ex. ‚Äúairbyte_‚Äù causes ‚Äúprojects‚Äù => ‚Äúairbyte_projects‚Äù). */
  prefix?: string;
  nonBreakingSchemaUpdatesBehavior?: NonBreakingSchemaUpdatesBehaviorEnumNoDefault;
  status?: ConnectionStatusEnum;
}

export interface ConnectionCreateRequest {
  /** Optional name of the connection */
  name?: string;
  sourceId: string;
  destinationId: string;
  configurations?: StreamConfigurations;
  schedule?: ConnectionSchedule;
  dataResidency?: GeographyEnum;
  namespaceDefinition?: NamespaceDefinitionEnum;
  /** Used when namespaceDefinition is 'custom_format'. If blank then behaves like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = 'source'. */
  namespaceFormat?: string;
  /** Prefix that will be prepended to the name of each stream when it is written to the destination (ex. ‚Äúairbyte_‚Äù causes ‚Äúprojects‚Äù => ‚Äúairbyte_projects‚Äù). */
  prefix?: string;
  nonBreakingSchemaUpdatesBehavior?: NonBreakingSchemaUpdatesBehaviorEnum;
  status?: ConnectionStatusEnum;
}

/**
 * The values required to configure the destination.
 */
export type DestinationConfiguration = unknown;

/**
 * The values required to configure the source.
 */
export type SourceConfiguration = unknown;

/**
 * Provides details of a single job.
 */
export interface JobResponse {
  jobId: number;
  status: JobStatusEnum;
  jobType: JobTypeEnum;
  startTime: string;
  lastUpdatedAt?: string;
  /** Duration of a sync in ISO_8601 format */
  duration?: string;
  bytesSynced?: number;
  rowsSynced?: number;
}

export interface JobsResponse {
  previous?: string;
  next?: string;
  data: JobResponse[];
}

export interface RedirectUrlResponse {
  redirectUrl?: string;
}
