plugins {
    id "io.airbyte.gradle.jvm.app"
    id "io.airbyte.gradle.docker"
    id "io.airbyte.gradle.publish"
}

configurations.all {
    resolutionStrategy {
        // Ensure that the versions defined in deps.toml are used
        // instead of versions from transitive dependencies
        // Force to avoid updated version brought in transitively from Micronaut 3.8+
        // that is incompatible with our current Helm setup
        force libs.flyway.core, libs.s3, libs.aws.java.sdk.s3
    }
}

dependencies {
    annotationProcessor platform(libs.micronaut.bom)
    annotationProcessor libs.lombok
    annotationProcessor libs.bundles.micronaut.annotation.processor
    annotationProcessor libs.micronaut.jaxrs.processor

    compileOnly libs.lombok

    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok

    implementation platform(libs.micronaut.bom)
    implementation libs.bundles.micronaut
    implementation libs.bundles.micronaut.data.jdbc
    implementation libs.micronaut.jaxrs.server
    implementation libs.micronaut.security
    implementation libs.flyway.core
    implementation libs.s3
    implementation libs.aws.java.sdk.s3

    implementation project(':airbyte-analytics')
    implementation project(':airbyte-api')
    implementation project(':airbyte-commons')
    implementation project(':airbyte-commons-converters')
    implementation project(':airbyte-commons-micronaut')
    implementation project(':airbyte-commons-temporal')
    implementation project(':airbyte-commons-server')
    implementation project(':airbyte-config:init')
    implementation project(':airbyte-config:config-models')
    implementation project(':airbyte-config:config-persistence')
    implementation project(':airbyte-config:specs')
    implementation project(":airbyte-featureflag")
    implementation project(':airbyte-metrics:metrics-lib')
    implementation project(':airbyte-db:db-lib')
    implementation project(':airbyte-db:jooq')
    implementation project(":airbyte-json-validation")
    implementation project(':airbyte-notification')
    implementation project(':airbyte-oauth')
    implementation libs.airbyte.protocol
    implementation project(':airbyte-persistence:job-persistence')

    implementation libs.slugify
    implementation libs.temporal.sdk
    implementation libs.bundles.datadog
    implementation libs.sentry.java
    implementation libs.swagger.annotations
    implementation libs.javax.ws.rs.api
    implementation libs.google.cloud.storage

    runtimeOnly libs.javax.databind

    testImplementation libs.bundles.micronaut.test
    testAnnotationProcessor platform(libs.micronaut.bom)
    testAnnotationProcessor libs.bundles.micronaut.test.annotation.processor

    testImplementation project(':airbyte-test-utils')
    testImplementation libs.bundles.micronaut.test
    testImplementation libs.postgresql
    testImplementation libs.platform.testcontainers.postgresql
    testImplementation libs.mockwebserver
    testImplementation libs.mockito.inline
    testRuntimeOnly libs.junit.jupiter.engine
    testImplementation libs.bundles.junit
    testImplementation libs.assertj.core

    testImplementation libs.junit.pioneer
}

// we want to be able to access the generated db files from config/init when we build the server docker image.
def copySeed = tasks.register("copySeed", Copy) {
    from "${project(':airbyte-config:init').buildDir}/resources/main/config"
    into "${buildDir}/config_init/resources/main/config"
    dependsOn(project(':airbyte-config:init').processResources)
}

// need to make sure that the files are in the resource directory before copying.
// tests require the seed to exist.
test.dependsOn(copySeed)
assemble.dependsOn(copySeed)


Properties env = new Properties()
rootProject.file('.env.dev').withInputStream { env.load(it) }

airbyte {
    application {
        mainClass = "io.airbyte.server.Application"
        defaultJvmArgs = ["-XX:+ExitOnOutOfMemoryError", "-XX:MaxRAMPercentage=75.0"]
        localEnvVars = env + [
                "AIRBYTE_ROLE"                     : System.getenv("AIRBYTE_ROLE") ?: "undefined",
                "AIRBYTE_VERSION"                  : env.VERSION,
                "DATABASE_USER"                    : env.DATABASE_USER,
                "DATABASE_PASSWORD"                : env.DATABASE_PASSWORD,
                "CONFIG_DATABASE_USER"             : env.CONFIG_DATABASE_USER ?: "",
                "CONFIG_DATABASE_PASSWORD"         : env.CONFIG_DATABASE_PASSWORD ?: "",
                // we map the docker pg db to port 5433 so it does not conflict with other pg instances.
                "DATABASE_URL"                     : "jdbc:postgresql://localhost:5433/${env.DATABASE_DB}",
                "CONFIG_DATABASE_URL"              : "jdbc:postgresql://localhost:5433/${env.CONFIG_DATABASE_DB}",
                "RUN_DATABASE_MIGRATION_ON_STARTUP": "true",
                "WORKSPACE_ROOT"                   : env.WORKSPACE_ROOT,
                "CONFIG_ROOT"                      : "/tmp/airbyte_config",
                "TRACKING_STRATEGY"                : env.TRACKING_STRATEGY,
                "TEMPORAL_HOST"                    : "localhost:7233",
                "MICRONAUT_ENVIRONMENTS"           : "control-plane"
        ] as Map<String, String>
    }

    docker {
        imageName = "server"
    }

    spotbugs {
        excludes = ["  <Match>\n" +
                            "    <Package name=\"io.airbyte.server.repositories.domain.*\" />\n" +
                            "    <!-- All args constructor used by builders trigger this error -->\n" +
                            "    <Bug pattern=\"NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE\" />\n" +
                            "  </Match>"]
    }
}

test {
    environment 'AIRBYTE_VERSION', env.VERSION
    environment 'MICRONAUT_ENVIRONMENTS', 'test'
    environment 'SERVICE_NAME', project.name
}
