plugins {
    id "io.airbyte.gradle.jvm.app"
    id "io.airbyte.gradle.jvm.lib"
    id "io.airbyte.gradle.publish"
    id "org.jetbrains.kotlin.jvm"
    id "org.jetbrains.kotlin.kapt"
    id "io.airbyte.gradle.docker"
}

dependencies {
    implementation 'org.apache.logging.log4j:log4j-slf4j2-impl'

    kapt(platform(libs.micronaut.bom))
    kapt(libs.bundles.micronaut.annotation.processor)

    kaptTest(platform(libs.micronaut.bom))
    kaptTest(libs.bundles.micronaut.test.annotation.processor)

    annotationProcessor platform(libs.micronaut.bom)
    annotationProcessor libs.bundles.micronaut.annotation.processor
    annotationProcessor libs.micronaut.jaxrs.processor

    implementation project(':airbyte-analytics')
    implementation project(':airbyte-api')
    implementation project(':airbyte-commons')
    implementation project(':airbyte-config:config-models')
    implementation 'com.cronutils:cron-utils:9.2.1'
    implementation libs.bundles.jackson

    implementation platform(libs.micronaut.bom)
    implementation libs.bundles.micronaut
    implementation libs.bundles.micronaut.data.jdbc
    implementation libs.micronaut.jaxrs.server
    implementation libs.micronaut.problem.json
    implementation libs.micronaut.security

    implementation libs.sentry.java
    implementation libs.swagger.annotations
    implementation libs.javax.ws.rs.api

    runtimeOnly libs.javax.databind

    testImplementation libs.bundles.micronaut.test
    testAnnotationProcessor platform(libs.micronaut.bom)
    testAnnotationProcessor libs.bundles.micronaut.test.annotation.processor

    testImplementation project(':airbyte-test-utils')
    testImplementation libs.bundles.micronaut.test
    testImplementation libs.postgresql
    testImplementation libs.platform.testcontainers.postgresql
    testImplementation libs.mockwebserver
    testImplementation libs.mockito.inline

    implementation libs.airbyte.protocol

}

kapt {
    correctErrorTypes true
}

Properties env = new Properties()
rootProject.file('.env.dev').withInputStream { env.load(it) }

airbyte {
    application {
        mainClass = 'io.airbyte.api.server.ApplicationKt'
        defaultJvmArgs = ['-XX:+ExitOnOutOfMemoryError', '-XX:MaxRAMPercentage=75.0']
        localEnvVars = env + [
                "AIRBYTE_ROLE"          : System.getenv("AIRBYTE_ROLE") ?: "undefined",
                "AIRBYTE_VERSION"       : env.VERSION,
                "MICRONAUT_ENVIRONMENTS": "control-plane",
                "SERVICE_NAME"          : project.name,
                "TRACKING_STRATEGY"     : env.TRACKING_STRATEGY
        ] as Map<String, String>
    }
    docker {
        imageName = "airbyte-api-server"
    }
}

test {
    environment 'AIRBYTE_VERSION', env.VERSION
    environment 'MICRONAUT_ENVIRONMENTS', 'test'
    environment 'SERVICE_NAME', project.name
}
