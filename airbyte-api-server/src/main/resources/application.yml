micronaut:
  application:
    name: airbyte-api-server
  caches:
    # used by the analytics tracking client to cache calls to resolve the deployment and identity (workspace) for
    # track events
    analytics-tracking-deployments:
      charset: "UTF-8"
      expire-after-access: 10m
    analytics-tracking-identity:
      charset: "UTF-8"
      expire-after-access: 10m
  env:
    cloud-deduction: true
  executors:
    health:
      type: fixed
      n-threads: ${HEALTH_TASK_EXECUTOR_THREADS:10}
  metrics:
    enabled: ${MICROMETER_METRICS_ENABLED:false}
    binders:
      netty:
        bytebuf-allocators:
          enabled: false
        channels:
          enabled: false
        queues:
          enabled: true
    export:
      statsd:
        enabled: ${MICROMETER_METRICS_ENABLED:false}
        flavor: ${MICROMETER_METRICS_STATSD_FLAVOR:datadog}
        step: ${MICROMETER_METRICS_STEP:PT30S}
        host: ${STATSD_HOST:localhost}
        port: ${STATSD_PORT:8125}
  security:
    authentication-provider-strategy: ALL
    enabled: ${API_AUTHORIZATION_ENABLED:false}
  server:
    port: 8006
    cors:
      enabled: true
      configurations:
        web:
          allowed-origins-regex:
            - ^.*$
    netty:
      access-logger:
        enabled: ${HTTP_ACCESS_LOG_ENABLED:false}
    idle-timeout: ${HTTP_IDLE_TIMEOUT:10m}
    thread-selection: auto
  http:
    client:
      read-timeout: ${READ_TIMEOUT:10m}
      max-content-length: 52428800 # 50MB
      event-loop-group: http-client-event-loop
  netty:
    event-loops:
      http-client-event-loop:
        num-threads: 10
        prefer-native-transport: true

airbyte:
  shutdown:
    delay_ms: 20000
  deployment-mode: ${DEPLOYMENT_MODE:OSS}
  feature-flag:
    client: ${FEATURE_FLAG_CLIENT:}
    path: ${FEATURE_FLAG_PATH:/flags}
    api-key: ${LAUNCHDARKLY_KEY:}
  version: ${AIRBYTE_VERSION}
  secret:
    persistence: ${SECRET_PERSISTENCE:TESTING_CONFIG_DB_TABLE}
    store:
      aws:
        access-key: ${AWS_SECRET_MANAGER_ACCESS_KEY_ID:}
        secret-key: ${AWS_SECRET_MANAGER_SECRET_ACCESS_KEY:}
        region: ${AWS_SECRET_MANAGER_REGION:}
      gcp:
        credentials: ${SECRET_STORE_GCP_CREDENTIALS:}
        project-id: ${SECRET_STORE_GCP_PROJECT_ID:}
      vault:
        address: ${VAULT_ADDRESS:}
        prefix: ${VAULT_PREFIX:}
  role: ${AIRBYTE_ROLE:dev}
  tracking:
    strategy: ${TRACKING_STRATEGY:LOGGING}
    write-key: ${SEGMENT_WRITE_KEY:}
  protocol:
    min-version: ${AIRBYTE_PROTOCOL_VERSION_MIN:0.0.0}
    max-version: ${AIRBYTE_PROTOCOL_VERSION_MAX:0.3.0}
  api:
    host: ${AIRBYTE_API_HOST}
    documentation:
      host: https://reference.airbyte.com/

endpoints:
  beans:
    enabled: true
    sensitive: false
  caches:
    enabled: true
    sensitive: false
  env:
    enabled: true
    sensitive: false
  health:
    enabled: false
    jdbc:
      enabled: false
    sensitive: false
  info:
    enabled: true
    sensitive: true
  loggers:
    enabled: true
    sensitive: false
  metrics:
    enabled: ${MICROMETER_METRICS_ENABLED:false}
    sensitive: false
  refresh:
    enabled: false
    sensitive: true
  routes:
    enabled: true
    sensitive: false
  threaddump:
    enabled: true
    sensitive: true

jackson:
  mapper:
    ACCEPT_CASE_INSENSITIVE_ENUMS: true
  deserialization:
    READ_ENUMS_USING_TO_STRING: true
  serialization:
    WRITE_ENUMS_USING_TO_STRING: true

logger:
  levels:
#   Uncomment to help resolve issues with conditional beans
#      io.micronaut.context.condition: DEBUG
#   Uncomment to help resolve issues with security beans
#      io.micronaut.security: DEBUG
#   Uncomment to help resolve issues with micronaut data
#      com.zaxxer.hikari.HikariConfig: DEBUG
#      com.zaxxer.hikari: TRACE
