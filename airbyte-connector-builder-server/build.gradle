import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'airbyte-python-docker'
    id 'airbyte-docker'
    alias(libs.plugins.openapi.generator)
}

task generateOpenApiPythonServer(type: GenerateTask) {
    def generatedCodeDir = "$buildDir/airbyte_connector_builder_server"
    inputSpec = "$rootDir.absolutePath/airbyte-connector-builder-server/src/main/openapi/openapi.yaml"

    generatorName = "python-fastapi"
    configFile = "$projectDir/openapi/generator_config.yaml"
    templateDir = "$projectDir/openapi/templates"
    packageName = "connector_builder.generated"
    outputDir = generatedCodeDir

    // After we generate, we're only interested in the API declaration and the generated pydantic models.
    // So we copy those from the build/ directory
    doLast {
        def sourceDir = "$generatedCodeDir/src/connector_builder/generated/"
        def targetDir = "$projectDir/connector_builder/generated"
        mkdir targetDir
        copy {
            from "$sourceDir/apis"
            include "*_interface.py", "__init__.py"
            into "$targetDir/apis"
        }
        copy {
            from "$sourceDir/models"
            include "*.py"
            into "$targetDir/models"
        }
    }
}

// it's important to explicitly say that the AirbyteDocker task (which takes as input all files in this directory)
// dependsOn any task which manipulates files in this directory, or else Gradle will disable incremental builds on those
// tasks to preserve build correctness. More info at https://docs.gradle.org/7.6/userguide/validation_problems.html#implicit_dependency
airbyteDocker.dependsOn(generateOpenApiPythonServer)
project.build.dependsOn(generateOpenApiPythonServer)

// java modules such as airbyte-server can use copyGeneratedTar to copy the files to the docker image
// We cannot do this here because we don't generate a tar file
// Instead, we copy the files into the build directory so they can be copied to the docker container
task prepareBuild(type: Copy) {
    from layout.projectDirectory.file(".")
    exclude '.*'
    exclude 'build'
    exclude '**/*.pyc'

    into layout.buildDirectory.dir("docker")
}

tasks.named("buildDockerImage") {
    dependsOn prepareBuild
    dependsOn copyDocker
}
