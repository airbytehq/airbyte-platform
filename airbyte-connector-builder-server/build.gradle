import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id "io.airbyte.gradle.jvm.app"
    id "io.airbyte.gradle.docker"
    id "org.openapi.generator"
    id "io.airbyte.gradle.publish"
}

dependencies {
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.1'
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'

    // Cloud service dependencies. These are not strictly necessary yet, but likely needed for any full-fledged cloud service
    implementation libs.bundles.datadog
    // implementation libs.bundles.temporal  uncomment this when we start using temporal to invoke connector commands
    implementation libs.sentry.java

    implementation libs.guava

    // Micronaut dependencies
    annotationProcessor platform(libs.micronaut.bom)
    annotationProcessor libs.bundles.micronaut.annotation.processor

    implementation platform(libs.micronaut.bom)
    implementation libs.bundles.micronaut
    implementation libs.micronaut.security

    implementation project(':airbyte-commons')

    // OpenAPI code generation dependencies
    implementation group: 'io.swagger', name: 'swagger-annotations', version: '1.6.2'

    // Internal dependencies
    implementation project(':airbyte-commons')
    implementation project(':airbyte-commons-protocol')
    implementation project(':airbyte-commons-server')
    implementation project(':airbyte-commons-worker')
    implementation project(':airbyte-config:config-models')
    implementation project(':airbyte-config:config-persistence')
    implementation project(':airbyte-config:init')
    implementation project(':airbyte-metrics:metrics-lib')

    implementation libs.airbyte.protocol

    testRuntimeOnly libs.junit.jupiter.engine
    testImplementation libs.bundles.junit
    testImplementation libs.assertj.core

    testImplementation libs.junit.pioneer
}

Properties env = new Properties()
rootProject.file('.env.dev').withInputStream { env.load(it) }

airbyte {
    application {
        mainClass = 'io.airbyte.connector_builder.MicronautConnectorBuilderServerRunner'
        defaultJvmArgs = ['-XX:+ExitOnOutOfMemoryError', '-XX:MaxRAMPercentage=75.0']
        localEnvVars = env + [
                "AIRBYTE_ROLE"   : System.getenv("AIRBYTE_ROLE") ?: "",
                "AIRBYTE_VERSION": env.VERSION,
                // path to CDK virtual environment
                "CDK_PYTHON"     : System.getenv('CDK_PYTHON') ?: "",
                // path to CDK connector builder's main.py
                "CDK_ENTRYPOINT" : System.getenv('CDK_ENTRYPOINT') ?: ""
        ] as Map<String, String>
    }
    docker {
        imageName = "connector-builder-server"
    }
}

def generateOpenApiServer = tasks.register("generateOpenApiServer", GenerateTask) {
    def generatedCodeDir = "$buildDir/generated/api/server"
    def specFile = "$projectDir/src/main/openapi/openapi.yaml"

    inputs.file specFile
    inputSpec = specFile
    outputDir = generatedCodeDir

    generatorName = "jaxrs-spec"
    apiPackage = "io.airbyte.connector_builder.api.generated"
    invokerPackage = "io.airbyte.connector_builder.api.invoker.generated"
    modelPackage = "io.airbyte.connector_builder.api.model.generated"

    schemaMappings = [
            'ConnectorConfig'  : 'com.fasterxml.jackson.databind.JsonNode',
            'ConnectorManifest': 'com.fasterxml.jackson.databind.JsonNode',
    ]

    // Our spec does not have nullable, but if it changes, this would be a gotcha that we would want to avoid
    configOptions = [
            dateLibrary                   : "java8",
            generatePom                   : "false",
            interfaceOnly                 : "true",
            /*
            JAX-RS generator does not respect nullable properties defined in the OpenApi Spec.
            It means that if a field is not nullable but not set it is still returning a null value for this field in the serialized json.
            The below Jackson annotation is made to only keep non null values in serialized json.
            We are not yet using nullable=true properties in our OpenApi so this is a valid workaround at the moment to circumvent the default JAX-RS behavior described above.
            Feel free to read the conversation on https://github.com/airbytehq/airbyte/pull/13370 for more details.
            */
            additionalModelTypeAnnotations: "\n@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)",
    ]
}

tasks.named("compileJava") {
    dependsOn generateOpenApiServer
}

// Ensures that the generated models are compiled during the build step so they are available for use at runtime
sourceSets {
    main {
        java {
            srcDirs "$buildDir/generated/api/server/src/gen/java"
        }
        resources {
            srcDir "$projectDir/src/main/openapi/"
        }
    }
}

def copyPythonDeps = tasks.register("copyPythonDependencies", Copy) {
    from "${project.projectDir}/requirements.txt"
    into "build/airbyte/docker/"
}

tasks.named("dockerBuildImage") {
    // Set build args
    // Current CDK version used by the Connector Builder and workers running Connector Builder connectors
    String cdkVersion = new File(
            project.projectDir.parentFile,
            'airbyte-connector-builder-resources/CDK_VERSION').text.trim()
    buildArgs['CDK_VERSION'] = cdkVersion

    dependsOn copyPythonDeps
    dependsOn generateOpenApiServer
}
