pluginManagement {
    repositories {
        gradlePluginPortal()
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots'
        }
    }
    resolutionStrategy {
        eachPlugin {
            // We're using the 6.1.0-SNAPSHOT version of openapi-generator which contains a fix for generating nullable arrays (https://github.com/OpenAPITools/openapi-generator/issues/13025)
            // The snapshot version isn't available in the main Gradle Plugin Portal, so we added the Sonatype snapshot repository above.
            // The useModule command below allows us to map from the plugin id, `org.openapi.generator`, to the underlying module (https://oss.sonatype.org/content/repositories/snapshots/org/openapitools/openapi-generator-gradle-plugin/6.1.0-SNAPSHOT/_
            if (requested.id.id == 'org.openapi.generator') {
                useModule "org.openapitools:openapi-generator-gradle-plugin:${requested.version}"
            }
        }
    }
}

// Configure the gradle enterprise plugin to enable build scans. Enabling the plugin at the top of the settings file allows the build scan to record
// as much information as possible.
plugins {
    id "com.gradle.enterprise" version "3.4.1"
    id 'com.github.burrunan.s3-build-cache' version "1.5"
}

gradleEnterprise {
    buildScan {
        termsOfServiceUrl = "https://gradle.com/terms-of-service"
        termsOfServiceAgree = "yes"
    }
}

ext.isCiServer = System.getenv().containsKey("CI")

buildCache {
    local {
        // Local build cache is dangerous as it might produce inconsistent results
        // in case developer modifies files while the build is running
        enabled = false
    }
    remote(com.github.burrunan.s3cache.AwsS3BuildCache) {
        region = 'us-east-2'
        bucket = 'airbyte-buildcache'
        prefix = 'cache/'
        push = isCiServer
        // Credentials will be taken from  S3_BUILD_CACHE_... environment variables
        // anonymous access will be used if environment variables are missing
    }
}

rootProject.name = 'airbyte'

// definition for dependency resolution
dependencyResolutionManagement {
    repositories {
        maven {
            url 'https://airbyte.mycloudrepo.io/public/repositories/airbyte-public-jars/'
        }
    }
    versionCatalogs {
        libs {
            from(files("deps.toml"))
        }
    }
}

// todo (cgardens) - alphabetize
// shared
include ':airbyte-commons'

include ':airbyte-api'
include ':airbyte-commons-cli'
include ':airbyte-commons-protocol'
include ':airbyte-config:specs'
include ':airbyte-config:init'
include ':airbyte-config:config-models' // reused by acceptance tests in connector base.
include ':airbyte-db:db-lib' // reused by acceptance tests in connector base.
include ':airbyte-json-validation'
include ':airbyte-metrics:metrics-lib'
include ':airbyte-oauth'
include ':airbyte-test-utils'

// airbyte-workers has a lot of dependencies.
include ':airbyte-analytics' // transitively used by airbyte-workers.
include ':airbyte-commons-temporal'
include ':airbyte-commons-converters'
include ':airbyte-commons-worker'
include ':airbyte-config:config-persistence' // transitively used by airbyte-workers.
include ':airbyte-featureflag'
include ':airbyte-db:jooq' // transitively used by airbyte-workers.
include ':airbyte-notification' // transitively used by airbyte-workers.
include ':airbyte-persistence:job-persistence' // transitively used by airbyte-workers.
include ':airbyte-worker-models'

include ':airbyte-bootloader'
include ':airbyte-commons-server'
include ':airbyte-connector-atelier-server'
include ':airbyte-connector-builder-server'
include ':airbyte-container-orchestrator'
include ':airbyte-cron'
include ':airbyte-metrics:reporter'
include ':airbyte-proxy'
include ':airbyte-server'
include ':airbyte-temporal'
include ':airbyte-tests'
include ':airbyte-webapp'
include ':airbyte-webapp-e2e-tests'
include ':airbyte-workers'
