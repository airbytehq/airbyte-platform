micronaut:
  application:
    name: airbyte-workload-api-server
  env:
    cloud-deduction: true
  executors:
    io:
      type: fixed
      n-threads: ${IO_TASK_EXECUTOR_THREADS:10} # Match the data source max pool size below
    workload:
      type: fixed
      n-threads: ${WORKLOAD_TASK_EXECUTOR_THREADS:50}
  metrics:
    enabled: ${MICROMETER_METRICS_ENABLED:false}
    binders:
      netty:
        bytebuf-allocators:
          enabled: false
        channels:
          enabled: false
        queues:
          enabled: true
      web:
        enabled: true
        server:
          percentiles: "0.95"
        client:
          percentiles: "0.95"
    export:
      statsd:
        enabled: ${MICROMETER_METRICS_ENABLED:false}
        flavor: ${MICROMETER_METRICS_STATSD_FLAVOR:datadog}
        step: ${MICROMETER_METRICS_STEP:PT30S}
        host: ${STATSD_HOST:localhost}
        port: ${STATSD_PORT:8125}
  security:
    authentication-provider-strategy: ALL
    enabled: ${API_AUTHORIZATION_ENABLED:true}
    token:
      jwt:
        bearer:
          secret: ${WORKLOAD_API_BEARER_TOKEN:}
  server:
    port: 8007
    cors:
      enabled: true
      configurations:
        web:
          allowed-origins-regex:
            - ^.*$
    idle-timeout: ${HTTP_IDLE_TIMEOUT:5m}
    netty:
      access-logger:
        enabled: ${HTTP_ACCESS_LOG_ENABLED:false}
      aggregator:
        max-content-length: 52428800 # 50MB
    max-request-size: 10485760 # 10MB the micronaut default. If we want to bump, double check it works for nginx.

airbyte:
  feature-flag:
    client: ${FEATURE_FLAG_CLIENT:}
    path: ${FEATURE_FLAG_PATH:/flags}
    api-key: ${LAUNCHDARKLY_KEY:}

endpoints:
  beans:
    enabled: true
    sensitive: false
  env:
    enabled: true
    sensitive: false
  health:
    enabled: true
    jdbc:
      enabled: false
    sensitive: false
  info:
    enabled: true
    sensitive: true
  loggers:
    enabled: true
    sensitive: false
  metrics:
    enabled: ${MICROMETER_METRICS_ENABLED:false}
    sensitive: false
  refresh:
    enabled: false
    sensitive: true
  routes:
    enabled: true
    sensitive: false
  threaddump:
    enabled: true
    sensitive: true

datasources:
  workload:
    connection-test-query: SELECT 1
    connection-timeout: 30000
    maximum-pool-size: ${CONFIG_DB_MAX_POOL_SIZE:10}
    minimum-idle: 0
    idle-timeout: 600000
    initialization-fail-timeout: -1 # Disable fail fast checking to avoid issues due to other pods not being started in time
    url: ${DATABASE_URL}
    driverClassName: org.postgresql.Driver
    username: ${DATABASE_USER}
    password: ${DATABASE_PASSWORD}
    leak-detection-threshold: 40000 # This should be slightly higher than the connection-timeout setting but not too high to avoid false positives and negatives.

temporal:
  cloud:
    client:
      cert: ${TEMPORAL_CLOUD_CLIENT_CERT:}
      key: ${TEMPORAL_CLOUD_CLIENT_KEY:}
    enabled: ${TEMPORAL_CLOUD_ENABLED:false}
    host: ${TEMPORAL_CLOUD_HOST:}
    namespace: ${TEMPORAL_CLOUD_NAMESPACE:}
  self-hosted:
    host: ${TEMPORAL_HOST:`airbyte-temporal:7233`}
    namespace: ${TEMPORAL_NAMESPACE:default}
  sdk:
    timeouts:
      max-time-to-connect: 120s
      rpc-timeout: ${TEMPORAL_SDK_RPC_TIMEOUT:60s}
      rpc-long-poll-timeout: ${TEMPORAL_SDK_RPC_LONG_POLL_TIMEOUT:70s}
      rpc-query-timeout: ${TEMPORAL_SDK_RPC_QUERY_TIMEOUT:10s}

logger:
  levels:
    # io.micronaut.data.query: TRACE
    #   Uncomment to help resolve issues with conditional beans
    # io.micronaut.context.condition: DEBUG
#   Uncomment to help resolve issues with security beans
#      io.micronaut.security: DEBUG
#   Uncomment to help resolve issues with micronaut data
#      com.zaxxer.hikari.HikariConfig: DEBUG
#      com.zaxxer.hikari: TRACE

jackson:
  mapper:
    ACCEPT_CASE_INSENSITIVE_ENUMS: true
  serialization-inclusion: always
