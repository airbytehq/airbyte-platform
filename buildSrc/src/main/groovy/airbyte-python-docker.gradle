import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.tasks.Exec

/*
This plugin exists to build & test a python module via Gradle without requiring the developer to install Python on their machine. It achieves this by mounting the module into a Python Docker image and running the tests. 
Modules consuming this plugin must define two scripts `run_tests.sh`.
*/

class AirbytePythonDockerPlugin implements Plugin<Project> {

    void apply(Project project) {

        project.task('airbytePythonDockerApply', type: Exec) {
            /*
            Install the dependencies and run the tests from a docker container
             */

            // This doesn't take into account dependencies if you don't have a lock file. We strongly recommend using a
            // lock file in other to ensure that given no file changes and two "pip install", you have the same output
            inputs.dir project.fileTree(project.projectDir.getAbsolutePath()).exclude([
                    "build",
                    "dist",
                    "**/*.pyc",
                    "**/*.pyo",
                    "**/*.pyd",
                    "**/__pycache__",
                    "**/.pytest_cache",
                    "**/.venv",
                    "**/*.egg-info",
            ])
            outputs.cacheIf { true }
            outputs.upToDateWhen { true }

            commandLine "docker", "run", "-v", "${project.projectDir.getAbsolutePath()}:/home", "--entrypoint", "/bin/bash", "python:3.9-slim", "-c", "chmod +x /home/run_tests.sh && /home/run_tests.sh /home"
        }

        project.assemble.dependsOn project.airbytePythonDockerApply
        project.test.dependsOn project.airbytePythonDockerApply
    }
}
