import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.tasks.Exec

/*
This plugin exists to build & test a python module via Gradle without requiring the developer to install Python on their machine. It achieves this by mounting the module into a Python Docker image and running the tests. 
Modules consuming this plugin must define two scripts `run_tests.sh`.
*/

class AirbytePythonDockerPlugin implements Plugin<Project> {

    void apply(Project project) {

        def taskAirbytePythonDockerApply = project.tasks.register('airbytePythonDockerApply', Exec) {
            /*
            Install the dependencies and run the tests from a docker container
             */

            // This doesn't take into account dependencies if you don't have a lock file. We strongly recommend using a
            // lock file in other to ensure that given no file changes and two "pip install", you have the same output
            inputs.dir project.fileTree(project.projectDir.getAbsolutePath()).exclude([
                    "build",
                    "dist",
                    "**/*.pyc",
                    "**/*.pyo",
                    "**/*.pyd",
                    "**/__pycache__",
                    "**/.pytest_cache",
                    "**/.venv",
                    "**/*.egg-info",
            ])
            outputs.cacheIf { true }
            outputs.upToDateWhen { true }

            // HACK: This is a workaround for the local VM. The volume will be mounted into the container from the guest path, not the host.
            def String d

            if (System.getenv("LOCAL_VM") == "true") {
                d = "/srv/airbyte-platform-internal/oss/airbyte-connector-builder-server"
            } else {
                d = project.projectDir.getAbsolutePath()
            }
            // In Dagger, it's way easier to run these tests via the container API
            // rather than worry about mounting from guest container into a new container
            if ( !System.getenv("DAGGER")) {
                commandLine "docker", "run", "-v", "${d}:/home", "-v", "${d}/run_tests.sh:/home/run_tests.sh", "--entrypoint", "/bin/bash", "python:3.9-slim", "-c", "chmod +x /home/run_tests.sh && /home/run_tests.sh /home" 
            } else {
                commandLine "echo", "Skipping Python tests via Gradle in CI, these will be run via Dagger in a separate pipeline"
            }
        }
        project.tasks.named("assemble") {
            dependsOn taskAirbytePythonDockerApply
        }
        project.tasks.named("test") {
            dependsOn taskAirbytePythonDockerApply
        }
    }
}
