---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.names.fullname" . }}
  labels:
    {{- include "airbyte.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "airbyte.selectorLabels" . | nindent 6 }}
      {{- if .Values.extraSelectorLabels }}
      {{ toYaml (mergeOverwrite .Values.extraSelectorLabels .Values.global.extraSelectorLabels) | nindent 6 }}
      {{- end }}
  strategy:
    type: {{ .Values.deploymentStrategyType }}
  template:
    metadata:
      labels:
        {{- include "airbyte.selectorLabels" . | nindent 8 }}
        {{- if .Values.extraSelectorLabels }}
        {{ toYaml (mergeOverwrite .Values.extraSelectorLabels .Values.global.extraSelectorLabels) | nindent 8 }}
        {{- end }}
        {{- if .Values.podLabels }}
          {{- include "common.tplvalues.render" (dict "value" .Values.podLabels "context" $) | nindent 8 }}
        {{- end }}
      {{- if .Values.podAnnotations }}
      annotations:
        {{- include "common.tplvalues.render" (dict "value" .Values.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ .Values.global.serviceAccountName }}
      {{- if .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- range .Values.global.imagePullSecrets }}
          {{- printf "- name: %s" .name | nindent 8 }}
        {{- end }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.extraInitContainers }}
      initContainers:
      {{- toYaml .Values.extraInitContainers | nindent 6 }}
      {{- end }}
      containers:
      - name: airbyte-workload-api-server-container
        image: {{ printf "%s:%s" .Values.image.repository (include "workload-api.imageTag" .) }}
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        env:
        {{- if .Values.debug.enabled }}
        - name: JAVA_TOOL_OPTIONS
          value: "-Xdebug -agentlib:jdwp=transport=dt_socket,address=0.0.0.0:{{ .Values.debug.remoteDebugPort }},server=y,suspend=n"
        {{- end}}
        {{- if eq .Values.global.deploymentMode "oss"  }}
        - name: AIRBYTE_VERSION
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: AIRBYTE_VERSION
        - name: INTERNAL_API_HOST
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: INTERNAL_API_HOST
        - name: AIRBYTE_API_HOST
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: AIRBYTE_API_HOST
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.database.secretName | default (printf "%s-airbyte-secrets" .Release.Name ) }}
              key: {{ .Values.global.database.secretValue | default "DATABASE_PASSWORD" }}
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: DATABASE_URL
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-airbyte-secrets
              key: DATABASE_USER
        - name: TEMPORAL_HOST
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: TEMPORAL_HOST
        - name: WORKLOAD_API_BEARER_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.database.secretName | default (printf "%s-airbyte-secrets" .Release.Name ) }}
              key: {{ .Values.global.database.secretValue | default "WORKLOAD_API_BEARER_TOKEN" }}
        {{- end }}

        # Values from secret
        {{- if .Values.secrets }}
        {{- range $k, $v := .Values.secrets }}
        - name: {{ $k }}
          valueFrom:
            secretKeyRef:
              name: workload-api-secrets
              key: {{ $k }}
        {{- end }}
        {{- end }}

        # Values from env
        {{- if or .Values.env_vars .Values.global.env_vars }}
        {{- range $k, $v := mergeOverwrite .Values.env_vars .Values.global.env_vars }}
        - name: {{ $k }}
          value: {{ $v | quote }}
        {{- end }}
        {{- end }}

        # Values from extraEnv for more compability(if you want to use external secret source or other stuff)
        {{- if .Values.extraEnv }}
        {{- toYaml .Values.extraEnv | nindent 8 }}
        {{- end }}

        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: /health/liveness
            port: http
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        {{- end }}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            path: /health/liveness
            port: http
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
        {{- end }}

        ports:
        - name: http
          containerPort: 8007
          protocol: TCP
        {{- if .Values.debug.enabled }}
        - name: debug 
          containerPort: {{ .Values.debug.remoteDebugPort }}
          protocol: TCP
        {{- end}}
        {{- if .Values.resources }}
        resources: {{- toYaml .Values.resources | nindent 10 }}
        {{- end }}
        {{- if .Values.containerSecurityContext }}
        securityContext: {{- toYaml .Values.containerSecurityContext | nindent 10 }}
        {{- end }}
        volumeMounts:
        {{- if eq .Values.global.deploymentMode "oss" }}
          - name: gcs-log-creds-volume
            mountPath: /secrets/gcs-log-creds
            readOnly: true
        {{- end }}
        {{- if .Values.extraVolumeMounts }}
{{- toYaml .Values.extraVolumeMounts | nindent 8 }}
        {{- end }}
        {{- if .Values.global.extraVolumeMounts }}
{{- toYaml .Values.global.extraVolumeMounts | nindent 8 }}
        {{- end }}
      {{- if .Values.extraContainers }}
      {{ toYaml .Values.extraContainers | nindent 6 }}
      {{- end }}
      {{- if .Values.global.extraContainers }}
      {{ toYaml .Values.global.extraContainers | nindent 6 }}
      {{- end }}
      volumes:
      {{- if eq .Values.global.deploymentMode "oss" }}
        - name: gcs-log-creds-volume
          secret:
            secretName: {{ ternary (printf "%s-gcs-log-creds" ( .Release.Name )) (.Values.global.credVolumeOverride) (eq .Values.global.deploymentMode "oss") }}
      {{- end }}
      {{- if .Values.extraVolumes }}
{{- toYaml .Values.extraVolumes | nindent 6 }}
      {{- end }}
      {{- if .Values.global.extraVolumes }}
{{- toYaml .Values.global.extraVolumes | nindent 6 }}
      {{- end }}
