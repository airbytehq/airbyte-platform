# if Cloud or Pro, render the keycloak deployment template.
{{- if or (eq .Values.global.deploymentMode "cloud") (eq .Values.global.edition "pro") }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.names.fullname" . }}
  labels:
    {{- include "airbyte.labels" . | nindent 4 }}
      {{- if .Values.extraLabels }}
      {{ toYaml (mergeOverwrite .Values.extraLabels .Values.global.extraLabels) | nindent 4 }}
      {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    {{- if gt (int .Values.replicaCount) 1 }}
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    {{- end }}
  selector:
    matchLabels:
      {{- include "airbyte.selectorLabels" . | nindent 6 }}
        {{- if .Values.extraLabels }}
        {{ toYaml (mergeOverwrite .Values.extraSelectorLabels .Values.global.extraSelectorLabels) | nindent 4 }}
        {{- end }}
  template:
    metadata:
      labels:
        {{- include "airbyte.selectorLabels" . | nindent 8 }}
          {{- if .Values.extraSelectorLabels }}
          {{ toYaml (mergeOverwrite .Values.extraSelectorLabels .Values.global.extraSelectorLabels) | nindent 8 }}
          {{- end }}
          {{- if .Values.podLabels }}
          {{- include "common.tplvalues.render" (dict "value" .Values.podLabels "context" $) | nindent 8 }}
          {{- end }}
      {{- if .Values.podAnnotations }}
      annotations:
        {{- include "common.tplvalues.render" (dict "value" .Values.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ .Values.global.serviceAccountName }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.extraInitContainers }}
      initContainers:
      {{- toYaml .Values.extraInitContainers | nindent 6 }}
      {{- end }}
      containers:
        - name: airbyte-keycloak
          image: {{ printf "%s:%s" .Values.image.repository (include "keycloak.imageTag" .) }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            {{- if eq .Values.global.deploymentMode "oss"  }}
            - name: KEYCLOAK_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.secretName | default (printf "%s-airbyte-secrets" .Release.Name) }}
                  key: KEYCLOAK_ADMIN_USER
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.secretName | default (printf "%s-airbyte-secrets" .Release.Name) }}
                  key: KEYCLOAK_ADMIN_PASSWORD
            - name: KEYCLOAK_DATABASE_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-airbyte-env
                  key: DATABASE_URL # use the same database as airbyte
            - name: KEYCLOAK_DATABASE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.secretName | default (printf "%s-airbyte-secrets" .Release.Name) }}
                  key: DATABASE_USER
            - name: KEYCLOAK_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.database.secretName | default (printf "%s-airbyte-secrets" .Release.Name ) }}
                  key: {{ .Values.global.database.secretValue | default "DATABASE_PASSWORD" }}
            - name: KEYCLOAK_PORT
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-airbyte-env
                  key: KEYCLOAK_PORT
            - name: KEYCLOAK_HOSTNAME_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-airbyte-env
                  key: KEYCLOAK_HOSTNAME_URL
            - name: JAVA_OPTS_APPEND
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-airbyte-env
                  key: KEYCLOAK_JAVA_OPTS_APPEND
            {{- end }}
            {{- if .Values.extraEnv }}
            {{ .Values.extraEnv | toYaml | nindent 12 }}
            {{- end }}

            # Values from secret
            {{- if .Values.secrets }}
            {{- range $k, $v := .Values.secrets }}
            - name: {{ $k }}
              valueFrom:
                secretKeyRef:
                  name: keycloak-secrets
                  key: {{ $k }}
            {{- end }}
            {{- end }}

            # Values from env
            {{- if .Values.env_vars }}
            {{- range $k, $v := mergeOverwrite .Values.env_vars .Values.global.env_vars }}
            - name: {{ $k }}
              value: {{ $v | quote }}
            {{- end }}
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
            - containerPort: 7800
          {{- if .Values.containerSecurityContext }}
          securityContext: {{- toYaml .Values.containerSecurityContext | nindent 12 }}
          {{- end }}
          volumeMounts:
          {{- if .Values.extraVolumeMounts }}
          {{ toYaml .Values.extraVolumeMounts | nindent 10 }}
          {{- end }}
          {{- if .Values.resources }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /auth/health/live
              port: {{ .Values.service.port }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /auth/health/ready
              port: {{ .Values.service.port }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
      {{- if .Values.extraContainers }}
      {{ toYaml .Values.extraContainers | nindent 8 }}
      {{- end }}
      {{- if .Values.global.extraContainers }}
      {{ toYaml .Values.global.extraContainers | nindent 8 }}
      {{- end }}
      volumes:
      {{- if .Values.extraVolumes }}
      {{ toYaml .Values.extraVolumes | nindent 8 }}
      {{- end }}
  {{- end }}