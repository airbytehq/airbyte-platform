---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.names.fullname" . }}
  labels:
    {{- include "airbyte.labels" . | nindent 4 }}
    {{- if .Values.extraLabels }}
    {{ toYaml (mergeOverwrite .Values.extraLabels .Values.global.extraLabels) | nindent 4 }}
    {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "airbyte.selectorLabels" . | nindent 6 }}
      {{- if .Values.extraSelectorLabels }}
      {{ toYaml (mergeOverwrite .Values.extraSelectorLabels .Values.global.extraSelectorLabels) | nindent 6 }}
      {{- end }}
  template:
    metadata:
      labels:
        {{- include "airbyte.selectorLabels" . | nindent 8 }}
        {{- if .Values.extraSelectorLabels }}
        {{ toYaml (mergeOverwrite .Values.extraSelectorLabels .Values.global.extraSelectorLabels) | nindent 8 }}
        {{- end }}
        {{- if .Values.podLabels }}
          {{- include "common.tplvalues.render" (dict "value" .Values.podLabels "context" $) | nindent 8 }}
        {{- end }}
      {{- if .Values.podAnnotations }}
      annotations:
        {{- include "common.tplvalues.render" (dict "value" .Values.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ .Values.global.serviceAccountName }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- range .Values.global.imagePullSecrets }}
          {{- printf "- name: %s" .name | nindent 8 }}
        {{- end }}
      {{- end }}
      {{- if .Values.extraInitContainers }}
      initContainers:
      {{- toYaml .Values.extraInitContainers | nindent 6 }}
      {{- end }}
      containers:
      - name: airbyte-proxy-container
        image: {{ printf "%s:%s" .Values.image.repository (include "proxy.imageTag" .) }}
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        env:
        - name: BASIC_AUTH_USERNAME
          valueFrom:
            secretKeyRef:
                name: {{ .Values.global.secretName | default (printf "%s-airbyte-secrets" .Release.Name ) }}
                key: "BASIC_AUTH_USERNAME"
        - name: BASIC_AUTH_PASSWORD
          valueFrom:
            secretKeyRef:
                name: {{ .Values.global.secretName | default (printf "%s-airbyte-secrets" .Release.Name ) }}
                key: "BASIC_AUTH_PASSWORD"
        - name: PROXY_PASS_WEB
          value: "http://{{ .Values.proxy.webPassUrl | default (printf "%s-airbyte-webapp-svc" .Release.Name ) }}:{{ .Values.proxy.webPassPort | default 80 }}"
        - name: PROXY_PASS_API
          value: "http://{{ .Values.proxy.proxyPassUrl | default (printf "%s-airbyte-server-svc" .Release.Name ) }}:{{ .Values.proxy.proxyPassPort | default 8001 }}"
        - name: BASIC_AUTH_PROXY_TIMEOUT
          value: "{{ .Values.proxy.proxyTimeout | default "600" }}"
        - name: CONNECTOR_BUILDER_SERVER_API
          value: "http://{{ .Values.proxy.connectorBuilderApiUrl | default (printf "%s-airbyte-connector-builder-server-svc" .Release.Name ) }}:{{ .Values.proxy.connectorBuilderApiPort | default 8003 }}"
          {{- if or .Values.livenessProbe.enabled .Values.livenessProbe.enabled }}
        - name: BASIC_AUTH_TOKEN
          {{- if .Values.global.secretName }}
          valueFrom:
            secretKeyRef:
                name: {{ .Values.global.secretName | default (printf "%s-airbyte-secrets" .Release.Name ) }}
                key: "BASIC_AUTH_TOKEN"
          {{- else }}
          value: "{{ printf "%s:%s" ( required "Provide airbyte-proxy basic credentials via secrets or by external secret using secretName" .Values.secrets.BASIC_AUTH_USERNAME) ( required "Provide airbyte-proxy basic credentials via secrets or by external secret using secretName" .Values.secrets.BASIC_AUTH_PASSWORD ) | b64enc }}"
          {{- end }}
          {{- end }}

        # Values from secret
        {{- if .Values.secrets }}
        {{- range $k, $v := .Values.secrets }}
        - name: {{ $k }}
          valueFrom:
            secretKeyRef:
              name: proxy-secrets
              key: {{ $k }}
        {{- end }}
        {{- end }}

        # Values from env
        {{- if .Values.env_vars }}
        {{- range $k, $v := mergeOverwrite .Values.env_vars .Values.global.env_vars }}
        - name: {{ $k }}
          value: {{ $v | quote }}
        {{- end }}
        {{- end }}

        # Values from extraEnv for more compability(if you want to use external secret source or other stuff)
        {{- if .Values.extraEnv }}
        {{- toYaml .Values.extraEnv | nindent 8 }}
        {{- end }}


        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - "curl -H 'Authorization: Basic $(BASIC_AUTH_TOKEN)' 'http://localhost:8000'"
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        {{- end }}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - "curl -H 'Authorization: Basic $(BASIC_AUTH_TOKEN)' 'http://localhost:8000'"
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
        {{- end }}
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: http-proxy
          containerPort: 8001
          protocol: TCP
        - name: http-build
          containerPort: 8003
          protocol: TCP
        {{- if .Values.resources }}
        resources: {{- toYaml .Values.resources | nindent 10 }}
        {{- end }}
        {{- if .Values.containerSecurityContext }}
        securityContext: {{- toYaml .Values.containerSecurityContext | nindent 10 }}
        {{- end }}
        volumeMounts:
        {{- if .Values.extraVolumeMounts }}
  {{ toYaml .Values.extraVolumeMounts | nindent 8 }}
        {{- end }}
        {{- if .Values.global.extraVolumeMounts }}
  {{ toYaml .Values.global.extraVolumeMounts | nindent 8 }}
        {{- end }}
      {{- if .Values.extraContainers }}
      {{ toYaml .Values.extraContainers | nindent 6 }}
      {{- end }}
      {{- if .Values.global.extraContainers }}
      {{ toYaml .Values.global.extraContainers | nindent 6 }}
      {{- end }}
      volumes:
      {{- if .Values.extraVolumes }}
{{ toYaml .Values.extraVolumes | nindent 6 }}
      {{- end }}
      {{- if .Values.global.extraVolumes }}
{{ toYaml .Values.global.extraVolumes | nindent 6 }}
      {{- end }}
