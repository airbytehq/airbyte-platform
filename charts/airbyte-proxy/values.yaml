global:
  serviceAccountName: ""
  configMapName: ""
  ## secretName with BASIC_AUTH_USERNAME, BASIC_AUTH_PASSWORD, BASIC_AUTH_TOKEN secrets. BASIC_AUTH_TOKEN is base64 encoded value of user:password
  secretName: ""
  ## extraSelectorLables [object] - use to specify own additional selector labels for deployment
  extraSelectorLabels: {}
  ## extraLabels [object] - use to specify own additional labels for deployment
  extraLabels: {}
  secrets: {}

enabled: true
##  proxy.replicaCount Number of proxy replicas
replicaCount: 1

##  proxy.image.repository The repository to use for the airbyte proxy image.
##  proxy.image.pullPolicy the pull policy to use for the airbyte proxy image
##  proxy.image.tag The airbyte proxy image tag. Defaults to the chart's AppVersion
image:
  repository: airbyte/proxy
  pullPolicy: IfNotPresent

## proxy.proxy.webPassUrl and proxy.proxyPassUrl The URL used for proxing airbyte frontend
proxy:
  webPassUrl: ""
  webPassPort: 80
  proxyPassUrl: ""
  proxyPassPort: 8001
  connectorBuilderApiUrl: ""
  connectorBuilderApiPort: 8003
  proxyTimeout: 600

##  secrets [object] Supply additional secrets to container or proxy-auth authentication
## Example:
# secrets:
#    BASIC_AUTH_USERNAME: airbyte
#    BASIC_AUTH_PASSWORD: password
# Default credentials for airbyte proxy. You can provide existing secret via global.secretName
secrets: {}

##  proxy.podAnnotations [object] Add extra annotations to the proxy pod(s)
##
podAnnotations: {}

##  proxy.podLabels [object] Add extra labels to the proxy pod(s)
##
podLabels: {}

##  proxy.containerSecurityContext Security context for the container
## Examples:
## containerSecurityContext:
##    runAsNonRoot: true
##    runAsUser: 1000
##    readOnlyRootFilesystem: true
containerSecurityContext: {}

## Configure extra options for the proxy containers' liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
##  proxy.livenessProbe.enabled Enable livenessProbe on the proxy
##  proxy.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
##  proxy.livenessProbe.periodSeconds Period seconds for livenessProbe
##  proxy.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
##  proxy.livenessProbe.failureThreshold Failure threshold for livenessProbe
##  proxy.livenessProbe.successThreshold Success threshold for livenessProbe
##
livenessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 3
  successThreshold: 1

##  proxy.readinessProbe.enabled Enable readinessProbe on the proxy
##  proxy.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
##  proxy.readinessProbe.periodSeconds Period seconds for readinessProbe
##  proxy.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
##  proxy.readinessProbe.failureThreshold Failure threshold for readinessProbe
##  proxy.readinessProbe.successThreshold Success threshold for readinessProbe
##
readinessProbe:
  enabled: true
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 3
  successThreshold: 1

##  proxy.service.type The service type to use for the proxy service
##  proxy.service.port The service port to expose the proxy on
##  proxy.service.annotations Annotations for the proxy service resource
service:
  type: ClusterIP
  port: 8000
  annotations: {}

## Proxy app resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## We usually recommend not to specify default resources and to leave this as a conscious
## choice for the user. This also increases chances charts run on environments with little
## resources, such as Minikube. If you do want to specify resources, uncomment the following
## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
##  proxy.resources.limits [object] The resources limits for the proxy container
##  proxy.resources.requests [object] The requested resources for the proxy container
resources:
  ## Example:
  ## limits:
  ##    cpu: 200m
  ##    memory: 1Gi
  limits: {}
  ## Examples:
  ## requests:
  ##    memory: 256Mi
  ##    cpu: 250m
  requests: {}

##  proxy.nodeSelector [object] Node labels for pod assignment
## Ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

##  proxy.tolerations [array] Tolerations for proxy pod assignment.
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []

##  proxy.affinity [object] Affinity and anti-affinity for proxy pod assignment.
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

## Configure the ingress resource that allows you to access the Airbyte installation.
## ref: http://kubernetes.io/docs/user-guide/ingress/
##  proxy.ingress.enabled Set to true to enable ingress record generation
##  proxy.ingress.className Specifies ingressClassName for clusters >= 1.18+
##  proxy.ingress.annotations [object] Ingress annotations done as key:value pairs
##  proxy.ingress.hosts The list of hostnames to be covered with this ingress record.
##  proxy.ingress.tls [array] Custom ingress TLS configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts: []
  # - host: chart-example.local
  #   paths:
  #   - path: /
  #     pathType: ImplementationSpecific

  tls: []
  # - secretName: chart-example-tls
  #   hosts:
  #   - chart-example.local

##  proxy.extraVolumeMounts [array] Additional volumeMounts for proxy container(s).
## Examples (when using `proxy.containerSecurityContext.readOnlyRootFilesystem=true`):
## extraVolumeMounts:
##   - name: var-run
##     mountPath: /var/run/
##   - name: var-cache-nginx
##     mountPath: /var/cache/nginx
##   - mountPath: /etc/nginx/conf.d
##     name: nginx-conf-d
##
extraVolumeMounts: []

##  extraEnv [array] Supply extra env variables to main container using full notation
## Example: (With default env vars and values taken from generated config map)
# extraEnv:
#   - name: POSTGRES_USER
#     valueFrom:
#       secretKeyRef:
#         name: airbyte-secrets
#         key: DATABASE_USER
#   - name: POSTGRES_PWD
#     valueFrom:
#       secretKeyRef:
#         name: airbyte-secrets
#         key: DATABASE_PASSWORD
#   - name: DYNAMIC_CONFIG_FILE_PATH
#     value: "config/dynamicconfig/development.yaml"
#   - name: DB
#     value: "postgresql"
#   - name: DB_PORT
#     valueFrom:
#       configMapKeyRef:
#         name: airbyte-env
#         key: DATABASE_PORT
#   - name: POSTGRES_SEEDS
#     valueFrom:
#       configMapKeyRef:
#         name: airbyte-env
#         key: DATABASE_HOST
##
extraEnv: []

##  env_vars [object] Supply extra env variables to main container using simplified notation
## Example with default vars for proxy:
# env_vars:
#   AIRBYTE_VERSION: 0.40.4
#   # Miscellaneous
#   TRACKING_STRATEGY: segment
#   API_URL: /api/v1/
#   INTERNAL_API_HOST: airbyte-server-svc:8001
env_vars: {}

## extraSelectorLables [object] - use to specify own additional selector labels for deployment
extraSelectorLabels: {}
## extraLabels [object] - use to specify own additional labels for deployment
extraLabels: {}
