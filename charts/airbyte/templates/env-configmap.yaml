{{- if eq .Values.global.deploymentMode "oss"  }}
{{- $airbyteYmlDict := (default "" .Values.airbyteYml | fromYaml) }} # default to empty dict if airbyteYml is undefined
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-airbyte-env
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-1"
  labels:
    {{- include "airbyte.labels" . | nindent 4 }}
data:
  AIRBYTE_VERSION: {{ .Values.version | default .Chart.AppVersion }}
  AIRBYTE_EDITION: {{ .Values.global.edition | default "community" | quote }}
  API_URL: {{ .Values.webapp.api.url }}
  CONNECTOR_BUILDER_API_URL: {{ index .Values.webapp "connector-builder-server" "url" | quote }}
  CONFIG_API_HOST: http://{{ .Release.Name }}-airbyte-server-svc:{{ .Values.server.service.port }} # temporary solution for oss kube deploys for airbyte api server until that server is wrapped into the config server
  CONFIG_ROOT: /configs
  CONFIGS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION: "0.35.15.001"
  DATA_DOCKER_MOUNT: airbyte_data
  DATABASE_DB: {{ include "airbyte.database.name" . }}
  DATABASE_HOST: {{ include "airbyte.database.host" . }}
  DATABASE_PORT: {{ include "airbyte.database.port" . | quote }}
  DATABASE_URL: {{ include "airbyte.database.url" . | quote }}
  DB_DOCKER_MOUNT: airbyte_db
  GCS_LOG_BUCKET: {{ .Values.global.logs.gcs.bucket | quote }}
  GOOGLE_APPLICATION_CREDENTIALS: {{ include "airbyte.gcpLogCredentialsPath" . | quote }}
  INTERNAL_API_HOST: {{ .Release.Name }}-airbyte-server-svc:{{ .Values.server.service.port }}
{{- if eq (index .Values "workload-api-server" "enabled") true }}
  # Temporary conditional for OSS deploys.  Eventually, the workload-api will be present in OSS deploys and the else
  # block can be removed
  WORKLOAD_API_HOST: http://{{ .Release.Name }}-workload-api-server-svc:{{ index .Values "workload-api-server" "service" "port" }}
{{- else }}
  WORKLOAD_API_HOST: http://localhost # placeholder value
{{- end }}
{{- if eq .Values.global.edition "pro" }}
  KEYCLOAK_INTERNAL_HOST: {{ .Release.Name }}-airbyte-keycloak-svc:{{ .Values.keycloak.service.port }}
  KEYCLOAK_PORT: {{ .Values.keycloak.service.port | quote }}
  KEYCLOAK_HOSTNAME_URL: {{ printf "%s/auth" (index $airbyteYmlDict "webapp-url") | quote }}
  KEYCLOAK_JAVA_OPTS_APPEND: -Djgroups.dns.query={{ .Release.Name }}-airbyte-keycloak-headless-svc
{{- else }}
  KEYCLOAK_INTERNAL_HOST: localhost # just a placeholder so that nginx template is valid - shouldn't be used when edition isn't "pro"
{{- end }}
  CONNECTOR_BUILDER_API_HOST: {{ .Release.Name }}-airbyte-connector-builder-server-svc:{{ index .Values "connector-builder-server" "service" "port" }}
  AIRBYTE_API_HOST: {{ .Release.Name }}-airbyte-api-server-svc:{{ index .Values "airbyte-api-server" "service" "port" }}
{{- if $.Values.global.jobs.kube.annotations }}
  JOB_KUBE_ANNOTATIONS: {{ $.Values.global.jobs.kube.annotations | include "airbyte.flattenMap" | quote }}
{{- end }}
{{- if $.Values.global.jobs.kube.labels }}
  JOB_KUBE_LABELS: {{ $.Values.global.jobs.kube.labels | include "airbyte.flattenMap" | quote }}
{{- end }}
{{- if $.Values.global.jobs.kube.nodeSelector }}
  JOB_KUBE_NODE_SELECTORS: {{ $.Values.global.jobs.kube.nodeSelector | include "airbyte.flattenMap" | quote }}
{{- end }}
{{- if $.Values.global.jobs.kube.tolerations }}
  JOB_KUBE_TOLERATIONS: {{ $.Values.global.jobs.kube.tolerations | include "airbyte.flattenArrayMap" | quote }}
{{- end }}
{{- if $.Values.global.jobs.kube.images.busybox }}
  JOB_KUBE_BUSYBOX_IMAGE: {{ $.Values.global.jobs.kube.images.busybox | quote }}
{{- end }}
{{- if $.Values.global.jobs.kube.images.socat }}
  JOB_KUBE_SOCAT_IMAGE: {{ $.Values.global.jobs.kube.images.socat | quote }}
{{- end }}
{{- if $.Values.global.jobs.kube.images.curl }}
  JOB_KUBE_CURL_IMAGE: {{ $.Values.global.jobs.kube.images.curl | quote }}
{{- end }}
  JOB_MAIN_CONTAINER_CPU_LIMIT: {{ ((.Values.global.jobs.resources | default dict).limits | default dict).cpu | default "" | quote }}
  JOB_MAIN_CONTAINER_CPU_REQUEST: {{ ((.Values.global.jobs.resources | default dict).requests | default dict).cpu | default "" | quote }}
  JOB_MAIN_CONTAINER_MEMORY_LIMIT: {{ ((.Values.global.jobs.resources | default dict).limits | default dict).memory | default "" | quote }}
  JOB_MAIN_CONTAINER_MEMORY_REQUEST: {{ ((.Values.global.jobs.resources | default dict).requests | default dict).memory | default "" | quote }}
{{- if $.Values.global.jobs.kube.main_container_image_pull_secret }}
  JOB_KUBE_MAIN_CONTAINER_IMAGE_PULL_SECRET: {{ $.Values.global.jobs.kube.main_container_image_pull_secret }}
{{- end }}
  JOBS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION: "0.29.15.001"
  LOCAL_ROOT: /tmp/airbyte_local
  RUN_DATABASE_MIGRATION_ON_STARTUP: {{ index .Values "airbyte-bootloader" "runDatabaseMigrationsOnStartup" | default "true" | quote  }}
  S3_LOG_BUCKET: {{ .Values.global.logs.s3.bucket | quote }}
  S3_LOG_BUCKET_REGION: {{ .Values.global.logs.s3.bucketRegion | quote }}
  S3_MINIO_ENDPOINT: {{ include "airbyte.minio.endpoint" . | quote }}
  S3_PATH_STYLE_ACCESS: {{ include "airbyte.s3PathStyleAccess" . | quote }}
  SEGMENT_WRITE_KEY: 7UDdp5K55CyiGgsauOr2pNNujGvmhaeu
  STATE_STORAGE_MINIO_BUCKET_NAME: state-storage
  STATE_STORAGE_MINIO_ENDPOINT: {{ include "airbyte.minio.endpoint" . | quote }}
  TEMPORAL_HOST: {{ .Release.Name }}-temporal:{{ .Values.temporal.service.port }}
  TEMPORAL_WORKER_PORTS: 9001,9002,9003,9004,9005,9006,9007,9008,9009,9010,9011,9012,9013,9014,9015,9016,9017,9018,9019,9020,9021,9022,9023,9024,9025,9026,9027,9028,9029,9030,9031,9032,9033,9034,9035,9036,9037,9038,9039,9040
  TRACKING_STRATEGY: segment
  WEBAPP_URL: {{ .Values.webapp.url | default (printf "http://%s-airbyte-webapp-svc:%d" .Release.Name (.Values.webapp.service.port | int)) }}
  WORKER_ENVIRONMENT: kubernetes
  WORKSPACE_DOCKER_MOUNT: airbyte_workspace
  WORKSPACE_ROOT: /workspace
  METRIC_CLIENT: {{ .Values.global.metrics.metricClient | default "" | quote }}
  OTEL_COLLECTOR_ENDPOINT: {{ .Values.global.metrics.otelCollectorEndpoint | default "" | quote }}
  ACTIVITY_MAX_ATTEMPT: {{ .Values.worker.activityMaxAttempt | default "" | quote  }}
  ACTIVITY_INITIAL_DELAY_BETWEEN_ATTEMPTS_SECONDS: {{ .Values.worker.activityInitialDelayBetweenAttemptsSeconds | default "" | quote  }}
  ACTIVITY_MAX_DELAY_BETWEEN_ATTEMPTS_SECONDS: {{ .Values.worker.activityMaxDelayBetweenAttemptsSeconds | default "" | quote  }}
  WORKFLOW_FAILURE_RESTART_DELAY_SECONDS: ""
  AUTO_DETECT_SCHEMA: "true"
  CONTAINER_ORCHESTRATOR_IMAGE: {{ .Values.worker.containerOrchestrator.image | quote }}
  LAUNCHER_MICRONAUT_ENVIRONMENTS: "control-plane,oss"
  WORKERS_MICRONAUT_ENVIRONMENTS: "control-plane"
  CRON_MICRONAUT_ENVIRONMENTS: "control-plane"
  WORKER_LOGS_STORAGE_TYPE: {{ .Values.global.logs.storage.type | quote }}
  WORKER_STATE_STORAGE_TYPE:  {{ .Values.global.state.storage.type | quote }}
  SHOULD_RUN_NOTIFY_WORKFLOWS: "true"
  MAX_NOTIFY_WORKERS: {{ .Values.worker.maxNotifyWorkers | default "5" | quote }}
{{- end }}
