# Default values for airbyte-data-plane.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  registry: ""
  repository: airbyte/workload-launcher
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "airbyte-workload-launcher"

# -- The URL for the Airbyte Control Plane 
airbyteUrl: ""

api: 
  authHeaderName: "Authorization"

edition: "community"

dataPlane:
  secretName: ""
  id: "local"
  controlPlaneAuthEndpoint: ""
  serviceAccountEmail: ""
  serviceAccountCredentialsPath: ""

  clientId: ""
  clientIdSecretName: ""
  clientIdSecretKey: ""
  clientSecret: ""
  clientSecretSecretName: ""
  clientSecretSecretKey: ""

enterprise:
  # -- Secret name where an Airbyte license key is stored
  secretName: ""
  # -- The key within `licenseKeySecretName` where the Airbyte license key is stored
  licenseKey: ""
  licenseKeySecretKey: ""

logging:
  level: info
  httpAccessLogsEnabled: false
  log4jConfigFile: ""

secretsManager:
  enabled: false
  type: "" # one of: VAULT, GOOGLE_SECRET_MANAGER, AWS_SECRET_MANAGER, AZURE_KEY_VAULT, TESTING_CONFIG_DB_TABLE
  #secretName: "airbyte-config-secrets"

  #awsSecretManager:
  #  region: <aws-region>
  #  authenticationType: credentials ## Use "credentials" or "instanceProfile"
  #  tags: ## Optional - You may add tags to new secrets created by Airbyte.
  #    - key: ## e.g. team
  #      value: ## e.g. deployments
  #    - key: business-unit
  #      value: engineering
  #  kms: ## Optional - ARN for KMS Decryption.

  #googleSecretManager:
  #  projectId: <project-id>
  #  credentialsSecretKey: gcp.json

  #azureKeyVault:
  #  tenantId: ""
  #  vaultUrl: "" 
  #  clientId: ""
  #  clientIdSecretKey: ""
  #  clientSecret: ""
  #  clientSecretSecretKey: ""
  #  tags: ""

  #vault:

storage:
  secretName: ""
  # -- The storage backend type. Supports s3, gcs, azure, minio (default)
  type: minio # default storage used

  # Minio
  minio:
    accessKeyId: minio 
    secretAccessKey: "minio123"

  bucket: 
    log: airbyte-bucket
    state: airbyte-bucket
    workloadOutput: airbyte-bucket
    activityPayload: airbyte-bucket

  # S3
  #s3:
  #  region: "" ## e.g. us-east-1
  #  authenticationType: credentials ## Use "credentials" or "instanceProfile"
  #  accessKeyId: ""
  #  secretAccessKey: ""

  # GCS
  #gcs:
  #  projectId: <project-id>
  #  credentialsJson:  <base64-encoded>
  #  credentialsJsonPath: /secrets/gcs-log-creds/gcp.json

  # Azure
  #azure:
  #  # one of the following: connectionString, connectionStringSecretKey
  #  connectionString: <azure storage connection string>
  #  connectionStringSecretKey: <secret coordinate containing an existing connection-string secret>

workloads:
  secretName: ""
  namespace: "jobs"

  images:
    workloadInit: ""
    connectorSideCar: ""
    containerOrchestrator: ""

  containerOrchestrator:
    secretName: ""
    dataPlane:
      secretName: ""
      secretMountPath: ""

  queues:
    check: [CHECK_CONNECTION]
    discover: [DISCOVER_SCHEMA]
    sync: [SYNC]

  pubSub:
    enabled: false
    topicName: ""

  resources:
    useConnectorResourceDefaults: true

    mainContainer:
      cpu: {}
      memory: {}
    check:
      cpu: {}
      memory: {}
    discover:
      cpu: {}
      memory: {}
    replication:
      cpu: {}
      memory: {}
    sidecar:
      cpu: {}
      memory: {}

    fileTransfer:
      storage:
        request: 5G
        limit: 5G

java:
  opts: []

metrics:
  enabled: "false"
  step: ""

  otlp:
    enabled: "false"
    # -- The open-telemetry-collector endpoint that metrics will be sent to
    collectorEndpoint: ""

  statsd:
    enabled: "false"
    flavor: ""
    host: ""
    port: ""

  otel:
    resourceAttributes: {}

    collector:
      endpoint: ""

    exporter:
      name: "otlp"
      protocol: "grpc" 
      timeout: "30000"
      metricExportInterval: "10000"
  
jobs:
  resources:
    requests: {}
    limits: {}

  kube:
    annotations: {}
    labels: {}
    nodeSelector: {}
    tolerations: []
    mainContainerImagePullPolicy: "IfNotPresent"
    mainContainerImagePullSecret: ""

    localVolume:
      enabled: false

  errors:
    reportingStrategy: "logging" 

    #sentry: {}
    #  dsn: ""

tracking:
  enabled: true
  secretName: ""

  segment:
    writeKey: ""
    writeKeySecretKey: ""

micronaut:
  environments: []

workloadApiServer:
  secretName: ""
  bearerToken: token
  bearerTokenSecretName: ""

workloadLauncher:
  secretName: ""

  replicaCount: 1

  debug:
    enabled: false
    remoteDebugPort: 5005

  image:
    repository: airbyte/workload-launcher
    pullPolicy: IfNotPresent

  heartbeatPort: 8016

  parallelism: 10

  containerOrchestrator:
    # -- Enable or disable Orchestrator
    enabled: true

    secretName: ""

    # -- Orchestrator image
    # This is a template string that will be passed to the "tpl" helper.
    image: "airbyte/container-orchestrator:{{ default .Chart.AppVersion .Values.image.tag }}"

  connectorSidecar:
    # -- Connector Sidecar image
    # This is a template string that will be passed to the "tpl" helper.
    image: "airbyte/connector-sidecar:{{ default .Chart.AppVersion .Values.image.tag }}"

  workloadInit:
    # -- Workload init image
    # This is a template string that will be passed to the "tpl" helper.
    image: "airbyte/workload-init-container:{{ default .Chart.AppVersion .Values.image.tag }}"

  connectorProfiler:
    # -- Workload init image
    # This is a template string that will be passed to the "tpl" helper.
    image: "airbyte/async-profiler:{{ default .Chart.AppVersion .Values.image.tag }}"

  ##  Pod TTLs in minutes
  ##  pod-sweeper will skip over pods with any status types with no TTL set (empty string)
  ##  Pod Status docs: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-phase
  ##
  ##  podSweeper.timeToDeletePods.running Time to remove pods on running status (minutes).
  ##  podSweeper.timeToDeletePods.succeeded Time to remove pods on succeeded status (minutes).
  ##  podSweeper.timeToDeletePods.unsuccessful Time to remove pods on neither running nor succeeded status (minutes).
  timeToDeletePods:
    running: ""
    succeeded: 10
    ## 2 hours - generally long enough for someone trying to reproduce an error to debug.
    unsuccessful: 120

  # This is for setting Kubernetes Annotations to a Pod.
  # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  podAnnotations: {}
  # This is for setting Kubernetes Labels to a Pod.
  # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  podLabels: {}

  podSecurityContext:
    # gid=1000(airbyte)
    fsGroup: 1000

  securityContext: 
    allowPrivilegeEscalation: false 
    runAsNonRoot: true
    # uid=1000(airbyte)
    runAsUser: 1000
    # gid=1000(airbyte)
    runAsGroup: 1000
    readOnlyRootFilesystem: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: RuntimeDefault

  extraEnv: []

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  livenessProbe:
    httpGet:
      path: /health/liveness
      port: heartbeat
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 3

  readinessProbe:
    httpGet:
      path: /health/readiness
      port: heartbeat
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 3

  # Additional volumes on the output Deployment definition.
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  nodeSelector: {}

  tolerations: []

  affinity: {}

    