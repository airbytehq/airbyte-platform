common:
  keyBasePath: global
  config:
    - env: AIRBYTE_EDITION
      key: edition
      defaultValue: community

    - env: AIRBYTE_VERSION
      key: version
      defaultValueExp: .Chart.AppVersion

    - env: AIRBYTE_CLUSTER_TYPE
      key: cluster.type

    - env: AIRBYTE_CLUSTER_NAME
      key: cluster.name

    - env: AIRBYTE_URL
      key: airbyteUrl

    - env: AIRBYTE_API_HOST
      key: api.host
      defaultValueExp: (ternary (printf "http://localhost:%d/api/public" (int .Values.server.service.port)) (printf "%s/api/public" .Values.global.airbyteUrl) (eq .Values.global.edition "community"))

    - env: AIRBYTE_API_AUTH_HEADER_NAME
      key: api.authHeaderName
      defaultValue: "X-Airbyte-Auth"

    - env: AIRBYTE_API_AUTH_HEADER_VALUE
      key: api.authHeaderValue
      sensitive: true
      includeIf: (eq (include "airbyte.common.api.authHeaderName" .) "X-Endpoint-API-UserInfo")

    # NOTE: this must NOT include the scheme (http://)
    - env: AIRBYTE_SERVER_HOST
      key: server.host
      valueExp: (printf "%s-airbyte-server-svc.%s:%d" .Release.Name .Release.Namespace (int .Values.server.service.port))

    - env: API_AUTHORIZATION_ENABLED
      key: auth.enabled
      defaultValue: true

    - env: CONNECTOR_BUILDER_SERVER_API_HOST
      key: connectorBuilderServer.apiHost
      valueExp: (printf "http://%s-airbyte-connector-builder-server-svc.%s:%d" .Release.Name .Release.Namespace (int .Values.connectorBuilderServer.service.port))

    - env: DEPLOYMENT_ENV
      key: deploymentEnv

    - env: INTERNAL_API_HOST
      key: api.internalHost
      valueExp: ternary (include "airbyte.common.airbyteUrl" .) (printf "http://%s-airbyte-server-svc.%s:%d" .Release.Name .Release.Namespace (int .Values.server.service.port)) (eq (include "airbyte.common.cluster.type" .) "data-plane")
    
    - env: LOCAL
      key: local
      defaultValue: false

    - env: WEBAPP_URL
      key: webapp.url
      valueExp: (include "airbyte.common.airbyteUrl" .)

auth:
  keyBasePath: global.auth
  config:
    - env: AB_INSTANCE_ADMIN_PASSWORD
      key: instanceAdmin.password
      refKey: instance-admin-password
      sensitive: true
      secretRef: airbyte.auth.bootstrap.managedSecretName

# Configuration for the initial auth bootstrapping, used by the bootloader
auth.bootstrap:
  keyBasePath: global.auth
  config:
    - env: AB_AUTH_SECRET_CREATION_ENABLED
      key: secretCreationEnabled
      defaultValue: true

    - env: AB_KUBERNETES_SECRET_NAME
      key: managedSecretName
      defaultValue: airbyte-auth-secrets

    - env: AB_INSTANCE_ADMIN_PASSWORD
      key: instanceAdmin.password
      sensitive: true

    - env: AB_INSTANCE_ADMIN_PASSWORD_SECRET_KEY
      key: instanceAdmin.passwordSecretKey
      defaultValue: instance-admin-password

    # client id
    - env: AB_INSTANCE_ADMIN_CLIENT_ID
      key: instanceAdmin.clientId
      sensitive: true

    - env: AB_INSTANCE_ADMIN_CLIENT_ID_SECRET_KEY
      key: instanceAdmin.clientIdSecretKey
      defaultValue: instance-admin-client-id

    # client secret
    - env: AB_INSTANCE_ADMIN_CLIENT_SECRET
      key: instanceAdmin.clientSecret
      sensitive: true

    - env: AB_INSTANCE_ADMIN_CLIENT_SECRET_SECRET_KEY
      key: instanceAdmin.clientSecretSecretKey
      defaultValue: instance-admin-client-secret

    # jwt signature
    - env: AB_JWT_SIGNATURE_SECRET
      key: security.jwtSignatureSecret
      sensitive: true

    - env: AB_JWT_SIGNATURE_SECRET_KEY
      key: security.jwtSignatureSecretKey
      defaultValue: jwt-signature-secret

    # dataplane secret keys
    - env: DATAPLANE_CLIENT_ID_SECRET_KEY
      key: dataPlane.clientIdSecretKey
      defaultValue: dataplane-client-id

    - env: DATAPLANE_CLIENT_SECRET_SECRET_KEY
      key: dataPlane.clientSecretSecretKey
      defaultValue: dataplane-client-secret

auth.identityProvider:
  keyBasePath: global.auth.identityProvider
  discriminatorField: type
  discriminatorFieldOpts:
    - oidc
    - generic-oidc
  config:
    - env: IDENTITY_PROVIDER_TYPE
      key: type
      defaultValue: simple

    - env: AB_AIRBYTE_AUTH_IDENTITY_PROVIDER_VERIFY_ISSUER
      key: verifyIssuer
      defaultValue: false

    - env: AB_AIRBYTE_AUTH_IDENTITY_PROVIDER_VERIFY_AUDIENCE
      key: verifyAudience
      defaultValue: false

    - env: OIDC_DOMAIN
      key: oidc.domain
      discriminatorOpts:
        - oidc

    - env: OIDC_APP_NAME
      key: oidc.appName
      discriminatorOpts:
        - oidc

    - env: OIDC_CLIENT_ID
      key: oidc.clientId
      sensitive: true
      discriminatorOpts:
        - oidc

    - env: OIDC_CLIENT_SECRET
      key: oidc.clientSecret
      sensitive: true
      discriminatorOpts:
        - oidc

    - env: AB_AIRBYTE_AUTH_IDENTITY_PROVIDER_OIDC_CLIENT_ID 
      key: genericOidc.clientId
      discriminatorOpts:
        - generic-oidc

    - env: AB_AIRBYTE_AUTH_IDENTITY_PROVIDER_OIDC_AUDIENCE
      key: genericOidc.audience
      discriminatorOpts:
        - generic-oidc

    - env: DEFAULT_REALM
      key: genericOidc.issuer
      discriminatorOpts:
        - generic-oidc

    - env: AB_AIRBYTE_AUTH_IDENTITY_PROVIDER_OIDC_ENDPOINTS_AUTHORIZATION_SERVER_ENDPOINT
      key: genericOidc.endpoints.authorizationServerEndpoint
      discriminatorOpts:
        - generic-oidc

    - env: AB_AIRBYTE_AUTH_JWKS_ENDPOINT
      key: genericOidc.endpoints.jwksEndpoint
      discriminatorOpts:
        - generic-oidc

    - env: AB_AIRBYTE_AUTH_IDENTITY_PROVIDER_OIDC_FIELDS_SUB
      key: genericOidc.fields.subject
      discriminatorOpts:
        - generic-oidc
      defaultValue: sub

    - env: AB_AIRBYTE_AUTH_IDENTITY_PROVIDER_OIDC_FIELDS_EMAIL
      key: genericOidc.fields.email
      discriminatorOpts:
        - generic-oidc
      defaultValue: email

    - env: AB_AIRBYTE_AUTH_IDENTITY_PROVIDER_OIDC_FIELDS_NAME
      key: genericOidc.fields.name
      discriminatorOpts:
        - generic-oidc
      defaultValue: name

    - env: AB_AIRBYTE_AUTH_IDENTITY_PROVIDER_OIDC_FIELDS_ISSUER
      key: genericOidc.fields.issuer
      discriminatorOpts:
        - generic-oidc
      defaultValue: iss

auth.instanceAdmin.enterprise:
  keyBasePath: global.auth.instanceAdmin
  config: 
    - env: INITIAL_USER_FIRST_NAME
      key: firstName

    - env: INITIAL_USER_LAST_NAME
      key: lastName

    # DEPRECATED: ?
    #- env: INITIAL_USER_EMAIL
    #  key: email
    #  sensitive: true

    - env: INITIAL_USER_PASSWORD
      key: password
      sensitive: true

auth.jwt:
  keyBasePath: global.auth.security
  secretNamePath: global.auth.instanceAdmin.secretName
  config: 
    - env: AB_JWT_SIGNATURE_SECRET
      key: jwtSignatureSecret
      sensitive: true
      refKey: jwt-signature-secret
      secretRef: airbyte.auth.bootstrap.managedSecretName

auth.security:
  keyBasePath: global.auth.security
  config: 
    - env: AB_COOKIE_SECURE
      key: cookieSecureSetting
      defaultValue: true

    - env: AB_COOKIE_SAME_SITE
      key: cookieSameSiteSetting
      defaultValue: strict

aws:
  keyBasePath: global.aws
  config:
    - env: AWS_ASSUME_ROLE_ACCESS_KEY_ID
      key: assumeRole.accessKeyId
      sensitive: true

    - env: AWS_ASSUME_ROLE_SECRET_ACCESS_KEY
      key: assumeRole.secretAccessKey
      sensitive: true

    - env: AWS_ASSUME_ROLE_SECRET_NAME
      key: assumeRole.secretName
      defaultValueExp: (include "airbyte.common.secretName" .)

cluster:
  keyBasePath: global.cluster
  discriminatorField: type
  discriminatorFieldOpts:
    - control-plane
    - data-plane
    - hybrid
  config:
    - env: CLUSTER_TYPE
      key: type
      defaultValue: hybrid

    - env: CONTROL_PLANE_AUTH_ENDPOINT
      key: dataPlane.controlPlaneAuthEndpoint
      defaultValueExp: .Values.global.airbyteUrl
      discriminatorOpts:
       - data-plane
       - hybrid

connector:
  keyBasePath: global.connectorRegistry
  config: 
    - env: CONNECTOR_REGISTRY_SEED_PROVIDER
      key: seedProvider

    - env: ENTERPRISE_SOURCE_STUBS_URL
      key: enterpriseSourceStubsUrl
      defaultValue: https://connectors.airbyte.com/files/resources/connector_stubs/v1/connector_stubs.json

connectorBuilder:
  keyBasePath: connectorBuilderServer
  config:
    - env: AI_ASSIST_URL_BASE
      key: aiAssistUrlBase

    - env: BUILDER_GITHUB_AIRBYTE_PAT_TOKEN
      key: githubToken
      sensitive: true

connectorRollout:
  keyBasePath: global.connectorRollout
  config:
    - env: CONNECTOR_ROLLOUT_EXPIRATION_SECONDS
      key: expirationSeconds
      defaultValue: 7200

    - env: CONNECTOR_ROLLOUT_WAIT_BETWEEN_ROLLOUTS_SECONDS
      key: waitBetweenRolloutSeconds
      defaultValue: 60

    - env: CONNECTOR_ROLLOUT_WAIT_BETWEEN_SYNC_RESULTS_QUERIES_SECONDS
      key: waitBetweenSyncResultsQueriesSeconds
      defaultValue: 10

connectorRollout.temporal:
  keyBasePath: global.temporal.cloud.connectorRollout
  secretNamePath: global.temporal.secretName
  config:
    - env: TEMPORAL_CLOUD_HOST_CONNECTOR_ROLLOUT
      consumedAs: TEMPORAL_CLOUD_HOST
      key: host

    - env: TEMPORAL_CLOUD_NAMESPACE_CONNECTOR_ROLLOUT
      consumedAs: TEMPORAL_CLOUD_NAMESPACE
      key: namespace

connectorRolloutWorker: 
  keyBasePath: connectorRolloutWorker
  config:
    - env: CONNECTOR_ROLLOUT_GITHUB_AIRBYTE_PAT
      key: githubToken
      sensitive: true

cron:
  config:
    - env: UPDATE_DEFINITIONS_CRON_ENABLED
      key: jobs.updateDefinitions.enabled

customerio:
  keyBasePath: global.customerio
  config:
    - env: CUSTOMERIO_API_KEY
      key: apiKey
      sensitive: true

database:
  keyBasePath: global.database
  config:
    - env: DATABASE_HOST
      key: host
      defaultValueExp: (printf "airbyte-db-svc.%s.svc.cluster.local" .Release.Namespace)

    - env: DATABASE_PORT
      key: port
      defaultValue: 5432

    - env: DATABASE_URL
      key: url
      valueExp: (printf "jdbc:postgresql://%s:%d/%s" (include "airbyte.database.host" .) (int (include "airbyte.database.port" .)) (include "airbyte.database.name" .))

    - env: DATABASE_USER
      key: user
      sensitive: true
      defaultValue: airbyte
      includeIf: (eq (include "airbyte.database.cloudSqlProxy.enabled" .) "false")

    - env: DATABASE_PASSWORD
      key: password
      sensitive: true
      defaultValue: airbyte
      includeIf: (eq (include "airbyte.database.cloudSqlProxy.enabled" .) "false")

    - env: DATABASE_DB
      key: name
      defaultValue: db-airbyte

database.cloudSqlProxy:
  keyBasePath: global.cloudSqlProxy
  config:
    - env: USE_CLOUD_SQL_PROXY
      key: enabled
      defaultValue: false

database.migrations:
  keyBasePath: global.migrations
  config:
    - env: RUN_DATABASE_MIGRATION_ON_STARTUP 
      key: runAtStartup
      defaultValue: true

    - env: CONFIGS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION
      key: configDb.minimumFlywayMigrationVersion
      defaultValue: 0.35.15.001

    - env: JOBS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION
      key: jobsDb.minimumFlywayMigrationVersion
      defaultValue: 0.29.15.001

datadog:
  keyBasePath: global.datadog
  config:
    - env: DD_AGENT_HOST
      key: agentHost 
      valueFrom: 
        fieldRef:
          fieldPath: status.hostIP

    - env: DD_ENABLED
      key: enabled
      defaultValue: false

    - env: DD_ENV
      key: env

    - env: DD_VERSION
      key: version
      valueExp: .Values.global.image.tag

    - env: DD_DOGSTATSD_PORT
      key: statsd.port
      defaultValue: 8125

    - env: DD_TRACE_AGENT_PORT
      key: traceAgentPort
      defaultValue: 8126

    - env: DD_INTEGRATION_DBM_ENABLED
      key: integrations.dbm.enabled
      defaultValue: false

    - env: DD_INTEGRATION_DBM_PROPAGATION_MODE
      key: integrations.dbm.propagationMode
      defaultValue: full

    - env: DD_INTEGRATION_GOOGLE_HTTP_CLIENT_ENABLED
      key: integrations.googleHttpClient.enabled
      defaultValue: false

    - env: DD_INTEGRATION_GRPC_ENABLED
      key: integrations.grpc.enabled
      defaultValue: false

    - env: DD_INTEGRATION_GRPC_CLIENT_ENABLED
      key: integrations.grpc.clientEnabled
      defaultValue: false

    - env: DD_INTEGRATION_GRPC_SERVER_ENABLED
      key: integrations.grpc.serverEnabled
      defaultValue: false

    - env: DD_INTEGRATION_HTTPURLCONNECTION_ENABLED
      key: integrations.httpUrlConnection.enabled
      defaultValue: false

    - env: DD_INTEGRATION_KOTLIN_COROUTINE_EXPERIMENTAL_ENABLED
      key: integrations.kotlinCoroutineExperimental.enabled
      defaultValue: false

    - env: DD_INTEGRATION_NETTY_ENABLED
      key: integrations.netty.enabled
      defaultValue: false

    - env: DD_INTEGRATION_NETTY_4_1_ENABLED
      key: integrations.netty41.enabled
      defaultValue: false

    - env: DD_INTEGRATION_URLCONNECTION_ENABLED
      key: integrations.urlConnection.enabled
      defaultValue: false

enterprise:
  keyBasePath: global.enterprise
  config:
    - env: AIRBYTE_LICENSE_KEY
      key: licenseKey
      sensitive: true

featureFlags:
  keyBasePath: global.featureFlags
  discriminatorField: client
  discriminatorFieldOpts: 
    - configfile
    - launchdarkly
  config:
    - env: FEATURE_FLAG_CLIENT
      key: client
      defaultValue: configfile

    - env: FEATURE_FLAG_PATH
      key: configfile.path
      defaultValue: /etc/launchdarkly/flags.yml
      discriminatorOpts: 
        - configfile

    - env: LAUNCHDARKLY_KEY
      key: launchdarkly.key
      discriminatorOpts: 
        - launchdarkly
      sensitive: true

java:
  keyBasePath: global.java
  config:
    - env: JAVA_TOOL_OPTIONS
      key: opts
      valueExp: join " " .Values.global.java.opts

jobs:
  keyBasePath: global.jobs
  config:
    - env: JOB_KUBE_SERVICEACCOUNT
      key: kube.serviceAccount
      valueExp: .Values.global.serviceAccountName

    # TODO: This may need to be conditional depending on whether we are running
    # the control plane or the data plane.
    - env: JOB_KUBE_NAMESPACE
      key: kube.namespace
      valueFrom: 
        fieldRef:
          fieldPath: metadata.namespace

    - env: JOB_KUBE_LOCAL_VOLUME_ENABLED
      key: kube.localVolume.enabled
      defaultValue: false

    - env: JOB_KUBE_MAIN_CONTAINER_IMAGE_PULL_SECRET
      key: kube.mainContainerImagePullSecret
      valueExp: (include "airbyte.imagePullSecretNames" (dict "secrets" .Values.global.imagePullSecrets "extra" (list .Values.global.jobs.kube.mainContainerImagePullSecret)))

    - env: JOB_KUBE_ANNOTATIONS
      key: kube.annotations
      valueExp: .Values.global.jobs.kube.annotations | include "airbyte.flattenMap"

    - env: JOB_KUBE_LABELS
      key: kube.labels
      valueExp: .Values.global.jobs.kube.labels | include "airbyte.flattenMap"

    - env: JOB_KUBE_NODE_SELECTORS
      key: kube.nodeSelector
      valueExp: .Values.global.jobs.kube.nodeSelector | include "airbyte.flattenMap"

    - env: JOB_KUBE_TOLERATIONS
      key: kube.tolerations
      valueExp: .Values.global.jobs.kube.tolerations | include "airbyte.flattenArrayMap"

jobs.errors:
  keyBasePath: global.jobs.errors
  discriminatorField: reportingStrategy
  discriminatorFieldOpts:
    - logging
    - sentry
  config:
    - env: JOB_ERROR_REPORTING_STRATEGY
      key: reportingStrategy
      defaultValue: logging

    - env: JOB_ERROR_REPORTING_SENTRY_DSN
      key: sentry.dsn
      discriminatorOpts:
        - sentry

jobs.scheduling:
  keyBasePath: global.jobs.kube.scheduling
  config:
    - env: CHECK_JOB_KUBE_NODE_SELECTORS
      key: check.nodeSelectors
      valueExp: .Values.global.jobs.kube.scheduling.check.nodeSelectors | include "airbyte.flattenMap"

    - env: CHECK_JOB_KUBE_RUNTIME_CLASS_NAME
      key: check.runtimeClassName

    - env: DISCOVER_JOB_KUBE_NODE_SELECTORS
      key: discover.nodeSelectors
      valueExp: .Values.global.jobs.kube.scheduling.discover.nodeSelectors | include "airbyte.flattenMap"

    - env: DISCOVER_JOB_KUBE_RUNTIME_CLASS_NAME
      key: discover.runtimeClassName

    - env: JOB_ISOLATED_KUBE_NODE_SELECTORS 
      key: isolated.nodeSelectors
      valueExp: .Values.global.jobs.kube.scheduling.isolated.nodeSelectors | include "airbyte.flattenMap"

    - env: JOB_ISOLATED_KUBE_RUNTIME_CLASS_NAME
      key: isolated.runtimeClassName

    - env: JOB_SOURCE_DECLARATIVE_MANIFEST_KUBE_NODE_SELECTORS
      key: sourceDeclarativeManifest.nodeSelectors
      valueExp: .Values.global.jobs.kube.scheduling.sourceDeclarativeManifest.nodeSelectors | include "airbyte.flattenMap"

    - env: JOB_SOURCE_DECLARATIVE_MANIFEST_KUBE_RUNTIME_CLASS_NAME
      key: sourceDeclarativeManifest.runtimeClassName

# Configuration for the keycloak server
keycloak:
  keyBasePath: keycloak
  config:
    # TODO: cloud only
    #- env: KEYCLOAK_ADMIN_HOSTNAME_URL
    #  key: adminUrl
    #  defaultValueExp: (printf "http://localhost:%d/auth" (int (include "airbyte.keycloak.service.port" .)))

    # HACK: When set, keycloak will return a 302 with the keycloak hostname. However, if we are running enterprise, this breaks the keycloak setup job because it cannot resolve
    # local.airbyte.dev. Because of this, we only set this value if the edition is anything non-enterprise.
    - env: KEYCLOAK_HOSTNAME_URL
      key: url
      valueExp: ternary (printf "%s/auth" .Values.global.airbyteUrl) "" (ne .Values.global.edition "enterprise")

    - env: KEYCLOAK_HOST
      key: host
      valueExp: (get (urlParse .Values.global.airbyteUrl) "host")

    - env: KEYCLOAK_PORT
      key: service.port
      defaultValue: 8180

    - env: KEYCLOAK_PROTOCOL
      key: protocol
      defaultValue: https

    # NOTE: we only want to use this for keycloak (NOT keycloak-setup)
    - env: JAVA_OPTS_APPEND
      key: javaOpts
      valueExp: (printf "-Djgroups.dns.query=%s-airbyte-keycloak-headless-svc" .Release.Name)

keycloak.database:
  config:
    - env: KEYCLOAK_DATABASE_NAME
      key: name
      defaultValue: "db-airbyte"

    - env: KEYCLOAK_DATABASE_HOST
      key: host
      defaultValueExp: (printf "airbyte-db-svc.%s.svc.cluster.local" .Release.Namespace)
  
    - env: KEYCLOAK_DATABASE_PORT
      key: port
      defaultValue: 5432

    - env: KEYCLOAK_DATABASE_USERNAME
      key: user
      sensitive: true
      defaultValue: airbyte

    - env: KEYCLOAK_DATABASE_PASSWORD
      key: password
      sensitive: true
      defaultValue: airbyte

    - env: KEYCLOAK_DATABASE_URL
      key: url
      valueExp: (printf "jdbc:postgresql://%s:%d/%s?currentSchema=keycloak" (include "airbyte.keycloak.database.host" .) (int (include "airbyte.keycloak.database.port" .)) (include "airbyte.keycloak.database.name" .))

keycloak.admin.user:
  keyBasePath: keycloak
  config:
    - env: KEYCLOAK_ADMIN_USER
      key: auth.adminUsername
      sensitive: true

    - env: KEYCLOAK_ADMIN_PASSWORD
      key: auth.adminPassword
      sensitive: true

keycloak.admin.client:
  keyBasePath: keycloak
  config:
    - env: KEYCLOAK_ADMIN_REALM
      key: auth.adminRealm

    - env: KEYCLOAK_ADMIN_CLI_CLIENT_ID
      key: auth.adminCliClientId
      defaultValue: admin-cli

    - env: KEYCLOAK_CLIENT_REALM
      key: clientRealm
      defaultValue: _airbyte-application-clients

    - env: KEYCLOAK_INTERNAL_BASE_PATH
      key: internalBasePath
      defaultValue: /auth

    - env: KEYCLOAK_INTERNAL_HOST
      key: internalHost
      defaultValueExp: (ternary (printf "%s-airbyte-keycloak-svc.%s:%d" .Release.Name .Release.Namespace (int .Values.keycloak.service.port)) "localhost" (or (eq .Values.global.edition "enterprise") (ne .Values.global.edition "community")))

    - env: KEYCLOAK_INTERNAL_PROTOCOL
      key: internalProtocol
      defaultValue: http

    - env: KEYCLOAK_INTERNAL_REALM
      key: internalRealm
      defaultValue: _airbyte-internal

keycloak.client:
  keyBasePath: keycloak
  config:
    - env: KEYCLOAK_INTERNAL_REALM_ISSUER
      key: realmIssuer
      defaultValueExp: (ternary (printf "%s/auth/realms/%s" .Values.global.airbyteUrl (include "airbyte.keycloak.admin.client.internalRealm" .)) (printf "%s-airbyte-keycloak-svc.%s:%d/auth/realms/%s" .Release.Name .Release.Namespace (int (include "airbyte.keycloak.service.port" .)) (include "airbyte.keycloak.admin.client.internalRealm" .)) (eq (include "airbyte.common.cluster.type" .) "data-plane"))

logging:
  keyBasePath: global.logging
  config: 
    - env: LOG_LEVEL
      key: level
      defaultValue: INFO

metrics:
  keyBasePath: global.metrics
  config:
    - env: MICROMETER_METRICS_ENABLED
      key: enabled
      defaultValue: false

    - env: MICROMETER_METRICS_STEP
      key: step
      defaultValue: PT1M

    - env: MICROMETER_METRICS_STATSD_FLAVOR
      key: statsd.flavor
      defaultValue: datadog

    - env: MICROMETER_METRICS_OTLP_ENABLED
      key: otlp.enabled
      defaultValue: false

    - env: MICROMETER_METRICS_STATSD_ENABLED
      key: statsd.enabled
      defaultValue: false

    - env: OTEL_COLLECTOR_ENDPOINT
      key: otlp.collectorEndpoint

    - env: PUBLISH_METRICS
      key: publish
      defaultValue: true

    - env: STATSD_HOST
      key: statsd.host
      valueFrom:
        fieldRef:
          fieldPath: status.hostIP
    
    - env: STATSD_PORT
      key: statsd.port
      defaultValue: 8125

micronaut:
  keyBasePath: global.micronaut
  config:
    - env: MICRONAUT_ENVIRONMENTS
      key: environments
      valueExp: |
        join "," (
              concat .Values.global.micronaut.environments 
              (list (ternary "control-plane" (include "airbyte.common.cluster.type" .) (eq (include "airbyte.common.cluster.type" .) "hybrid")))
              (list (ternary "edition-community" (include "airbyte.auth.identityProvider.type" .) (eq (include "airbyte.auth.identityProvider.type" .) "simple")))
            )

minio:
  keyBasePath: minio
  config:
    - env: MINIO_ROOT_USER
      key: rootUser
      refKey: AWS_ACCESS_KEY_ID
      sensitive: true
      secretRef: airbyte.storage.secretName

    - env: MINIO_ROOT_PASSWORD
      key: rootPassword
      refKey: AWS_SECRET_ACCESS_KEY
      sensitive: true
      secretRef: airbyte.storage.secretName

otel:
  keyBasePath: global.metrics.otel
  config:
    - env: OTEL_EXPORTER_OTLP_ENDPOINT
      key: exporter.endpoint
      defaultValueExp: (ternary "http://${DD_AGENT_HOST}:4317" "" .Values.global.datadog.enabled)

    - env: OTEL_EXPORTER_OTLP_PROTOCOL
      key: exporter.protocol
      defaultValue: grpc

    - env: OTEL_EXPORTER_OTLP_TIMEOUT
      key: exporter.timeout
      defaultValue: 30000

    - env: OTEL_METRIC_EXPORT_INTERVAL
      key: exporter.metricExportInterval
      defaultValue: 10000

    - env: OTEL_METRICS_EXPORTER
      key: exporter.name
      defaultValue: otlp

    - env: OTEL_RESOURCE_ATTRIBUTES
      key: resourceAttributes
      defaultValueExp: (printf "service.name=%s,deployment.environment=%s,service.version=%s" (include "airbyte.componentName" .) .Values.global.env (include "airbyte.common.version" .))

secretsManager:
  keyBasePath: global.secretsManager
  discriminatorField: type
  discriminatorFieldOpts:
    - AWS_SECRET_MANAGER
    - AZURE_KEY_VAULT
    - GOOGLE_SECRET_MANAGER
    - TESTING_CONFIG_DB_TABLE
    - VAULT
  config:
    - env: SECRET_PERSISTENCE
      key: type

    - env: AWS_SECRET_MANAGER_ACCESS_KEY_ID 
      key: awsSecretManager.accessKeyId
      sensitive: true
      discriminatorOpts: 
        - AWS_SECRET_MANAGER 

    - env: AWS_SECRET_MANAGER_SECRET_ACCESS_KEY
      key: awsSecretManager.secretAccessKey
      sensitive: true
      discriminatorOpts: 
        - AWS_SECRET_MANAGER 

    - env: AWS_SECRET_MANAGER_REGION
      key: awsSecretManager.region
      discriminatorOpts: 
        - AWS_SECRET_MANAGER 

    - env: AWS_SECRET_MANAGER_SECRET_TAGS
      key: awsSecretManager.tags
      discriminatorOpts: 
        - AWS_SECRET_MANAGER 
      valueExp: include "airbyte.tagsToString" .Values.global.secretsManager.awsSecretManager.tags

    - env: AWS_KMS_KEY_ARN
      key: awsSecretManager.kmsArn
      discriminatorOpts: 
        - AWS_SECRET_MANAGER 
      defaultValue: ""

    - env: AB_AZURE_KEY_VAULT_CLIENT_ID
      key: azureKeyVault.clientId
      discriminatorOpts: 
        - AZURE_KEY_VAULT
      sensitive: true

    - env: AB_AZURE_KEY_VAULT_CLIENT_SECRET
      key: azureKeyVault.clientSecret
      discriminatorOpts: 
        - AZURE_KEY_VAULT
      sensitive: true

    - env: AB_AZURE_KEY_VAULT_TENANT_ID
      key: azureKeyVault.tenantId
      discriminatorOpts: 
        - AZURE_KEY_VAULT

    - env: AB_AZURE_KEY_VAULT_VAULT_URL
      key: azureKeyVault.vaultUrl
      discriminatorOpts:  
        - AZURE_KEY_VAULT

    - env: AB_AZURE_KEY_CLIENT_ID_REF_NAME
      key: azureKeyVault.clientIdRefName
      valueExp: include "airbyte.secretsManager.secretName" .
      discriminatorOpts:  
        - AZURE_KEY_VAULT

    - env: AB_AZURE_KEY_CLIENT_ID_REF_KEY
      key: azureKeyVault.clientIdRefKey
      valueExp: .Values.global.secretsManager.azureKeyVault.clientIdSecretKey | default "AB_AZURE_KEY_VAULT_CLIENT_ID"
      discriminatorOpts: 
        - AZURE_KEY_VAULT

    - env: AB_AZURE_KEY_CLIENT_SECRET_REF_NAME
      key: azureKeyVault.clientSecretRefName
      valueExp: include "airbyte.secretsManager.secretName" .
      discriminatorOpts: 
        - AZURE_KEY_VAULT

    - env: AB_AZURE_KEY_CLIENT_SECRET_REF_KEY
      key: azureKeyVault.clientSecretRefKey
      valueExp: .Values.global.secretsManager.azureKeyVault.clientSecretSecretKey | default "AB_AZURE_KEY_VAULT_CLIENT_SECRET"
      discriminatorOpts: 
        - AZURE_KEY_VAULT

    - env: SECRET_STORE_GCP_PROJECT_ID
      key: googleSecretManager.projectId
      discriminatorOpts: 
        - GOOGLE_SECRET_MANAGER

    - env: SECRET_STORE_GCP_CREDENTIALS
      key: googleSecretManager.credentials
      discriminatorOpts: 
        - GOOGLE_SECRET_MANAGER
      sensitive: true

    - env: SECRET_STORE_GCP_SECRET_KEY
      key: googleSecretManager.credentialsSecretKey
      valueExp: (include "airbyte.secretsManager.googleSecretManager.credentials.secretKey" .)
      discriminatorOpts: 
        - GOOGLE_SECRET_MANAGER
  
    - env: SECRET_STORE_GCP_SECRET_NAME
      key: googleSecretManager.credentailsSecretName
      valueExp: (include "airbyte.secretsManager.secretName" .)
      discriminatorOpts: 
        - GOOGLE_SECRET_MANAGER

    - env: VAULT_ADDRESS
      key: vault.address
      defaultValueExp: (printf "http://airbyte-vault-svc.%s:8200" .Release.Namespace)
      discriminatorOpts: 
        - VAULT

    - env: VAULT_PREFIX
      key: vault.prefix
      defaultValue: secret/
      discriminatorOpts: 
        - VAULT

    - env: VAULT_AUTH_TOKEN
      key: vault.authToken
      discriminatorOpts: 
        - VAULT
      sensitive: true

server:
  keybasePath: server
  config:  
    - env: AUDIT_LOGGING_ENABLED
      key: auditLoggingEnabled
      defaultValue: false
  
    - env: CONFIG_DB_MAX_POOL_SIZE
      key: configDbMaxPoolSize
      defaultValue: 20

    - env: CONNECTOR_DATADOG_SUPPORT_NAMES
      key: connectorDatadogSupportNames
      defaultValue: source-postgres-strict-encrypt=2.0.5
      includeIf: (eq (include "airbyte.common.edition" .) "cloud")

    - env: GCS_AIRBYTE_WAREHOUSE_EXPORTS_PROJECT_ID
      key: warehouseExports.projectId

    - env: GCS_AIRBYTE_WAREHOUSE_EXPORTS_BUCKET_NAME
      key: warehouseExports.bucketName

    - env: GCS_DATA_SALES_CUSTOMER_ATTRIBUTES_OBJECT_PREFIX
      key: data.salesCustomerAttributesObjectPrefix
      defaultValue: data/sales_customer_attributes

    - env: HTTP_IDLE_TIMEOUT
      key: httpIdleTimeout

    - env: OPENAI_API_KEY_PROJ_FAILED_SYNC_ASSISTANT
      key: openai.syncAssistantApiKey
      sensitive: true

    - env: PUBLIC_API_EXECUTOR_THREADS
      key: publicApiExecutor.numThreads

    - env: SCHEDULER_TASK_EXECUTOR_THREADS
      key: scheduler.numThreads

    - env: WEBAPP_DATADOG_APPLICATION_ID
      key: webapp.datadogApplicationId

    - env: WEBAPP_DATADOG_CLIENT_TOKEN
      key: webapp.datadogClientToken

    - env: WEBAPP_DATADOG_ENV
      key: webapp.datadogEnv

    - env: WEBAPP_DATADOG_SERVICE
      key: webapp.datadogService
      defaultValue: airbyte-webapp

    - env: WEBAPP_DATADOG_SITE
      key: webapp.datadogSite
      defaultValue: datadoghq.com

    - env: WEBAPP_HOCKEYSTACK_API_KEY
      key: webapp.hockeystackApiKey

    - env: WEBAPP_LAUNCHDARKLY_KEY
      key: webapp.launchdarklyKey

    - env: WEBAPP_OSANO_KEY
      key: webapp.osanoKey

    - env: WEBAPP_SEGMENT_TOKEN
      key: webapp.segmentToken

    - env: WEBAPP_ZENDESK_KEY
      key: webapp.zendeskKey

shopify:
  keyBasePath: global.shopify
  config:
    - env: SHOPIFY_CLIENT_ID
      key: clientId
      sensitive: true
    
    - env: SHOPIFY_API_SECRET_KEY
      key: apiSecretKey
      sensitive: true

storage:
  keyBasePath: global.storage
  discriminatorField: type
  discriminatorFieldOpts: 
    - azure
    - gcs
    - minio
    - s3
  config: 
    - env: STORAGE_TYPE      
      key: type
      defaultValue: minio

    - env: STORAGE_BUCKET_ACTIVITY_PAYLOAD
      key: bucket.activityPayload
      defaultValue: airbyte-storage

    - env: STORAGE_BUCKET_AUDIT_LOGGING
      key: bucket.auditLogging
      defaultValue: airbyte-storage

    - env: STORAGE_BUCKET_LOG
      key: bucket.log
      defaultValue: airbyte-storage

    - env: STORAGE_BUCKET_STATE
      key: bucket.state
      defaultValue: airbyte-storage

    - env: STORAGE_BUCKET_WORKLOAD_OUTPUT
      key: bucket.workloadOutput
      defaultValue: airbyte-storage

    - env: AWS_DEFAULT_REGION
      key: s3.region
      discriminatorOpts: 
        - s3

    - env: AWS_AUTHENTICATION_TYPE
      key: s3.authenticationType
      defaultValue: credentials
      discriminatorOpts: 
        - s3

    - env: AWS_ACCESS_KEY_ID
      key: s3.accessKeyId
      discriminatorOpts:
        - s3
      sensitive: true

    - env: AWS_SECRET_ACCESS_KEY
      key: s3.secretAccessKey
      discriminatorOpts:
        - s3
      sensitive: true

    - env: AZURE_STORAGE_CONNECTION_STRING
      key: azure.connectionString
      discriminatorOpts: 
        - azure
      sensitive: true

    - env: GOOGLE_APPLICATION_CREDENTIALS_JSON
      key: gcs.credentialsJson
      discriminatorOpts: 
        - gcs
      sensitive: true

    - env: GOOGLE_APPLICATION_CREDENTIALS
      key: gcs.credentialsJsonPath
      discriminatorOpts: 
        - gcs
      defaultValue: "/secrets/gcp-creds/gcp.json"

    - env: AWS_ACCESS_KEY_ID
      key: minio.accessKeyId
      discriminatorOpts: 
        - minio
      sensitive: true
      defaultValue: minio

    - env: AWS_SECRET_ACCESS_KEY
      key: minio.secretAccessKey
      discriminatorOpts: 
        - minio
      sensitive: true
      defaultValue: minio123

    - env: MINIO_ENDPOINT
      key: minio.endpoint
      discriminatorOpts: 
        - minio
      defaultValueExp: (printf "http://airbyte-minio-svc.%s:9000" .Release.Namespace)

    - env: S3_PATH_STYLE_ACCESS
      key: minio.s3PathStyleAccess
      discriminatorOpts: 
        - minio
      defaultValue: true

temporal:
  keyBasePath: temporal
  config:
    - env: AUTO_SETUP
      key: autoSetup
      defaultValue: true

    - env: TEMPORAL_HOST
      key: host
      valueExp: ternary (include "airbyte.temporal.cloud.host" .) (printf "%s-temporal:%d" .Release.Name (int .Values.temporal.service.port)) (eq (include "airbyte.temporal.cloud.enabled" .) "true")

    - env: DYNAMIC_CONFIG_FILE_PATH
      key: configFilePath
      defaultValue: config/dynamicconfig/development.yaml

    - env: PROMETHEUS_ENDPOINT
      key: prometheus.endpoint
      defaultValue: 0.0.0.0:9090

temporal.cli:
  keyBasePath: global.temporal.cli
  secretNamePath: global.temporal.secretName
  config:
    - env: TEMPORAL_CLI_ADDRESS
      key: address

    - env: TEMPORAL_CLI_NAMESPACE
      key: namespace

    - env: TEMPORAL_CLI_TLS_CERT
      key: tlsCert
      sensitive: true

    - env: TEMPORAL_CLI_TLS_KEY
      key: tlsKey
      sensitive: true

temporal.cloud:
  keyBasePath: global.temporal.cloud
  secretNamePath: global.temporal.secretName
  config:
    - env: TEMPORAL_CLOUD_ENABLED
      key: enabled
      defaultValue: false

    - env: TEMPORAL_CLOUD_HOST
      key: host

    - env: TEMPORAL_CLOUD_NAMESPACE
      key: namespace

temporal.cloud.credentials:
  keyBasePath: global.temporal.cloud
  secretNamePath: global.temporal.secretName
  config:
    - env: TEMPORAL_CLOUD_CLIENT_CERT
      key: clientCert
      sensitive: true
      secretRef: airbyte.temporal.cloud.secretName

    - env: TEMPORAL_CLOUD_CLIENT_KEY
      key: clientKey
      sensitive: true
      secretRef: airbyte.temporal.cloud.secretName

temporal.cloud.billing:
  keyBasePath: global.temporal.cloud.billing
  secretNamePath: global.temporal.secretName
  config:
    - env: TEMPORAL_CLOUD_BILLING_HOST
      key: host

    - env: TEMPORAL_CLOUD_BILLING_NAMESPACE
      key: namespace

temporal.cloud.connectorRollout:
  keyBasePath: global.temporal.cloud.connectorRollout
  secretNamePath: global.temporal.secretName
  config:
    - env: TEMPORAL_CLOUD_HOST_CONNECTOR_ROLLOUT
      key: host

    - env: TEMPORAL_CLOUD_NAMESPACE_CONNECTOR_ROLLOUT
      key: namespace

temporal.database:
  keyBasePath: temporal.database
  config:
    - env: DB
      key: engine
      defaultValue: postgresql

    - env: POSTGRES_SEEDS
      key: host
      refKey: DATABASE_HOST

    - env: DB_PORT
      key: port
      refKey: DATABASE_PORT

    - env: POSTGRES_USER
      key: user
      refKey: DATABASE_USER
      sensitive: true
      secretRef: airbyte.database.secretName

    - env: POSTGRES_PWD
      key: password
      refKey: DATABASE_PASSWORD
      sensitive: true
      secretRef: airbyte.database.secretName

    - env: POSTGRES_TLS_ENABLED
      key: tlsEnabled
      valueExp: ternary "true" "false" (eq .Values.global.database.type "external")

    - env: POSTGRES_TLS_DISABLE_HOST_VERIFICATION
      key: tlsDisableHostVerification
      valueExp: ternary "true" "false" (eq .Values.global.database.type "external")

    - env: SQL_TLS_ENABLED
      key: sqlTlsEnabled
      valueExp: ternary "true" "false" (eq .Values.global.database.type "external")

    - env: SQL_TLS_DISABLE_HOST_VERIFICATION
      key: sqlTlsDisableHostVerification
      valueExp: ternary "true" "false" (eq .Values.global.database.type "external")

temporal.sdk:
  config:
    - env: TEMPORAL_SDK_RPC_TIMEOUT
      key: rpc.timeout
      defaultValue: 120s

    - env: TEMPORAL_SDK_RPC_LONG_POLL_TIMEOUT
      key: rpc.longPollTimeout
      defaultValue: 140s

    - env: TEMPORAL_SDK_RPC_QUERY_TIMEOUT
      key: rpc.queryTimeout
      defaultValue: 20s

temporal.worker:
  config:
    - env: TEMPORAL_WORKER_PORTS
      key: ports
      valueExp: join "," (seq 9000 9040) 

topology:
  keyBasePath: global.topology
  config:
    - env: NODE_SELECTOR_LABEL
      key: nodeSelectorLabel
      defaultValue: airbyte/node-pool

    - env: NODE_SELECTOR_LABEL_MAIN_NODE_POOL
      key: nodeSelectors.mainNodePool
      defaultValue: main

    - env: NODE_SELECTOR_LABEL_JOBS_NODE_POOL
      key: nodeSelectors.jobsNodePool
      defaultValue: jobs

    - env: NODE_SELECTOR_LABEL_QUICK_JOBS_NODE_POOL
      key: nodeSelectors.quickJobsNodePool
      defaultValue: quick-jobs

tracking:
  keyBasePath: global.tracking
  config:
    - env: TRACKING_ENABLED
      key: enabled
      defaultValue: true
    
    - env: TRACKING_STRATEGY
      key: strategy
      defaultValue: logging

    - env: SEGMENT_WRITE_KEY
      key: segment.writeKeySecretKey
      defaultValue: 7UDdp5K55CyiGgsauOr2pNNujGvmhaeu

webapp:
  config:
    - env: API_URL
      key: api.url
      value: /api/v1

    # NOTE: This must NOT include the scheme (http://)
    - env: CONNECTOR_BUILDER_API_HOST
      key: connectorBuilderServer.host
      valueExp: (printf "%s-airbyte-connector-builder-server-svc.%s:%d" .Release.Name .Release.Namespace (int .Values.connectorBuilderServer.service.port))

worker:
  config:
    - env: ACTIVITY_MAX_ATTEMPT
      key: activityMaxAttempt
      default: ""

    - env: ACTIVITY_INITIAL_DELAY_BETWEEN_ATTEMPTS_SECONDS
      key: activityInitialDelayBetweenAttemptsSeconds

    - env: ACTIVITY_MAX_DELAY_BETWEEN_ATTEMPTS_SECONDS
      key: activityMaxDelayBetweenAttemptsSeconds

    - env: CONFIG_ROOT
      key: configRoot
      defaultValue: /configs

    - env: DISCOVER_REFRESH_WINDOW_MINUTES
      key: discoverRefreshWindowMinutes

    - env: MAX_CHECK_WORKERS
      key: maxCheckWorkers
      defaultValue: 30

    - env: MAX_NOTIFY_WORKERS
      key: maxNotifyWorkers
      defaultValue: 30

    - env: MAX_SYNC_WORKERS
      key: maxSyncWorkers
      defaultValue: 5
      
    #- env: SHOULD_HANDLE_SYNC_CONTROL_PLANE_TASKS
    #  key: shouldHandleSyncControlPlaneTasks
    #  defaultValue: false

    #- env: SHOULD_RUN_CHECK_CONNECTION_WORKFLOWS
    #  key: shouldRunCheckConnectionWorkflows
    #  defaultValue: true

    #- env: SHOULD_RUN_CONNECTION_MANAGER_WORKFLOWS
    #  key: shouldRunConnectionManagerWorkflows
    #  defaultValue: true

    #- env: SHOULD_RUN_DISCOVER_WORKFLOWS
    #  key: shouldRunDiscoverWorkflows
    #  defaultValue: true

    #- env: SHOULD_RUN_GET_SPEC_WORKFLOWS
    #  key: shouldRunGetSpecWorkflows
    #  defaultValue: false

    #- env: SHOULD_RUN_NOTIFY_WORKFLOWS
    #  key: shouldRunNotifyWorkflows
    #  defaultValue: false

    #- env: SHOULD_RUN_SYNC_WORKFLOWS
    #  key: shouldRunSyncWorkflows
    #  defaultValue: true

    #- env: SKIP_DATABASE_AVAILABILITY_CHECKS
    #  key: skipDatabaseAvailabilityChecks
    #  defaultValue: true

    - env: SYNC_JOB_MAX_ATTEMPTS
      key: syncJobMaxAttempts
      defaultValue: 3

    - env: SYNC_JOB_MAX_TIMEOUT_DAYS
      key: syncJobMaxTimeoutDays
      defaultValue: 3

    - env: SYNC_JOB_INIT_RETRY_TIMEOUT_MINUTES
      key: syncJobInitRetryTimeoutMinutes
      defaultValue: 5

    - env: USE_CUSTOM_NODE_SELECTOR
      key: useCustomNodeSelector
      defaultValue: false

    - env: USE_STREAM_CAPABLE_STATE
      key: useStreamCapableState
      defaultValue: true

    - env: WORKFLOW_FAILURE_RESTART_DELAY_SECONDS
      key: workflowFailureRestartDelaySeconds

    - env: WORKSPACE_DOCKER_MOUNT
      key: workspaceDockerMount
      defaultValue: airbyte_workspace

    - env: WORKSPACE_ROOT
      key: workspaceRoot
      defaultValue: /workspace

    - env: WORKER_ENVIRONMENT
      key: environment
      value: kubernetes

workloadApiServer:
  config:
    - env: WORKLOAD_API_SERVER_ENABLED
      key: enabled
      defaultValue: true

    - env: WORKLOAD_API_HOST
      key: host
      valueExp: ternary (include "airbyte.common.airbyteUrl" .) (printf "http://%s-workload-api-server-svc.%s:%d" .Release.Name .Release.Namespace (int .Values.workloadApiServer.service.port)) (eq (include "airbyte.cluster.type" .) "data-plane")

    - env: WORKLOAD_API_BEARER_TOKEN
      key: bearerToken
      defaultValue: token
      sensitive: true

    - env: WORKLOAD_API_BEARER_TOKEN_SECRET_NAME
      key: bearerTokenSecretName
      defaultValueExp: (include "airbyte.workloadApiServer.secretName" .)

    - env: WORKLOAD_API_BEARER_TOKEN_SECRET_KEY
      key: bearerTokenSecretKey
      defaultValue: WORKLOAD_API_BEARER_TOKEN

workloadLauncher:
  config:
    - env: CONTROL_PLANE_TOKEN_ENDPOINT
      key: controlPlane.tokenEndpoint
      valueExp: (printf "%s/api/v1/dataplanes/token" (ternary (include "airbyte.common.airbyteUrl" .) (printf "http://%s-airbyte-server-svc.%s:%d" .Release.Name .Release.Namespace (int .Values.server.service.port)) (eq (include "airbyte.common.cluster.type" .) "data-plane")))

    - env: WORKLOAD_LAUNCHER_ENABLED
      key: enabled
      defaultValue: true

    - env: WORKLOAD_LAUNCHER_PARALLELISM
      key: parallelism
      defaultValue: 10

workloadLauncher.dataPlane:
  config:
    - env: DATAPLANE_CLIENT_ID
      key: clientId
      sensitive: true
      secretRefExp: (ternary (include "airbyte.auth.bootstrap.managedSecretName" .) (include "airbyte.workloadLauncher.dataPlane.secretName" .) (eq (include "airbyte.common.cluster.type" .) "hybrid"))
              
    - env: DATAPLANE_CLIENT_ID_SECRET_NAME
      key: clientIdSecretName
      defaultValueExp: (include "airbyte.auth.bootstrap.managedSecretName" .)

    - env: DATAPLANE_CLIENT_ID_SECRET_KEY
      key: clientIdSecretKey
      defaultValueExp: (include "airbyte.workloadLauncher.dataPlane.clientId.secretKey" .)

    - env: DATAPLANE_CLIENT_SECRET
      key: clientSecret
      sensitive: true
      secretRefExp: (ternary (include "airbyte.auth.bootstrap.managedSecretName" .) (include "airbyte.workloadLauncher.dataPlane.secretName" .) (eq (include "airbyte.common.cluster.type" .) "hybrid"))

    - env: DATAPLANE_CLIENT_SECRET_SECRET_NAME
      key: clientSecretSecretName
      defaultValueExp: (include "airbyte.auth.bootstrap.managedSecretName" .)

    - env: DATAPLANE_CLIENT_SECRET_SECRET_KEY
      key: clientSecretSecretKey
      defaultValueExp: (include "airbyte.workloadLauncher.dataPlane.clientSecret.secretKey" .)

workloadLauncher.images:
  keyBasePath: workloadLauncher
  config:
    - env: CONNECTOR_PROFILER_IMAGE
      key: connectorProfiler.image
      valueExp: include "imageUrl" (list .Values.workloadLauncher.connectorProfiler.image $)

    - env: CONNECTOR_SIDECAR_IMAGE
      key:  connectorSidecar.image
      valueExp: include "imageUrl" (list .Values.workloadLauncher.connectorSidecar.image $)

    - env: CONTAINER_ORCHESTRATOR_ENABLED
      key: containerOrchestrator.enabled

    - env: CONTAINER_ORCHESTRATOR_IMAGE
      key: containerOrchestrator.image
      valueExp: include "imageUrl" (list .Values.workloadLauncher.containerOrchestrator.image $)

    - env: WORKLOAD_INIT_IMAGE
      key: workloadInit.image
      valueExp: include "imageUrl" (list .Values.workloadLauncher.workloadInit.image $)

workloads:
  keyBasePath: global.workloads
  config:
    - env: CONTAINER_ORCHESTRATOR_SECRET_NAME
      key: containerOrchestrator.secretName
      defaultValueExp: .Values.global.secretName

    - env: CONTAINER_ORCHESTRATOR_DATA_PLANE_CREDS_SECRET_MOUNT_PATH
      key: containerOrchestrator.dataPlane.secretMountPath
      defaultValue: /secrets/dataplane-creds

    - env: CONTAINER_ORCHESTRATOR_DATA_PLANE_CREDS_SECRET_NAME
      key: containerOrchestrator.dataPlane.secretName

    - env: CONTAINER_ORCHESTRATOR_DATA_PLANE_CREDS_SECRET_KEY
      key: containerOrchestrator.dataPlane.secretKey
      defaultValue: sa.json

    - env: CONTAINER_ORCHESTRATOR_JAVA_OPTS
      key: containerOrchestrator.javaOpts
      defaultValue: -XX:+ExitOnOutOfMemoryError -XX:MaxRAMPercentage=75.0 -javaagent:/app/dd-java-agent.jar -Ddd.profiling.enabled=true -XX:FlightRecorderOptions=stackdepth=256 -Ddd.trace.sample.rate=0.5 -Ddd.trace.request_header.tags=User-Agent:http.useragent

    - env: CONTAINER_ORCHESTRATOR_SECRET_MOUNT_PATH
      key: containerOrchestrator.secretMountPath
      defaultValue: /secrets/gcp-creds

    - env: KUBERNETES_CLIENT_MAX_IDLE_CONNECTIONS
      key: kubernetesClientMaxIdleConnections
      defaultValue: 100

    - env: KUBERNETES_CLIENT_MAX_RETRIES
      key: kuberentesClientMaxRetries
      defaultValue: ""

    - env: PUB_SUB_ENABLED
      key: pubSub.enabled
      defaultValue: false

    - env: PUB_SUB_TOPIC_NAME
      key: pubSub.topicName
      defaultValue: ""

workloads.resources:
  keyBasePath: global.workloads.resources
  config:
    - env: CONNECTOR_SPECIFIC_RESOURCE_DEFAULTS_ENABLED
      key: useConnectorResourceDefaults
      defaultValue: true

    - env: JOB_MAIN_CONTAINER_CPU_LIMIT
      key: mainContainer.cpu.limit
      defaultValue: ""

    - env: JOB_MAIN_CONTAINER_CPU_REQUEST
      key: mainContainer.cpu.request
      defaultValue: ""

    - env: JOB_MAIN_CONTAINER_MEMORY_LIMIT
      key: mainContainer.memory.limit
      defaultValue: ""

    - env: JOB_MAIN_CONTAINER_MEMORY_REQUEST
      key: mainContainer.memory.request
      defaultValue: ""

    - env: CHECK_JOB_MAIN_CONTAINER_CPU_LIMIT
      key: check.cpu.limit
      defaultValue: ""

    - env: CHECK_JOB_MAIN_CONTAINER_CPU_REQUEST
      key: check.cpu.request
      defaultValue: ""

    - env: CHECK_JOB_MAIN_CONTAINER_MEMORY_LIMIT
      key: check.memory.limit
      defaultValue: ""

    - env: CHECK_JOB_MAIN_CONTAINER_MEMORY_REQUEST
      key: check.memory.request
      defaultValue: ""

    - env: DISCOVER_JOB_MAIN_CONTAINER_CPU_LIMIT
      key: discover.cpu.limit
      defaultValue: ""

    - env: DISCOVER_JOB_MAIN_CONTAINER_CPU_REQUEST
      key: discover.cpu.request
      defaultValue: ""

    - env: DISCOVER_JOB_MAIN_CONTAINER_MEMORY_LIMIT
      key: discover.memory.limit
      defaultValue: ""

    - env: DISCOVER_JOB_MAIN_CONTAINER_MEMORY_REQUEST
      key: discover.memory.request
      defaultValue: ""

    - env: FILE_TRANSFER_EPHEMERAL_STORAGE_LIMIT
      key: fileTransfer.storage.limit
      defaultValue: ""

    - env: FILE_TRANSFER_EPHEMERAL_STORAGE_REQUEST
      key: fileTransfer.storage.request
      defaultValue: ""

    - env: REPLICATION_ORCHESTRATOR_CPU_LIMIT
      key: replication.cpu.limit
      defaultValue: ""

    - env: REPLICATION_ORCHESTRATOR_CPU_REQUEST
      key: replication.cpu.request
      defaultValue: ""

    - env: REPLICATION_ORCHESTRATOR_MEMORY_LIMIT
      key: replication.memory.limit
      defaultValue: ""

    - env: REPLICATION_ORCHESTRATOR_MEMORY_REQUEST
      key: replication.memory.request
      defaultValue: ""

    - env: SIDECAR_MAIN_CONTAINER_CPU_LIMIT
      key: sidecar.cpu.limit
      defaultValue: ""

    - env: SIDECAR_MAIN_CONTAINER_CPU_REQUEST
      key: sidecar.cpu.request
      defaultValue: ""

    - env: SIDECAR_MAIN_CONTAINER_MEMORY_LIMIT
      key: sidecar.memory.limit
      defaultValue: ""

    - env: SIDECAR_MAIN_CONTAINER_MEMORY_REQUEST
      key: sidecar.memory.request
      defaultValue: ""

workloads.queues:
  keyBasePath: global.workloads.queues
  config:
    - env: DATA_CHECK_TASK_QUEUES
      key: check
      valueExp: join " " .Values.global.workloads.queues.check

    - env: DATA_DISCOVER_TASK_QUEUES
      key: discover
      valueExp: join " " .Values.global.workloads.queues.discover
      
    - env: DATA_SYNC_TASK_QUEUES
      key: sync
      valueExp: join " " .Values.global.workloads.queues.sync

