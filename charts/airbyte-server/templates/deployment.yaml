---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.names.fullname" . }}
  labels:
    {{- include "airbyte.labels" . | nindent 4 }}
    {{- if .Values.extraLabels }}
    {{ toYaml (mergeOverwrite .Values.extraLabels .Values.global.extraLabels) | nindent 4 }}
    {{- end }}
spec:
  minReadySeconds: 30
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "airbyte.selectorLabels" . | nindent 6 }}
      {{- if .Values.extraSelectorLabels }}
      {{ toYaml (mergeOverwrite .Values.extraSelectorLabels .Values.global.extraSelectorLabels) | nindent 6 }}
      {{- end }}
  strategy:
    type: {{ .Values.deploymentStrategyType }} # Needed due to volume claims
  template:
    metadata:
      labels:
        {{- include "airbyte.selectorLabels" . | nindent 8 }}
        {{- if .Values.extraSelectorLabels }}
        {{ toYaml (mergeOverwrite .Values.extraSelectorLabels .Values.global.extraSelectorLabels) | nindent 8 }}
        {{- end }}
        {{- if .Values.podLabels }}
          {{- include "common.tplvalues.render" (dict "value" .Values.podLabels "context" $) | nindent 8 }}
        {{- end }}
      {{- if .Values.podAnnotations }}
      annotations:
        {{- include "common.tplvalues.render" (dict "value" .Values.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ .Values.global.serviceAccountName }}
      {{- if .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- range .Values.global.imagePullSecrets }}
          {{- printf "- name: %s" .name | nindent 8 }}
        {{- end }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.extraInitContainers }}
      initContainers:
      {{- toYaml .Values.extraInitContainers | nindent 6 }}
      {{- end }}
      containers:
      - name: airbyte-server-container
        image: {{ printf "%s:%s" .Values.image.repository (include "server.imageTag" .) }}
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        env:
        {{- if .Values.debug.enabled }}
        - name: JAVA_TOOL_OPTIONS
          value: "-Xdebug -agentlib:jdwp=transport=dt_socket,address=0.0.0.0:{{ .Values.debug.remoteDebugPort }},server=y,suspend=n"
        {{- end}}
        {{- if or (eq .Values.global.edition "pro") (eq .Values.global.edition "enterprise") }}
        - name: API_AUTHORIZATION_ENABLED
          value: "true"
        {{- else if and (eq .Values.global.deploymentMode "oss") .Values.global.auth.enabled }}
        # Self-Managed Enterprise should always have API_AUTHORIZATION_ENABLED set to true, even
        # if global.auth.enabled is not set to true. This can be simplified in the future, once
        # globa.auth.enabled is changed to always default to true across all editions of Airbyte.
        - name: API_AUTHORIZATION_ENABLED
          value: "true"
        {{- end }}
        {{- if eq .Values.global.deploymentMode "oss"  }}
        {{- include "airbyte.logging.envs" . | nindent 8 }}
        - name: AIRBYTE_API_HOST
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: AIRBYTE_API_HOST
        - name: AIRBYTE_VERSION
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: AIRBYTE_VERSION
        - name: AIRBYTE_EDITION
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: AIRBYTE_EDITION
        - name: AIRBYTE_URL 
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.global.configMapName | default (printf "%s-airbyte-env" .Release.Name) }}
              key: AIRBYTE_URL
        - name: CONFIG_ROOT
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: CONFIG_ROOT
        - name: MICROMETER_METRICS_ENABLED
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: MICROMETER_METRICS_ENABLED
        - name: MICROMETER_METRICS_STATSD_FLAVOR
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: MICROMETER_METRICS_STATSD_FLAVOR
        - name: MICRONAUT_ENVIRONMENTS
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: SERVER_MICRONAUT_ENVIRONMENTS
        - name: SEGMENT_WRITE_KEY
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: SEGMENT_WRITE_KEY
        - name: STATSD_HOST
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: STATSD_HOST
        - name: STATSD_PORT
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: STATSD_PORT
        - name: TRACKING_STRATEGY
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: TRACKING_STRATEGY
        - name: WORKER_ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: WORKER_ENVIRONMENT
        - name: WORKSPACE_ROOT
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: WORKSPACE_ROOT
        - name: WEBAPP_URL
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: WEBAPP_URL
        - name: TEMPORAL_HOST
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: TEMPORAL_HOST
        - name: JOB_MAIN_CONTAINER_CPU_REQUEST
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: JOB_MAIN_CONTAINER_CPU_REQUEST
        - name: JOB_MAIN_CONTAINER_CPU_LIMIT
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: JOB_MAIN_CONTAINER_CPU_LIMIT
        - name: JOB_MAIN_CONTAINER_MEMORY_REQUEST
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: JOB_MAIN_CONTAINER_MEMORY_REQUEST
        - name: JOB_MAIN_CONTAINER_MEMORY_LIMIT
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: JOB_MAIN_CONTAINER_MEMORY_LIMIT
        - name: CONFIGS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: CONFIGS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION
        - name: JOBS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: JOBS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION
        - name: KEYCLOAK_INTERNAL_HOST
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: KEYCLOAK_INTERNAL_HOST
        {{- if or (eq .Values.global.edition "pro") (eq .Values.global.edition "enterprise") }}
        - name: KEYCLOAK_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.secretName | default (printf "%s-airbyte-secrets" .Release.Name) }}
              key: KEYCLOAK_ADMIN_USER
        - name: KEYCLOAK_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.secretName | default (printf "%s-airbyte-secrets" .Release.Name) }}
              key: KEYCLOAK_ADMIN_PASSWORD
        {{- end }}
        - name: CONNECTOR_BUILDER_SERVER_API_HOST
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: CONNECTOR_BUILDER_SERVER_API_HOST
        - name: AIRBYTE_API_AUTH_HEADER_NAME
          value: "X-Airbyte-Auth"
        - name: AIRBYTE_API_AUTH_HEADER_VALUE
          value: "Internal server"

        {{- if and (eq .Values.global.edition "community") .Values.global.auth.enabled }}
        # Values for Airbyte auth configurations, secrets, and credentials in Community edition
        - name: AB_INSTANCE_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.auth.secretName | default "airbyte-auth-secrets" | quote }}
              key: {{ .Values.global.auth.instanceAdmin.passwordSecretKey | default "instance-admin-password" | quote }}
        - name: AB_INSTANCE_ADMIN_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.auth.secretName | default "airbyte-auth-secrets" | quote }}
              key: {{ .Values.global.auth.instanceAdmin.clientIdSecretKey | default "instance-admin-client-id" | quote }}
        - name: AB_INSTANCE_ADMIN_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.auth.secretName | default "airbyte-auth-secrets" | quote }}
              key: {{ .Values.global.auth.instanceAdmin.clientSecretSecretKey | default "instance-admin-client-secret" | quote }}
        - name: AB_JWT_SIGNATURE_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.auth.secretName | default "airbyte-auth-secrets" | quote }}
              key: {{ .Values.global.auth.jwtSignatureSecretKey | default "jwt-signature-secret" | quote }}
        - name: AB_COOKIE_SECURE
          value: {{ .Values.global.auth.cookieSecureSetting | default "true" | quote }}
        - name: AB_COOKIE_SAME_SITE
          value: {{ .Values.global.auth.cookieSameSiteSetting | default "Strict" | quote }}
        {{- end }}

        # Secrets Manager
        - name: SECRET_PERSISTENCE
          value: {{ include "airbyte.secretPersistence" . }}
        # Values for AwsSecretsManager
        {{- if eq ((((.Values.global).secretsManager).awsSecretManager).authenticationType) "credentials" }}
        - name: AWS_SECRET_MANAGER_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: {{ include "airbyte.secretStoreName" .Values.global.secretsManager.secretsManagerSecretName }}
              key: {{ include "airbyte.awsSecretManagerAccessKeyIdSecretKey" .Values.global.secretsManager.awsSecretManager.accessKeyIdSecretKey }}
        - name: AWS_SECRET_MANAGER_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ include "airbyte.secretStoreName" .Values.global.secretsManager.secretsManagerSecretName }}
              key: {{ include "airbyte.awsSecretManagerSecretAccessKeySecretKey" .Values.global.secretsManager.awsSecretManager.secretAccessKeySecretKey }}
        {{- end }}
        {{- if ((((.Values.global).secretsManager).awsSecretManager).region) }}
        - name: AWS_SECRET_MANAGER_REGION
          value: {{ (((.Values.global).secretsManager).awsSecretManager).region }}
        {{- end }}
        {{- if ((((.Values.global).secretsManager).awsSecretManager).tags) }}
        - name: AWS_SECRET_MANAGER_SECRET_TAGS
          value: {{ include "airbyte.tagsToString" .Values.global.secretsManager.awsSecretManager.tags }}
        {{- end }}
        {{- if ((((.Values.global).secretsManager).awsSecretManager).kms) }}
        - name: AWS_KMS_KEY_ARN
          value: {{ ((((.Values.global).secretsManager).awsSecretManager).kms) | default "" }}
        {{- end }}

        # Values for Azure Key Vault
        {{- if (((.Values.global).secretsManager).azureKeyVault) }}

        - name: AB_AZURE_KEY_VAULT_VAULT_URL
          value: {{ (((.Values.global).secretsManager).azureKeyVault).vaultUrl }}

        - name: AB_AZURE_KEY_VAULT_TENANT_ID
          value: {{ (((.Values.global).secretsManager).azureKeyVault).tenantId }}

        - name: AB_AZURE_KEY_VAULT_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: {{ include "airbyte.secretStoreName" .Values.global.secretsManager.secretsManagerSecretName }}
              key: {{ include "airbyte.azureKeyVaultClientIdSecretKey" .Values.global.secretsManager.azureKeyVault.clientIdSecretKey }}
        - name: AB_AZURE_KEY_VAULT_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ include "airbyte.secretStoreName" .Values.global.secretsManager.secretsManagerSecretName }}
              key: {{ include "airbyte.azureKeyVaultClientSecretSecretKey" .Values.global.secretsManager.azureKeyVault.clientSecretSecretKey }}

        {{- end }}

        {{- if ((((.Values.global).secretsManager).azureKeyVault).tags) }}
        - name: AB_AZURE_KEY_VAULT_TAGS
          value: {{ include "airbyte.tagsToString" .Values.global.secretsManager.azureKeyVault.tags }}
        {{- end }}

        # Values for googleSecretManager secrets
        {{- if (((.Values.global).secretsManager).googleSecretManager) }}
        - name: SECRET_STORE_GCP_PROJECT_ID
          value: {{ .Values.global.secretsManager.googleSecretManager.projectId }}
        - name: SECRET_STORE_GCP_CREDENTIALS
          valueFrom:
            secretKeyRef:
              name: {{ include "airbyte.secretStoreName" .Values.global.secretsManager.secretsManagerSecretName }}
              key: {{ include "airbyte.googleSecretManagerCredentialsSecretKey" .Values.global.secretsManager.googleSecretManager.credentialsSecretKey }}
        {{- end }}

        # Values for vault secrets
        {{- if (((.Values.global).secretsManager).vault) }}
        - name: VAULT_ADDRESS
          value: {{ (((.Values.global).secretsManager).vault).address }}
        - name: VAULT_PREFIX
          value: {{ (((.Values.global).secretsManager).vault).prefix }}
        - name: VAULT_AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ include "airbyte.secretStoreName" .Values.global.secretsManager.secretsManagerSecretName }}
              key: {{ include "airbyte.vaultAuthTokenSecretKey" .Values.global.secretsManager.vault.authTokenSecretKey }}
        {{- end }}

        # Storage
        {{- include "airbyte.storage.envs" . | nindent 8 }}

        {{- include "airbyte.database.envs" . | nindent 8 }}
        {{- include "airbyte.enterprise.instanceAdmin" . | nindent 8 }} 
        {{- include "airbyte.enterprise.identityProvider" . | nindent 8 }} 
        {{- include "airbyte.enterprise.license" . | nindent 8 }}

        {{- end }}
        
        # Values from secret
        {{- if .Values.secrets }}
        {{- range $k, $v := .Values.secrets }}
        - name: {{ $k }}
          valueFrom:
            secretKeyRef:
              name: server-secrets
              key: {{ $k }}
        {{- end }}
        {{- end }}

        # Values from env
        {{- if or .Values.env_vars .Values.global.env_vars }}
        {{- range $k, $v := mergeOverwrite .Values.env_vars .Values.global.env_vars }}
        - name: {{ $k }}
          value: {{ $v | quote }}
        {{- end }}
        {{- end }}

        # Values from extraEnv for more compability(if you want to use external secret source or other stuff)
        {{- if .Values.extraEnv }}
        {{- toYaml .Values.extraEnv | nindent 8 }}
        {{- end }}

        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: /api/v1/health
            port: http
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        {{- end }}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            path: /api/v1/health
            port: http
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
        {{- end }}
        ports:
        - name: http
          containerPort: 8001
          protocol: TCP
        {{- if .Values.debug.enabled }}
        - name: debug
          containerPort: {{ .Values.debug.remoteDebugPort }}
          protocol: TCP
        {{- end}}
        {{- if .Values.resources }}
        resources: {{- toYaml .Values.resources | nindent 10 }}
        {{- end }}
        {{- if .Values.containerSecurityContext }}
        securityContext: {{- toYaml .Values.containerSecurityContext | nindent 10 }}
        {{- end }}
        volumeMounts:
      {{- if eq .Values.global.deploymentMode "oss" }}
        {{- if eq (lower (default "" .Values.global.storage.type)) "gcs" }}
        - name: gcs-log-creds-volume
          mountPath: /secrets/gcs-log-creds
          readOnly: true
        {{- end }}
        {{- if .Values.global.airbyteYml }}
        - name: airbyte-yml-volume
          mountPath: /app/configs/airbyte.yml
          subPath: fileContents
          readOnly: true
        {{- end }}
      {{- end }}

        {{- if .Values.extraVolumeMounts }}
          {{ toYaml .Values.extraVolumeMounts | nindent 8 }}
        {{- end }}
        {{- if .Values.global.extraVolumeMounts }}
          {{ toYaml .Values.global.extraVolumeMounts | nindent 8 }}
        {{- end }}
      {{- if .Values.extraContainers }}
        {{ toYaml .Values.extraContainers | nindent 6 }}
      {{- end }}
      {{- if .Values.global.extraContainers }}
        {{ toYaml .Values.global.extraContainers | nindent 6 }}
      {{- end }}
      securityContext: {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
    {{- if eq .Values.global.deploymentMode "oss" }}
      {{- if eq (lower (default "" .Values.global.storage.type)) "gcs" }}
      - name: gcs-log-creds-volume
        secret:
          secretName: {{ ternary (printf "%s-gcs-log-creds" ( .Release.Name )) .Values.global.storage.storageSecretName (not ((.Values.global.storage).storageSecretName)) }}
      {{- end }}

      {{- if .Values.global.airbyteYml }}
      - name: airbyte-yml-volume
        secret:
          secretName: {{ .Release.Name }}-airbyte-yml
      {{- end }}
    {{- end }}
      {{- if .Values.extraVolumes }}
{{ toYaml .Values.extraVolumes | nindent 6 }}
      {{- end }}
