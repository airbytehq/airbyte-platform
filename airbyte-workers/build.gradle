import groovy.json.JsonBuilder
import groovy.yaml.YamlSlurper

import java.util.zip.ZipFile

plugins {
    id "io.airbyte.gradle.jvm.app"
    id "io.airbyte.gradle.docker"
    id "io.airbyte.gradle.publish"
}

configurations {
    jdbc
    airbyteProtocol
}

configurations.all {
    // The quartz-scheduler brings in a really old version of hikari, we do not want to inherit this version.
    exclude group: "com.zaxxer", module: "HikariCP-java7"
    resolutionStrategy {
        // Ensure that the versions defined in deps.toml are used
        // instead of versions from transitive dependencies
        force libs.flyway.core, libs.jooq, libs.s3, libs.aws.java.sdk.s3, libs.sts, libs.aws.java.sdk.sts
    }
}

dependencies {
    annotationProcessor platform(libs.micronaut.bom)
    annotationProcessor libs.bundles.micronaut.annotation.processor

    compileOnly libs.lombok
    annotationProcessor libs.lombok
    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok

    implementation libs.spotbugs.annotations
    testRuntimeOnly libs.junit.jupiter.engine
    testImplementation libs.bundles.junit
    testImplementation libs.assertj.core
    testImplementation libs.junit.pioneer

    implementation platform(libs.micronaut.bom)
    implementation libs.google.cloud.storage
    implementation libs.bundles.micronaut
    implementation libs.micronaut.cache.caffeine
    implementation libs.jooq
    implementation libs.s3
    implementation libs.sts
    implementation libs.aws.java.sdk.s3
    implementation libs.aws.java.sdk.sts
    implementation 'com.google.auth:google-auth-library-oauth2-http:1.4.0'
    implementation 'com.auth0:java-jwt:3.19.2'
    implementation libs.kubernetes.client
    implementation libs.guava
    implementation(libs.temporal.sdk) {
        exclude module: 'guava'
    }
    implementation libs.apache.ant
    implementation libs.apache.commons.lang
    implementation libs.apache.commons.text
    implementation libs.quartz.scheduler
    implementation libs.micrometer.statsd
    implementation libs.bundles.datadog
    implementation libs.sentry.java

    implementation project(':airbyte-analytics')
    implementation project(':airbyte-api')
    implementation project(':airbyte-commons')
    implementation project(':airbyte-commons-converters')
    implementation project(':airbyte-commons-micronaut')
    implementation project(':airbyte-commons-protocol')
    implementation project(':airbyte-commons-temporal')
    implementation project(':airbyte-commons-worker')
    implementation project(':airbyte-commons-with-dependencies')
    implementation project(':airbyte-config:config-models')
    implementation project(':airbyte-config:config-persistence')
    implementation project(':airbyte-config:specs')
    implementation project(':airbyte-config:init')
    implementation project(':airbyte-db:jooq')
    implementation project(':airbyte-db:db-lib')
    implementation project(':airbyte-featureflag')
    implementation project(':airbyte-metrics:metrics-lib')
    implementation project(':airbyte-micronaut-temporal')
    implementation project(':airbyte-json-validation')
    implementation libs.airbyte.protocol
    implementation project(':airbyte-notification')
    implementation project(':airbyte-worker-models')

    runtimeOnly libs.javax.databind

    testAnnotationProcessor platform(libs.micronaut.bom)
    testAnnotationProcessor libs.bundles.micronaut.test.annotation.processor

    testImplementation libs.bundles.micronaut.test
    testImplementation libs.temporal.testing
    testImplementation libs.json.path
    testImplementation libs.mockito.inline
    testImplementation libs.postgresql
    testImplementation libs.platform.testcontainers
    testImplementation libs.platform.testcontainers.postgresql
    testImplementation project(':airbyte-test-utils')
    testImplementation 'org.bouncycastle:bcprov-jdk15on:1.66'
    testImplementation 'org.bouncycastle:bcpkix-jdk15on:1.66'
    testImplementation project(':airbyte-api')

    integrationTestAnnotationProcessor platform(libs.micronaut.bom)
    integrationTestAnnotationProcessor libs.bundles.micronaut.test.annotation.processor
    integrationTestImplementation libs.bundles.junit
    integrationTestImplementation libs.junit.pioneer
    integrationTestImplementation libs.bundles.micronaut.test

    airbyteProtocol(libs.airbyte.protocol) {
        transitive = false
    }
}

Properties env = new Properties()
rootProject.file('.env.dev').withInputStream { env.load(it) }

airbyte {
    application {
        mainClass = 'io.airbyte.workers.Application'
        defaultJvmArgs = ['-XX:+ExitOnOutOfMemoryError', '-XX:MaxRAMPercentage=75.0']
        localEnvVars = env + [
                "AIRBYTE_ROLE"          : System.getenv("AIRBYTE_ROLE") ?: "undefined",
                "AIRBYTE_VERSION"       : env.VERSION,
                'MICRONAUT_ENVIRONMENTS': 'control-plane'
        ] as Map<String, String>
    }
    docker {
        imageName = "worker"
    }
}

tasks.register("cloudStorageIntegrationTest", Test) {
    useJUnitPlatform {
        includeTags "cloud-storage"
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// Duplicated in :airbyte-container-orchestrator, eventually, this should be handled in :airbyte-protocol
def taskGenerateWellKnownTypes = tasks.register("generateWellKnownTypes") {
    inputs.files(configurations.airbyteProtocol) // declaring inputs
    def targetFile = project.file("build/airbyte/docker/WellKnownTypes.json")
    outputs.file(targetFile) // declaring outputs
    doLast {
        def wellKnownTypesYamlPath = 'airbyte_protocol/well_known_types.yaml'
        configurations.airbyteProtocol.getFiles().each {
            def zip = new ZipFile(it)
            def entry = zip.getEntry(wellKnownTypesYamlPath)

            def wellKnownTypesYaml = zip.getInputStream(entry).text
            def parsedYaml = new YamlSlurper().parseText(wellKnownTypesYaml)
            def wellKnownTypesJson = new JsonBuilder(parsedYaml).toPrettyString()
            targetFile.getParentFile().mkdirs()
            targetFile.text = wellKnownTypesJson
        }
    }
}

tasks.named("dockerBuildImage") {
    dependsOn taskGenerateWellKnownTypes
}
