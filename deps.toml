[versions]
airbyte-protocol = "0.11.0"
azure-kevault-secrets = "4.3.5"
azure-identity = "1.3.5"
azure-storage = "12.27.1"
bouncycastle = "1.70"
commons_io = "2.7"
connectors-testcontainers = "1.15.3"
datadog-version = "1.31.2"
docker-java = "3.2.8"
fasterxml_version = "2.17.2"
failsafe = "3.3.2"
flyway = "10.10.0"
glassfish_version = "2.31"
grpc_version = "1.62.2"
hikaricp = "5.0.1"
jax-rs = "3.1.0"
jna = "5.8.0"
jmh = "1.37"
jooq = "3.19.7"
junit-jupiter = "5.10.3"
keycloak = "25.0.2" # should be kept in sync with airbyte-keycloak/Dockerfile base image version
kotest = "5.9.1"
kotlin-logging = "5.1.0"
kubernetes-client = "6.12.1"
log4j = "2.23.1"
lombok = "1.18.34"
micronaut = "4.6.2"
micronaut-cache = "5.0.1"
micronaut-core = "4.6.5"
micronaut-data = "4.9.3"
micronaut-email = "2.6.0"
micronaut-jaxrs = "4.6.1"
micronaut-jdbc = "5.8.1"
micronaut-kotlin = "4.4.0"
micronaut-micrometer = "5.8.0"
micronaut-openapi = "6.12.3"
micronaut-security = "4.10.1"
micronaut-test = "4.5.0"
moshi = "1.15.0"
mockito = "5.8.0"
mockito-kotlin = "5.2.1"
netty-tcnative = "2.0.62.Final"
okhttp3 = "4.12.0"
platform-testcontainers = "1.19.4"
postgresql = "42.7.3"
reactor = "3.6.9"
segment = "2.1.1"
sentry = "6.14.0"
slf4j = "2.0.16"
swagger = "1.6.2"
temporal = "1.22.3"
v3-swagger = "2.2.21"

[libraries]
airbyte-protocol = { module = "io.airbyte.airbyte-protocol:protocol-models", version.ref = "airbyte-protocol" }
apache-ant = { module = "org.apache.ant:ant", version = "1.10.14" }
apache-commons = { module = "org.apache.commons:commons-compress", version = "1.26.1" }
apache-commons-cli = { module = "commons-cli:commons-cli", version = "1.4" }
apache-commons-collections = { module = "org.apache.commons:commons-collections4", version = "4.4" }
apache-commons-lang = { module = "org.apache.commons:commons-lang3", version = "3.11" }
apache-commons-text = { module = "org.apache.commons:commons-text", version = "1.10.0" }
apache-cxf-core = { module = "org.apache.cxf:cxf-core", version = "3.4.2" }
apache-mime4j-core = { module = "org.apache.james:apache-mime4j-core", version = "0.8.10" } # Transitive dependency of keycloak. Forced upgrade to 0.8.10 from 0.8.9
appender-log4j2 = { module = "com.therealvan:appender-log4j2", version = "5.3.2" }
assertj-core = { module = "org.assertj:assertj-core", version = "3.21.0" }
aws-java-sdk-s3 = { module = "com.amazonaws:aws-java-sdk-s3", version = "1.12.770" }
aws-java-sdk-sts = {module = "com.amazonaws:aws-java-sdk-sts", version = "1.12.770"}
aws-secretsmanager-caching-java = { module = "com.amazonaws.secretsmanager:aws-secretsmanager-caching-java", version = "1.0.2" }
azure-key-vault = { module = "com.azure:azure-security-keyvault-secrets", version.ref = "azure-kevault-secrets" }
azure-identity = { module = "com.azure:azure-identity", version.ref = "azure-identity" }
azure-storage = { module = "com.azure:azure-storage-blob", version.ref = "azure-storage" }
bouncycastle-bcprov = { module = "org.bouncycastle:bcprov-jdk15on", version.ref = "bouncycastle" }
bouncycastle-bcpkix = { module = "org.bouncycastle:bcpkix-jdk15on", version.ref = "bouncycastle" }
byte-buddy = { module = "net.bytebuddy:byte-buddy", version = "1.14.10" }
commons-io = { module = "commons-io:commons-io", version.ref = "commons_io" }
commons-cli = { module = "commons-cli:commons-cli", version = "1.4" }
connectors-testcontainers = { module = "org.testcontainers:testcontainers", version.ref = "connectors-testcontainers" }
connectors-testcontainers-postgresql = { module = "org.testcontainers:postgresql", version.ref = "connectors-testcontainers" }
cron-utils = { module = "com.cronutils:cron-utils", version = "9.2.1" }
datadog-statsd-client = { module = "com.datadoghq:java-dogstatsd-client", version = "4.0.0" }
datadog-trace-api = { module = "com.datadoghq:dd-trace-api", version.ref = "datadog-version" }
datadog-trace-ot = { module = "com.datadoghq:dd-trace-ot", version.ref = "datadog-version" }
docker-java = { module = "com.github.docker-java:docker-java", version.ref = "docker-java" }
docker-java-transport-httpclient5 = { module = "com.github.docker-java:docker-java-transport-httpclient5", version.ref = "docker.java" }
elasticsearch = { module = "org.elasticsearch:elasticsearch", version = "7.17.21" }
fasterxml = { module = "com.fasterxml.jackson:jackson-bom", version.ref = "fasterxml_version" }
failsafe = { module = "dev.failsafe:failsafe", version.ref = "failsafe" }
failsafe-okhttp = { module = "dev.failsafe:failsafe-okhttp", version.ref = "failsafe" }
findsecbugs-plugin = { module = "com.h3xstream.findsecbugs:findsecbugs-plugin", version = "1.12.0" }
firebase-admin = { module = "com.google.firebase:firebase-admin", version = "8.1.0" }
flyway-core = { module = "org.flywaydb:flyway-core", version.ref = "flyway" }
flyway-postgresql = { module = "org.flywaydb:flyway-database-postgresql", version.ref = "flyway" }
glassfish = { module = "org.glassfish.jersey:jackson-bom", version.ref = "glassfish_version" }
google-auth-library-oauth2-http = { module = "com.google.auth:google-auth-library-oauth2-http", version = "1.20.0" }
google-cloud-storage = { module = "com.google.cloud:google-cloud-storage", version = "2.40.0" }
google-cloud-storage-secretmanager = { module = "com.google.cloud:google-cloud-secretmanager", version = "2.0.5" }
google-cloud-pubsub = { module = "com.google.cloud:google-cloud-pubsub", version = "1.130.0" }
google-cloud-sqladmin = { module = "com.google.apis:google-api-services-sqladmin", version = "v1-rev20240317-2.0.0" }
google-cloud-api-client = { module = "com.google.api-client:google-api-client", version = "2.4.0" }
grpc-inprocess = { module = "io.grpc:grpc-inprocess", version.ref = "grpc_version" }
guava = { module = "com.google.guava:guava", version = "33.1.0-jre" }
gson = { module = "com.google.code.gson:gson", version = "2.10.1" }
hamcrest-all = { module = "org.hamcrest:hamcrest-all", version = "1.3" }
hikaricp = { module = "com.zaxxer:HikariCP", version.ref = "hikaricp" }
http-client = { module = "org.apache.httpcomponents:httpclient", version = "4.5.13" }
jackson-annotations = { module = "com.fasterxml.jackson.core:jackson-annotations", version.ref = "fasterxml_version" }
jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "fasterxml_version" }
jackson-dataformat = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml", version.ref = "fasterxml_version" }
jackson-datatype = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310", version.ref = "fasterxml_version" }
jackson-jdk-datatype = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jdk8", version.ref = "fasterxml_version" }
jackson-kotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "fasterxml_version" }
jakarta-annotation-api = { module = "jakarta.annotation:jakarta.annotation-api", version = "2.1.1" }
jakarta-persistence-api = { module = "jakarta.persistence:jakarta.persistence-api", version = "3.1.0" }
jakarta-transaction-api = { module = "jakarta.transaction:jakarta.transaction-api", version = "2.0.1" }
jakarta-validation-api = { module = "jakarta.validation:jakarta.validation-api", version = "3.0.2" }
jakarta-ws-rs-api = { module = "jakarta.ws.rs:jakarta.ws.rs-api", version.ref = "jax-rs" }
java-dogstatsd-client = { module = "com.datadoghq:java-dogstatsd-client", version = "4.1.0" }
java-jwt = { module = "com.auth0:java-jwt", version = "3.19.2" }
javax-databind = { module = "javax.xml.bind:jaxb-api", version = "2.4.0-b180830.0359" }
jersey-bom = { module = "org.glassfish.jersey:jersey-bom", version = "3.1.5" }
jcl-over-slf4j = { module = "org.slf4j:jcl-over-slf4j", version.ref = "slf4j" }
jmh-core = { module = "org.openjdk.jmh:jmh-core", version.ref = "jmh" }
jmh-annotations = { module = "org.openjdk.jmh:jmh-generator-annprocess", version.ref = "jmh" }
jna = { module = "net.java.dev.jna:jna", version.ref = "jna" }
jna-platform = { module = "net.java.dev.jna:jna-platform", version.ref = "jna" }
jooq = { module = "org.jooq:jooq", version.ref = "jooq" }
jooq-codegen = { module = "org.jooq:jooq-codegen", version.ref = "jooq" }
jooq-meta = { module = "org.jooq:jooq-meta", version.ref = "jooq" }
json-assert = { module = "org.skyscreamer:jsonassert", version = "1.5.1" }
json-path = { module = "com.jayway.jsonpath:json-path", version = "2.9.0" }
json-schema-validator = { module = "com.networknt:json-schema-validator", version = "1.4.0" }
json-simple = { module = "com.googlecode.json-simple:json-simple", version = "1.1.1" }
jsoup = { module = "org.jsoup:jsoup", version = "1.17.2" }
jul-to-slf4j = { module = "org.slf4j:jul-to-slf4j", version.ref = "slf4j" }
junit-jupiter-api = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "junit-jupiter" }
junit-jupiter-engine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "junit-jupiter" }
junit-jupiter-params = { module = "org.junit.jupiter:junit-jupiter-params", version.ref = "junit-jupiter" }
junit-jupiter-system-stubs = { module = "uk.org.webcompere:system-stubs-jupiter", version = "2.1.6" }
junit-pioneer = { module = "org.junit-pioneer:junit-pioneer", version = "1.7.1" }
keycloak-admin-client = { module = "org.keycloak:keycloak-admin-client", version.ref = "keycloak" }
keycloak-client-registration-api = { module = "org.keycloak:keycloak-client-registration-api", version.ref = "keycloak" }
kotest-assertions = { module = "io.kotest:kotest-assertions-core", version.ref = "kotest" }
kotlin-coroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version = "1.9.0" }
kotlin-logging = { module = "io.github.oshai:kotlin-logging-jvm", version.ref = "kotlin-logging" }
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version = "1.9.10" }
kotlin-test-runner-junit5 = { module = "io.kotlintest:kotlintest-runner-junit5", version = "3.4.2" }
kubernetes-client = { module = "io.fabric8:kubernetes-client", version.ref = "kubernetes-client" }
kubernetes-client-api = { module = "io.fabric8:kubernetes-client-api", version.ref = "kubernetes-client" }
kubernetes-httpclient-okhttp = { module = "io.fabric8:kubernetes-httpclient-okhttp", version.ref = "kubernetes-client" }
launchdarkly = { module = "com.launchdarkly:launchdarkly-java-server-sdk", version = "7.2.6" }
log4j-api = { module = "org.apache.logging.log4j:log4j-api", version.ref = "log4j" }
log4j-core = { module = "org.apache.logging.log4j:log4j-core", version.ref = "log4j" }
log4j-impl = { module = "org.apache.logging.log4j:log4j-slf4j-impl", version.ref = "log4j" }
log4j-over-slf4j = { module = "org.slf4j:log4j-over-slf4j", version.ref = "slf4j" }
log4j-slf4j2-impl = { module = "org.apache.logging.log4j:log4j-slf4j2-impl", version.ref = "log4j" }
log4j-web = { module = "org.apache.logging.log4j:log4j-web", version.ref = "log4j" }
lombok = { module = "org.projectlombok:lombok", version.ref = "lombok" }
micrometer-statsd = { module = "io.micrometer:micrometer-registry-statsd", version = "1.9.3" }
moshi-kotlin = { module = "com.squareup.moshi:moshi-kotlin", version.ref = "moshi" }
mockito-core = { module = "org.mockito:mockito-core", version.ref = "mockito" }
mockito-inline = { module = "org.mockito:mockito-inline", version = "5.2.0" }
mockito-kotlin = { module = "org.mockito.kotlin:mockito-kotlin", version.ref = "mockito-kotlin" }
mockito-junit-jupiter = { module = "org.mockito:mockito-junit-jupiter", version.ref = "mockito" }
mockk = { module = "io.mockk:mockk", version = "1.13.12" }
mockwebserver = { module = "com.squareup.okhttp3:mockwebserver", version.ref = "okhttp3" }
netty-tcnative = { module = "io.netty:netty-tcnative", version.ref = "netty-tcnative" }
netty-tcnative-boringssl-static = { module = "io.netty:netty-tcnative-boringssl-static", version.ref = "netty-tcnative" }
okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttp3" }
openapi-jackson-databind-nullable = { module = "org.openapitools:jackson-databind-nullable", version = "0.2.5" }
opentracing-util = { module = "io.opentracing:opentracing-util", version = "0.33.0" }
otel-bom = { module = "io.opentelemetry:opentelemetry-bom", version = "1.36.0" }
otel-bom-alpha = { module = "io.opentelemetry:opentelemetry-bom-alpha", version = "1.36.0-alpha" }
otel-ext-annotations = { module = "io.opentelemetry:opentelemetry-extension-annotations", version = "1.18.0" }
otel-sdk = { module = "io.opentelemetry:opentelemetry-sdk-metrics", version = "1.36.0" }
otel-sdk-testing = { module = "io.opentelemetry:opentelemetry-sdk-testing", version = "1.36.0" }
otel-semconv = { module = "io.opentelemetry:opentelemetry-semconv", version = "1.30.1-alpha" }
platform-testcontainers = { module = "org.testcontainers:testcontainers", version.ref = "platform-testcontainers" }
platform-testcontainers-postgresql = { module = "org.testcontainers:postgresql", version.ref = "platform-testcontainers" }
postgresql = { module = "org.postgresql:postgresql", version.ref = "postgresql" }
quartz-scheduler = { module = "org.quartz-scheduler:quartz", version = "2.3.2" }
reactor-core = { module = "io.projectreactor:reactor-core", version.ref = "reactor" }
reactor-kotlin-extensions = { module = "io.projectreactor.kotlin:reactor-kotlin-extensions", version = "1.2.2" }
reactor-test = { module = "io.projectreactor:reactor-test", version.ref = "reactor" }
s3 = { module = "software.amazon.awssdk:s3", version = "2.23.17" }
sts = { module = "software.amazon.awssdk:sts", version = "2.23.17" }
segment-java-analytics = { module = "com.segment.analytics.java:analytics", version.ref = "segment" }
semver4j = { module = "org.semver4j:semver4j", version = "5.3.0" }
sendgrid-java = { module = "com.sendgrid:sendgrid-java", version = "4.0.1" }
sentry-java = { module = "io.sentry:sentry", version.ref = "sentry" }
slf4j-api = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
slf4j-simple = { module = "org.slf4j:slf4j-simple", version.ref = "slf4j" }
slugify = { module = "com.github.slugify:slugify", version = "2.4" }
snakeyaml = { module = "org.yaml:snakeyaml", version = "2.2" }
spotbugs-annotations = { module = "com.github.spotbugs:spotbugs-annotations", version = "4.8.6" }
spring-core = { module = "org.springframework:spring-core", version = "6.1.6" }
stripe = { module = "com.stripe:stripe-java", version = "26.7.0" }
swagger-annotations = { module = "io.swagger:swagger-annotations", version.ref = "swagger" }
v3-swagger-annotations = { module = "io.swagger.core.v3:swagger-annotations", version.ref = "v3-swagger" }
temporal-sdk = { module = "io.temporal:temporal-sdk", version.ref = "temporal" }
temporal-opentracing = { module = "io.temporal:temporal-opentracing", version.ref = "temporal" }
temporal-serviceclient = { module = "io.temporal:temporal-serviceclient", version.ref = "temporal" }
temporal-testing = { module = "io.temporal:temporal-testing", version.ref = "temporal" }
testcontainers-vault = { module = "org.testcontainers:vault",  version = "1.18.3" }
vault-java-driver = { module = "com.bettercloud:vault-java-driver", version = "5.1.0" }

# Micronaut-related dependencies
h2-database = { module = "com.h2database:h2", version = "2.2.224" }
micronaut-cache-caffeine = { module = "io.micronaut.cache:micronaut-cache-caffeine", version.ref = "micronaut-cache" }
micronaut-cache-management = { module = "io.micronaut.cache:micronaut-cache-management", version.ref = "micronaut-cache" }
micronaut-data-connection = { module = "io.micronaut.data:micronaut-data-connection", version.ref = "micronaut-data" }
micronaut-data-processor = { module = "io.micronaut.data:micronaut-data-processor", version.ref = "micronaut-data" }
micronaut-data-jdbc = { module = "io.micronaut.data:micronaut-data-jdbc", version.ref = "micronaut-data" }
micronaut-data-model = { module = "io.micronaut.data:micronaut-data-model", version.ref = "micronaut-data" }
micronaut-data-tx = { module = "io.micronaut.data:micronaut-data-tx", version.ref = "micronaut-data" }
micronaut-email = { module = "io.micronaut.email:micronaut-email", version.ref = "micronaut-email" }
micronaut-email-sendgrid = { module = "io.micronaut.email:micronaut-email-sendgrid", version.ref = "micronaut-email" }
micronaut-flyway = { module = "io.micronaut.flyway:micronaut-flyway", version = "7.4.0" }
micronaut-inject = { module = "io.micronaut:micronaut-inject", version.ref = "micronaut-core" }
micronaut-http = { module = "io.micronaut:micronaut-http", version.ref = "micronaut-core" }
micronaut-http-client = { module = "io.micronaut:micronaut-http-client", version.ref = "micronaut-core" }
micronaut-http-server-netty = { module = "io.micronaut:micronaut-http-server-netty", version.ref = "micronaut-core" }
micronaut-http-validation = { module = "io.micronaut:micronaut-http-validation", version.ref = "micronaut-core" }
micronaut-inject-java = { module = "io.micronaut:micronaut-inject-java", version.ref = "micronaut-core" }
micronaut-inject-kotlin = { module = "io.micronaut:micronaut-inject-kotlin", version.ref = "micronaut-core" }
micronaut-jackson-databind = { module = "io.micronaut:micronaut-jackson-databind", version.ref = "micronaut-core" }
micronaut-jaxrs-processor = { module = "io.micronaut.jaxrs:micronaut-jaxrs-processor", version.ref = "micronaut-jaxrs" }
micronaut-jaxrs-server = { module = "io.micronaut.jaxrs:micronaut-jaxrs-server", version.ref = "micronaut-jaxrs" }
micronaut-jdbc = { module = "io.micronaut.sql:micronaut-jdbc", version.ref = "micronaut-jdbc" }
micronaut-jdbc-hikari = { module = "io.micronaut.sql:micronaut-jdbc-hikari", version.ref = "micronaut-jdbc" }
micronaut-jooq = { module = "io.micronaut.sql:micronaut-jooq", version.ref = "micronaut-jdbc" }
micronaut-kotlin-extension-functions = { module = "io.micronaut.kotlin:micronaut-kotlin-extension-functions", version.ref = "micronaut-kotlin" }
micronaut-kotlin-runtime = { module = "io.micronaut.kotlin:micronaut-kotlin-runtime", version.ref = "micronaut-kotlin" }
micronaut-management = { module = "io.micronaut:micronaut-management", version.ref = "micronaut-core" }
micronaut-micrometer-core = { module = "io.micronaut.micrometer:micronaut-micrometer-core", version.ref = "micronaut-micrometer" }
micronaut-micrometer-registry-datadog = { module = "io.micronaut.micrometer:micronaut-micrometer-registry-datadog", version.ref = "micronaut-micrometer" }
micronaut-micrometer-registry-statsd = { module = "io.micronaut.micrometer:micronaut-micrometer-registry-statsd", version.ref = "micronaut-micrometer" }
micronaut-openapi = { module = "io.micronaut.openapi:micronaut-openapi", version.ref = "micronaut-openapi" }
micronaut-openapi-annotations = { module = "io.micronaut.openapi:micronaut-openapi-annotations", version.ref = "micronaut-openapi" }
micronaut-platform = { module = "io.micronaut.platform:micronaut-platform", version.ref = "micronaut" }
micronaut-problem-json = { module = "io.micronaut.problem:micronaut-problem-json", version = "3.5.0" }
micronaut-redis-lettuce = { module = "io.micronaut.redis:micronaut-redis-lettuce", version = "6.6.0" }
micronaut-runtime = { module = "io.micronaut:micronaut-runtime", version.ref = "micronaut-core" }
micronaut-security = { module = "io.micronaut.security:micronaut-security", version.ref = "micronaut-security" }
micronaut-security-jwt = { module = "io.micronaut.security:micronaut-security-jwt", version.ref = "micronaut-security" }
micronaut-security-oauth2 = { module = "io.micronaut.security:micronaut-security-oauth2", version.ref = "micronaut-security" }
micronaut-test-core = { module = "io.micronaut.test:micronaut-test-core", version.ref = "micronaut-test" }
micronaut-test-junit5 = { module = "io.micronaut.test:micronaut-test-junit5", version.ref = "micronaut-test" }
micronaut-validation = { module = "io.micronaut.validation:micronaut-validation", version = "4.7.0" }

[bundles]
apache = ["apache-commons", "apache-commons-lang"]
bouncycastle = ["bouncycastle-bcprov", "bouncycastle-bcpkix"]
datadog = ["datadog-trace-api", "datadog-trace-ot"]
flyway = ["flyway-core", "flyway-postgresql"]
jackson = ["jackson-databind", "jackson-annotations", "jackson-dataformat", "jackson-datatype", "jackson-jdk-datatype", "jackson-kotlin"]
junit = ["junit-jupiter-api", "junit-jupiter-engine", "junit-jupiter-params", "mockito-junit-jupiter"]
keycloak-client = ["keycloak-admin-client", "keycloak-client-registration-api"]
kotest = ["kotest-assertions"]
kubernetes-client = ["kubernetes-client-api", "kubernetes-client"]
log4j = ["log4j-api", "log4j-core", "log4j-impl", "log4j-slf4j2-impl", "log4j-web", "appender-log4j2"]
micronaut = ["jakarta-annotation-api", "jakarta-transaction-api", "micronaut-http-server-netty", "micronaut-http-client", "micronaut-inject", "micronaut-validation", "micronaut-runtime", "micronaut-management", "micronaut-flyway", "micronaut-jdbc-hikari", "micronaut-jooq", "micronaut-jackson-databind"]
micronaut-light = ["jakarta-annotation-api", "micronaut-inject-java", "micronaut-runtime"]
micronaut-annotation = ["jakarta-annotation-api", "micronaut-inject-java", "micronaut-inject-kotlin"]
micronaut-annotation-processor = ["micronaut-inject-java", "micronaut-inject-kotlin", "micronaut-management", "micronaut-validation", "micronaut-data-processor", "micronaut-jaxrs-processor", "micronaut-http-validation"]
micronaut-cache = ["micronaut-cache-caffeine", "micronaut-cache-management"]
micronaut-data-jdbc = [ "micronaut-data-connection", "micronaut-data-jdbc", "micronaut-data-model", "micronaut-data-tx", "jakarta-persistence-api", "micronaut-jdbc-hikari"]
micronaut-email = ["micronaut-email", "micronaut-email-sendgrid"]
micronaut-kotlin = ["micronaut-kotlin-extension-functions", "micronaut-kotlin-runtime"]
micronaut-metrics = ["micronaut-management", "micronaut-micrometer-core", "micronaut-micrometer-registry-statsd"]
micronaut-test = ["micronaut-test-core", "micronaut-test-junit5", "h2-database"]
micronaut-test-annotation-processor = ["micronaut-inject-java", "micronaut-inject-kotlin"]
mockito-inline = ["mockito-inline", "byte-buddy"]
secret-hydration = ["google-cloud-storage", "google-cloud-storage-secretmanager", "aws-secretsmanager-caching-java", "vault-java-driver", "azure-key-vault", "azure-identity"]
slf4j = ["jul-to-slf4j", "jcl-over-slf4j", "log4j-over-slf4j"]
temporal = ["temporal-sdk", "temporal-serviceclient"]
temporal-telemetry = ["temporal-opentracing"]

[plugins]
node-gradle = { id = "com.github.node-gradle.node", version = "7.0.2" }
nu-studer-jooq = { id = "nu.studer.jooq", version = "9.0" }
de-undercouch-download = { id = "de.undercouch.download", version = "5.5.0" }
