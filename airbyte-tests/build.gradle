plugins {
    id "io.airbyte.gradle.jvm.lib"
}

// The java plugin automatically compiles/runs tests in the test source set (./src/test directory). Since we want acceptance tests to run
// only when explicitly requested, we put them in a separate source set, specify the sourceset's dependencies via configuration extensions below,
// and create a custom test task that can be invoked to run acceptance tests.
sourceSets {
    acceptanceTests {
        java {
            srcDir("src/acceptanceTests/java")
        }
        resources {
            srcDir("src/acceptanceTests/resources")
        }
    }
}

// Gradle links configurations with the name xImplementation or xRuntimeOnly etc.. to the source set named x. Therefore, any deps specified
// using the extensions below apply only to this sourceset and not any other code in the project.
configurations {
    acceptanceTestsImplementation.extendsFrom testImplementation
    acceptanceTestsRuntimeOnly.extendsFrom testRuntimeOnly
}

configurations.configureEach {
    // Temporary hack to avoid dependency conflicts
    exclude group: 'io.micronaut.email'
}

dependencies {
    implementation project(':airbyte-api')
    implementation project(':airbyte-container-orchestrator')

    implementation libs.bundles.kubernetes.client
    implementation libs.platform.testcontainers

    acceptanceTestsImplementation project(':airbyte-api')
    acceptanceTestsImplementation project(':airbyte-commons')
    acceptanceTestsImplementation project(':airbyte-commons-temporal')
    acceptanceTestsImplementation project(':airbyte-config:config-models')
    acceptanceTestsImplementation project(':airbyte-config:config-persistence')
    acceptanceTestsImplementation project(':airbyte-db:db-lib')
    acceptanceTestsImplementation project(':airbyte-tests')
    acceptanceTestsImplementation project(':airbyte-test-utils')
    acceptanceTestsImplementation project(':airbyte-commons-worker')

    acceptanceTestsImplementation 'com.fasterxml.jackson.core:jackson-databind'
    acceptanceTestsImplementation 'io.github.cdimascio:java-dotenv:3.0.0'
    acceptanceTestsImplementation libs.temporal.sdk
    acceptanceTestsImplementation 'org.apache.commons:commons-csv:1.4'
    acceptanceTestsImplementation libs.platform.testcontainers.postgresql
    acceptanceTestsImplementation libs.postgresql
    acceptanceTestsImplementation 'org.bouncycastle:bcprov-jdk15on:1.66'
    acceptanceTestsImplementation 'org.bouncycastle:bcpkix-jdk15on:1.66'

    testRuntimeOnly libs.junit.jupiter.engine
    testImplementation libs.bundles.junit
    testImplementation libs.assertj.core

    testImplementation libs.junit.pioneer
}

// test should run using the current version of the docker compose configuration.
def taskAcceptance = tasks.register("copyComposeFileForAcceptanceTests", Copy) {
    from "${rootDir}/docker-compose.yaml"
    into "${sourceSets.acceptanceTests.output.resourcesDir}"
}

tasks.named("assemble") {
    dependsOn(taskAcceptance)
}

tasks.named("checkstyleAcceptanceTests") {
    dependsOn(taskAcceptance)
}
tasks.named("pmdAcceptanceTests") {
    dependsOn(taskAcceptance)
}

tasks.register("acceptanceTests", Test) {
    testClassesDirs += sourceSets.acceptanceTests.output.classesDirs
    classpath += sourceSets.acceptanceTests.runtimeClasspath
    useJUnitPlatform()
    failFast = true
    testLogging() {
        events "passed", "failed"
        exceptionFormat "full"
    }
    mustRunAfter tasks.named("test")
    // Ensure they re-run since these are integration tests.
    outputs.upToDateWhen { false }
}

tasks.withType(Copy).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}
