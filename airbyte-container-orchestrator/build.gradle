import groovy.json.JsonBuilder
import groovy.yaml.YamlSlurper

import java.util.zip.ZipFile

plugins {
    id "io.airbyte.gradle.jvm.app"
    id "io.airbyte.gradle.docker"
    id "io.airbyte.gradle.publish"
}

configurations {
    airbyteProtocol
}

configurations.all {
    resolutionStrategy {
        // Ensure that the versions defined in deps.toml are used
        // instead of versions from transitive dependencies
        // Force to avoid updated version brought in transitively from Micronaut 3.8+
        // that is incompatible with our current Helm setup
        force libs.s3, libs.aws.java.sdk.s3
    }
}
dependencies {
    annotationProcessor platform(libs.micronaut.bom)
    annotationProcessor libs.bundles.micronaut.annotation.processor
    annotationProcessor libs.lombok

    implementation platform(libs.micronaut.bom)
    implementation libs.bundles.micronaut
    implementation libs.guava
    implementation libs.s3
    implementation libs.aws.java.sdk.s3
    implementation libs.kubernetes.client
    implementation libs.bundles.datadog
    implementation libs.bundles.log4j
    compileOnly libs.lombok

    implementation project(':airbyte-api')
    implementation project(':airbyte-commons')
    implementation project(':airbyte-config:config-models')
    implementation project(':airbyte-commons-converters')
    implementation project(':airbyte-commons-protocol')
    implementation project(':airbyte-commons-micronaut')
    implementation project(':airbyte-commons-temporal')
    implementation project(':airbyte-commons-with-dependencies')
    implementation project(':airbyte-commons-worker')
    implementation project(':airbyte-config:init')
    implementation project(':airbyte-featureflag')
    implementation project(':airbyte-json-validation')
    implementation libs.airbyte.protocol
    implementation project(':airbyte-metrics:metrics-lib')
    implementation project(':airbyte-worker-models')

    testAnnotationProcessor platform(libs.micronaut.bom)
    testAnnotationProcessor libs.bundles.micronaut.test.annotation.processor

    testImplementation libs.bundles.micronaut.test
    testImplementation libs.mockito.inline
    testImplementation libs.postgresql
    testImplementation libs.platform.testcontainers
    testImplementation libs.platform.testcontainers.postgresql
    testImplementation 'org.bouncycastle:bcprov-jdk15on:1.66'
    testImplementation 'org.bouncycastle:bcpkix-jdk15on:1.66'

    airbyteProtocol(libs.airbyte.protocol) {
        transitive = false
    }
}

airbyte {
    application {
        mainClass = "io.airbyte.container_orchestrator.Application"
        defaultJvmArgs = ['-XX:+ExitOnOutOfMemoryError', '-XX:MaxRAMPercentage=75.0']
    }
    docker {
        imageName = "container-orchestrator"
    }
}

// Duplicated from :airbyte-worker, eventually, this should be handled in :airbyte-protocol
def generateWellKnownTypes = tasks.register("generateWellKnownTypes") {
    inputs.files(configurations.airbyteProtocol) // declaring inputs
    def targetFile = project.file("build/airbyte/docker/WellKnownTypes.json")
    outputs.file(targetFile) // declaring outputs
    doLast {
        def wellKnownTypesYamlPath = 'airbyte_protocol/well_known_types.yaml'
        configurations.airbyteProtocol.getFiles().each {
            def zip = new ZipFile(it)
            def entry = zip.getEntry(wellKnownTypesYamlPath)

            def wellKnownTypesYaml = zip.getInputStream(entry).text
            def parsedYaml = new YamlSlurper().parseText(wellKnownTypesYaml)
            def wellKnownTypesJson = new JsonBuilder(parsedYaml).toPrettyString()
            targetFile.getParentFile().mkdirs()
            targetFile.text = wellKnownTypesJson
        }
    }
}

tasks.named("dockerBuildImage") {
    dependsOn generateWellKnownTypes
}
