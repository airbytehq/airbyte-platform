micronaut:
  server:
    port: -1

airbyte:
  deployment-mode: OSS
  role: ${AIRBYTE_ROLE:}
  version: 0.4128173.0
  acceptance:
    test:
      enabled: false
  config-dir: src/test/resources/files
  control:
    plane:
      auth-endpoint: ""
  data:
    plane:
      service-account:
        credentials-path: ""
        email: ""
  internal:
    api:
      auth-header:
        name: ""
        value: ""
      host: airbyte-server-svc:8001
  worker:
    isolated:
      kube:
        use-custom-node-selector: ${USE_CUSTOM_NODE_SELECTOR:false}
        node-selectors: ${JOB_ISOLATED_KUBE_NODE_SELECTORS:}
    job:
      kube:
        images:
          busybox: ${JOB_KUBE_BUSYBOX_IMAGE:`busybox:1.28`}
          curl: ${JOB_KUBE_CURL_IMAGE:`curlimages/curl:7.83.1`}
          socat: ${JOB_KUBE_SOCAT_IMAGE:`alpine/socat:1.7.4.3-r0`}
        main:
          container:
            image-pull-policy: ${JOB_KUBE_MAIN_CONTAINER_IMAGE_PULL_POLICY:IfNotPresent}
            image-pull-secret: ${JOB_KUBE_MAIN_CONTAINER_IMAGE_PULL_SECRET:}
        sidecar:
          container:
            image-pull-policy: ${JOB_KUBE_SIDECAR_CONTAINER_IMAGE_PULL_POLICY:IfNotPresent}
        tolerations: ${JOB_KUBE_TOLERATIONS:}
    kube-job-configs:
      default:
        annotations: ${JOB_KUBE_ANNOTATIONS:}
        node-selectors: ${JOB_KUBE_NODE_SELECTORS:}
        cpu-limit: ${JOB_MAIN_CONTAINER_CPU_LIMIT:1}
        cpu-request: ${JOB_MAIN_CONTAINER_CPU_REQUEST:}
        memory-limit: ${JOB_MAIN_CONTAINER_MEMORY_LIMIT:1Gi}
        memory-request: ${JOB_MAIN_CONTAINER_MEMORY_REQUEST:}
  cloud:
    storage:
      type: ${STORAGE_TYPE:GCS}
      bucket:
        log: ${STORAGE_BUCKET_LOG:log}
        state: ${STORAGE_BUCKET_STATE:state}
        workload-output: ${STORAGE_BUCKET_WORKLOAD_OUTPUT:workload-output}
        activity-payload: ${STORAGE_BUCKET_ACTIVITY_PAYLOAD:activity-payload}
      gcs:
        application-credentials: ${GOOGLE_APPLICATION_CREDENTIALS:not-blank}
      local:
        root: ${LOCAL_ROOT:}
      minio:
        access-key: ${AWS_ACCESS_KEY_ID:}
        endpoint: ${MINIO_ENDPOINT:}
        secret-access-key: ${AWS_SECRET_ACCESS_KEY:}
      s3:
        access-key: ${AWS_ACCESS_KEY_ID:}
        region: ${AWS_DEFAULT_REGION:}
        secret-access-key: ${AWS_SECRET_ACCESS_KEY:}
