plugins {
    id 'java-library'
}

// Add a configuration for our migrations tasks defined below to encapsulate their dependencies
configurations {
    migrations.extendsFrom implementation
}

configurations.all {
    exclude group: 'io.micronaut.flyway'
}

dependencies {
    api libs.hikaricp
    api libs.jooq.meta
    api libs.jooq
    api libs.postgresql

    implementation project(':airbyte-commons')
    implementation libs.airbyte.protocol
    implementation project(':airbyte-json-validation')
    implementation project(':airbyte-config:config-models')
    implementation libs.flyway.core

    migrations (libs.platform.testcontainers.postgresql) {
        // Force to avoid updated version brought in transitively from Micronaut
        force = true
    }
    migrations sourceSets.main.output

    // Mark as compile only to avoid leaking transitively to connectors
    compileOnly (libs.platform.testcontainers.postgresql) {
        // Force to avoid updated version brought in transitively from Micronaut
        force = true
    }

    // These are required because gradle might be using lower version of Jna from other
    // library transitive dependency. Can be removed if we can figure out which library is the cause.
    // Refer: https://github.com/testcontainers/testcontainers-java/issues/3834#issuecomment-825409079
    implementation 'net.java.dev.jna:jna:5.8.0'
    implementation 'net.java.dev.jna:jna-platform:5.8.0'

    testImplementation project(':airbyte-test-utils')
    testImplementation libs.apache.commons.lang
    testImplementation (libs.platform.testcontainers.postgresql) {
        // Force to avoid updated version brought in transitively from Micronaut
        force = true
    }
}

task(newConfigsMigration, dependsOn: 'classes', type: JavaExec) {
    mainClass = 'io.airbyte.db.instance.development.MigrationDevCenter'
    classpath = files(configurations.migrations.files)
    args 'configs', 'create'
}

task(runConfigsMigration, dependsOn: 'classes', type: JavaExec) {
    mainClass = 'io.airbyte.db.instance.development.MigrationDevCenter'
    classpath = files(configurations.migrations.files)
    args 'configs', 'migrate'
}

task(dumpConfigsSchema, dependsOn: 'classes', type: JavaExec) {
    mainClass = 'io.airbyte.db.instance.development.MigrationDevCenter'
    classpath = files(configurations.migrations.files)
    args 'configs', 'dump_schema'
}

task(newJobsMigration, dependsOn: 'classes', type: JavaExec) {
    mainClass = 'io.airbyte.db.instance.development.MigrationDevCenter'
    classpath = files(configurations.migrations.files)
    args 'jobs', 'create'
}

task(runJobsMigration, dependsOn: 'classes', type: JavaExec) {
    mainClass = 'io.airbyte.db.instance.development.MigrationDevCenter'
    classpath = files(configurations.migrations.files)
    args 'jobs', 'migrate'
}

task(dumpJobsSchema, dependsOn: 'classes', type: JavaExec) {
    mainClass = 'io.airbyte.db.instance.development.MigrationDevCenter'
    classpath = files(configurations.migrations.files)
    args 'jobs', 'dump_schema'
}

task copyInitSql(type: Copy) {
    dependsOn copyDocker

    from('src/main/resources') {
        include 'init.sql'
    }
    into 'build/docker/bin'
}

tasks.named("buildDockerImage") {
    dependsOn copyInitSql
}

Task publishArtifactsTask = getPublishArtifactsTask("$rootProject.ext.version", project)
