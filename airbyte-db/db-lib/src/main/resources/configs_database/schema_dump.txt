// The content of the file is just to have a basic idea of the current state of the database and is not fully accurate.
// It is also not used by any piece of code to generate anything.
// It doesn't contain the enums created in the database and the default values might also be buggy.

create table "public"."active_declarative_manifest" (
  "actor_definition_id" uuid not null,
  "version" bigint not null,
  "created_at" timestamp(6) with time zone not null default current_timestamp,
  "updated_at" timestamp(6) with time zone not null default current_timestamp,
  constraint "active_declarative_manifest_pkey"
    primary key ("actor_definition_id")
);
create table "public"."actor" (
  "id" uuid not null,
  "workspace_id" uuid not null,
  "actor_definition_id" uuid not null,
  "name" varchar(256) not null,
  "configuration" jsonb not null,
  "actor_type" "public"."actor_type" not null,
  "tombstone" boolean not null default false,
  "created_at" timestamp(6) with time zone not null default current_timestamp,
  "updated_at" timestamp(6) with time zone not null default current_timestamp,
  "default_version_id" uuid,
  constraint "actor_pkey"
    primary key ("id")
);
create table "public"."actor_catalog" (
  "id" uuid not null,
  "catalog" jsonb not null,
  "catalog_hash" varchar(32) not null,
  "created_at" timestamp(6) with time zone not null,
  "modified_at" timestamp(6) with time zone not null default current_timestamp,
  constraint "actor_catalog_pkey"
    primary key ("id")
);
create table "public"."actor_catalog_fetch_event" (
  "id" uuid not null,
  "actor_catalog_id" uuid not null,
  "actor_id" uuid not null,
  "config_hash" varchar(32) not null,
  "actor_version" varchar(256) not null,
  "created_at" timestamp(6) with time zone not null default current_timestamp,
  "modified_at" timestamp(6) with time zone not null default current_timestamp,
  constraint "actor_catalog_fetch_event_pkey"
    primary key ("id")
);
create table "public"."actor_definition" (
  "id" uuid not null,
  "name" varchar(256) not null,
  "icon" varchar(256),
  "actor_type" "public"."actor_type" not null,
  "source_type" "public"."source_type",
  "created_at" timestamp(6) with time zone not null default current_timestamp,
  "updated_at" timestamp(6) with time zone not null default current_timestamp,
  "tombstone" boolean not null default false,
  "resource_requirements" jsonb,
  "public" boolean not null default false,
  "custom" boolean not null default false,
  "max_seconds_between_messages" int,
  "default_version_id" uuid,
  constraint "actor_definition_pkey"
    primary key ("id")
);
create table "public"."actor_definition_breaking_change" (
  "actor_definition_id" uuid not null,
  "version" varchar(256) not null,
  "migration_documentation_url" varchar(256) not null,
  "upgrade_deadline" date not null,
  "message" varchar(256) not null,
  "created_at" timestamp(6) with time zone not null default current_timestamp,
  "updated_at" timestamp(6) with time zone not null default current_timestamp,
  constraint "actor_definition_breaking_change_pkey"
    primary key ("actor_definition_id", "version")
);
create table "public"."actor_definition_config_injection" (
  "json_to_inject" jsonb not null,
  "injection_path" varchar(2147483647) not null,
  "actor_definition_id" uuid not null,
  "created_at" timestamp(6) with time zone not null default current_timestamp,
  "updated_at" timestamp(6) with time zone not null default current_timestamp,
  constraint "actor_definition_config_injection_pkey"
    primary key ("actor_definition_id", "injection_path")
);
create table "public"."actor_definition_version" (
  "id" uuid not null,
  "actor_definition_id" uuid not null,
  "created_at" timestamp(6) with time zone not null default current_timestamp,
  "updated_at" timestamp(6) with time zone not null default current_timestamp,
  "documentation_url" varchar(256),
  "docker_repository" varchar(256) not null,
  "docker_image_tag" varchar(256) not null,
  "spec" jsonb not null,
  "protocol_version" varchar(256),
  "release_date" date,
  "normalization_repository" varchar(256),
  "normalization_tag" varchar(256),
  "supports_dbt" boolean,
  "normalization_integration_type" varchar(256),
  "allowed_hosts" jsonb,
  "suggested_streams" jsonb,
  "release_stage" "public"."release_stage",
  constraint "actor_definition_version_pkey"
    primary key ("id")
);
create table "public"."actor_definition_workspace_grant" (
  "actor_definition_id" uuid not null,
  "workspace_id" uuid,
  "scope_id" uuid,
  "scope_type" "public"."scope_type" not null default cast('workspace' as scope_type),
  constraint "actor_definition_workspace_gr_actor_definition_id_scope_id__key"
    unique ("actor_definition_id", "scope_id", "scope_type")
);
create table "public"."actor_oauth_parameter" (
  "id" uuid not null,
  "workspace_id" uuid,
  "actor_definition_id" uuid not null,
  "configuration" jsonb not null,
  "actor_type" "public"."actor_type" not null,
  "created_at" timestamp(6) with time zone not null default current_timestamp,
  "updated_at" timestamp(6) with time zone not null default current_timestamp,
  constraint "actor_oauth_parameter_pkey"
    primary key ("id")
);
create table "public"."airbyte_configs_migrations" (
  "installed_rank" int not null,
  "version" varchar(50),
  "description" varchar(200) not null,
  "type" varchar(20) not null,
  "script" varchar(1000) not null,
  "checksum" int,
  "installed_by" varchar(100) not null,
  "installed_on" timestamp(6) not null default current_timestamp,
  "execution_time" int not null,
  "success" boolean not null,
  constraint "airbyte_configs_migrations_pk"
    primary key ("installed_rank")
);
create table "public"."connection" (
  "id" uuid not null,
  "namespace_definition" "public"."namespace_definition_type" not null,
  "namespace_format" varchar(256),
  "prefix" varchar(256),
  "source_id" uuid not null,
  "destination_id" uuid not null,
  "name" varchar(256) not null,
  "catalog" jsonb not null,
  "status" "public"."status_type",
  "schedule" jsonb,
  "manual" boolean not null,
  "resource_requirements" jsonb,
  "created_at" timestamp(6) with time zone not null default current_timestamp,
  "updated_at" timestamp(6) with time zone not null default current_timestamp,
  "source_catalog_id" uuid,
  "schedule_type" "public"."schedule_type",
  "schedule_data" jsonb,
  "geography" "public"."geography_type" not null default cast('AUTO' as geography_type),
  "non_breaking_change_preference" varchar(7) not null default cast('ignore' as varchar),
  "breaking_change" boolean not null default false,
  "field_selection_data" jsonb,
  constraint "connection_pkey"
    primary key ("id")
);
create table "public"."connection_operation" (
  "id" uuid not null,
  "connection_id" uuid not null,
  "operation_id" uuid not null,
  "created_at" timestamp(6) with time zone not null default current_timestamp,
  "updated_at" timestamp(6) with time zone not null default current_timestamp,
  constraint "connection_operation_pkey"
    primary key ("id", "connection_id", "operation_id")
);
create table "public"."connector_builder_project" (
  "id" uuid not null,
  "workspace_id" uuid not null,
  "name" varchar(256) not null,
  "manifest_draft" jsonb,
  "actor_definition_id" uuid,
  "tombstone" boolean not null default false,
  "created_at" timestamp(6) with time zone not null default current_timestamp,
  "updated_at" timestamp(6) with time zone not null default current_timestamp,
  constraint "connector_builder_project_pkey"
    primary key ("id")
);
create table "public"."declarative_manifest" (
  "actor_definition_id" uuid not null,
  "description" varchar(256) not null,
  "manifest" jsonb not null,
  "spec" jsonb not null,
  "version" bigint not null,
  "created_at" timestamp(6) with time zone not null default current_timestamp,
  constraint "declarative_manifest_pkey"
    primary key ("actor_definition_id", "version")
);
create table "public"."notification_configuration" (
  "id" uuid not null,
  "enabled" boolean not null,
  "notification_type" "public"."notification_type" not null,
  "connection_id" uuid not null,
  "created_at" timestamp(6) with time zone not null default current_timestamp,
  "updated_at" timestamp(6) with time zone not null default current_timestamp,
  constraint "notification_configuration_pkey"
    primary key ("id")
);
create table "public"."operation" (
  "id" uuid not null,
  "workspace_id" uuid not null,
  "name" varchar(256) not null,
  "operator_type" "public"."operator_type" not null,
  "operator_normalization" jsonb,
  "operator_dbt" jsonb,
  "tombstone" boolean not null default false,
  "created_at" timestamp(6) with time zone not null default current_timestamp,
  "updated_at" timestamp(6) with time zone not null default current_timestamp,
  "operator_webhook" jsonb,
  constraint "operation_pkey"
    primary key ("id")
);
create table "public"."organization" (
  "id" uuid not null,
  "name" varchar(256) not null,
  "user_id" uuid,
  "email" varchar(256) not null,
  "created_at" timestamp(6) with time zone not null default current_timestamp,
  "updated_at" timestamp(6) with time zone not null default current_timestamp,
  constraint "organization_pkey"
    primary key ("id")
);
create table "public"."permission" (
  "id" uuid not null,
  "user_id" uuid not null,
  "workspace_id" uuid,
  "permission_type" "public"."permission_type" not null,
  "created_at" timestamp(6) with time zone not null default current_timestamp,
  "updated_at" timestamp(6) with time zone not null default current_timestamp,
  constraint "permission_pkey"
    primary key ("id")
);
create table "public"."schema_management" (
  "id" uuid not null,
  "connection_id" uuid not null,
  "created_at" timestamp(6) with time zone not null default current_timestamp,
  "updated_at" timestamp(6) with time zone not null default current_timestamp,
  "auto_propagation_status" "public"."auto_propagation_status" not null default cast('ignore' as auto_propagation_status),
  constraint "schema_management_pkey"
    primary key ("id")
);
create table "public"."state" (
  "id" uuid not null,
  "connection_id" uuid not null,
  "state" jsonb,
  "created_at" timestamp(6) with time zone not null default current_timestamp,
  "updated_at" timestamp(6) with time zone not null default current_timestamp,
  "stream_name" text,
  "namespace" text,
  "type" "public"."state_type" not null default cast('LEGACY' as state_type),
  constraint "state_pkey"
    primary key ("id", "connection_id"),
  constraint "state__connection_id__stream_name__namespace__uq"
    unique ("connection_id", "stream_name", "namespace")
);
create table "public"."stream_reset" (
  "id" uuid not null,
  "connection_id" uuid not null,
  "stream_namespace" text,
  "stream_name" text not null,
  "created_at" timestamp(6) with time zone not null default current_timestamp,
  "updated_at" timestamp(6) with time zone not null default current_timestamp,
  constraint "stream_reset_connection_id_stream_name_stream_namespace_key"
    unique ("connection_id", "stream_name", "stream_namespace")
);
create table "public"."user" (
  "id" uuid not null,
  "name" varchar(256) not null,
  "auth_user_id" varchar(256) not null,
  "auth_provider" "public"."auth_provider" not null,
  "default_workspace_id" uuid,
  "status" "public"."status",
  "company_name" varchar(256),
  "email" varchar(256) not null,
  "news" boolean,
  "ui_metadata" jsonb,
  "created_at" timestamp(6) with time zone not null default current_timestamp,
  "updated_at" timestamp(6) with time zone not null default current_timestamp,
  constraint "user_pkey"
    primary key ("id")
);
create table "public"."workspace" (
  "id" uuid not null,
  "customer_id" uuid,
  "name" varchar(256) not null,
  "slug" varchar(256) not null,
  "email" varchar(256),
  "initial_setup_complete" boolean not null,
  "anonymous_data_collection" boolean,
  "send_newsletter" boolean,
  "send_security_updates" boolean,
  "display_setup_wizard" boolean,
  "tombstone" boolean not null default false,
  "notifications" jsonb,
  "first_sync_complete" boolean,
  "feedback_complete" boolean,
  "created_at" timestamp(6) with time zone not null default current_timestamp,
  "updated_at" timestamp(6) with time zone not null default current_timestamp,
  "geography" geography_type not null default cast('AUTO' as geography_type),
  "webhook_operation_configs" jsonb,
  "notification_settings" jsonb,
  "organization_id" uuid,
  constraint "workspace_pkey"
    primary key ("id")
);
create table "public"."workspace_service_account" (
  "workspace_id" uuid not null,
  "service_account_id" varchar(31) not null,
  "service_account_email" varchar(256) not null,
  "json_credential" jsonb not null,
  "hmac_key" jsonb not null,
  "created_at" timestamp(6) with time zone not null default current_timestamp,
  "updated_at" timestamp(6) with time zone not null default current_timestamp,
  constraint "workspace_service_account_pkey"
    primary key ("workspace_id", "service_account_id")
);
alter table "public"."active_declarative_manifest"
  add constraint "active_declarative_manifest_actor_definition_id_version_fkey"
    foreign key ("actor_definition_id", "version")
    references "public"."declarative_manifest" ("actor_definition_id", "version");
alter table "public"."actor"
  add constraint "actor_actor_definition_id_fkey"
    foreign key ("actor_definition_id")
    references "public"."actor_definition" ("id");
alter table "public"."actor"
  add constraint "actor_default_version_id_fkey"
    foreign key ("default_version_id")
    references "public"."actor_definition_version" ("id");
alter table "public"."actor"
  add constraint "actor_workspace_id_fkey"
    foreign key ("workspace_id")
    references "public"."workspace" ("id");
alter table "public"."actor_catalog_fetch_event"
  add constraint "actor_catalog_fetch_event_actor_catalog_id_fkey"
    foreign key ("actor_catalog_id")
    references "public"."actor_catalog" ("id");
alter table "public"."actor_catalog_fetch_event"
  add constraint "actor_catalog_fetch_event_actor_id_fkey"
    foreign key ("actor_id")
    references "public"."actor" ("id");
alter table "public"."actor_definition"
  add constraint "actor_definition_default_version_id_fkey"
    foreign key ("default_version_id")
    references "public"."actor_definition_version" ("id");
alter table "public"."actor_definition_breaking_change"
  add constraint "actor_definition_breaking_change_actor_definition_id_fkey"
    foreign key ("actor_definition_id")
    references "public"."actor_definition" ("id");
alter table "public"."actor_definition_config_injection"
  add constraint "actor_definition_config_injection_actor_definition_id_fkey"
    foreign key ("actor_definition_id")
    references "public"."actor_definition" ("id");
alter table "public"."actor_definition_version"
  add constraint "actor_definition_version_actor_definition_id_fkey"
    foreign key ("actor_definition_id")
    references "public"."actor_definition" ("id");
alter table "public"."actor_definition_workspace_grant"
  add constraint "actor_definition_workspace_grant_actor_definition_id_fkey"
    foreign key ("actor_definition_id")
    references "public"."actor_definition" ("id");
alter table "public"."connection"
  add constraint "connection_actor_catalog_id_fk"
    foreign key ("source_catalog_id")
    references "public"."actor_catalog" ("id");
alter table "public"."connection"
  add constraint "connection_destination_id_fkey"
    foreign key ("destination_id")
    references "public"."actor" ("id");
alter table "public"."connection"
  add constraint "connection_source_id_fkey"
    foreign key ("source_id")
    references "public"."actor" ("id");
alter table "public"."connection_operation"
  add constraint "connection_operation_connection_id_fkey"
    foreign key ("connection_id")
    references "public"."connection" ("id");
alter table "public"."connection_operation"
  add constraint "connection_operation_operation_id_fkey"
    foreign key ("operation_id")
    references "public"."operation" ("id");
alter table "public"."notification_configuration"
  add constraint "notification_configuration_connection_id_fkey"
    foreign key ("connection_id")
    references "public"."connection" ("id");
alter table "public"."operation"
  add constraint "operation_workspace_id_fkey"
    foreign key ("workspace_id")
    references "public"."workspace" ("id");
alter table "public"."permission"
  add constraint "permission_user_id_fkey"
    foreign key ("user_id")
    references "public"."user" ("id");
alter table "public"."permission"
  add constraint "permission_workspace_id_fkey"
    foreign key ("workspace_id")
    references "public"."workspace" ("id");
alter table "public"."schema_management"
  add constraint "schema_management_connection_id_fkey"
    foreign key ("connection_id")
    references "public"."connection" ("id");
alter table "public"."state"
  add constraint "state_connection_id_fkey"
    foreign key ("connection_id")
    references "public"."connection" ("id");
alter table "public"."user"
  add constraint "user_default_workspace_id_fkey"
    foreign key ("default_workspace_id")
    references "public"."workspace" ("id");
alter table "public"."workspace"
  add constraint "workspace_organization_id_fkey"
    foreign key ("organization_id")
    references "public"."organization" ("id");
alter table "public"."workspace_service_account"
  add constraint "workspace_service_account_workspace_id_fkey"
    foreign key ("workspace_id")
    references "public"."workspace" ("id");
comment on column "public"."actor_definition"."max_seconds_between_messages" is 'Define the number of seconds allowed between 2 messages emitted by the connector before timing out';
create index "actor_actor_definition_id_idx" on "public"."actor"("actor_definition_id" asc);
create index "actor_workspace_id_idx" on "public"."actor"("workspace_id" asc);
create index "actor_catalog_catalog_hash_id_idx" on "public"."actor_catalog"("catalog_hash" asc);
create index "actor_catalog_fetch_event_actor_catalog_id_idx" on "public"."actor_catalog_fetch_event"("actor_catalog_id" asc);
create index "actor_catalog_fetch_event_actor_id_idx" on "public"."actor_catalog_fetch_event"("actor_id" asc);
create index "actor_definition_version_definition_image_tag_idx" on "public"."actor_definition_version"("actor_definition_id" asc, "docker_image_tag" asc);
create index "actor_oauth_parameter_workspace_definition_idx" on "public"."actor_oauth_parameter"("workspace_id" asc, "actor_definition_id" asc);
create index "airbyte_configs_migrations_s_idx" on "public"."airbyte_configs_migrations"("success" asc);
create index "connection_destination_id_idx" on "public"."connection"("destination_id" asc);
create index "connection_source_id_idx" on "public"."connection"("source_id" asc);
create index "connection_status_idx" on "public"."connection"("status" asc);
create index "connection_operation_connection_id_idx" on "public"."connection_operation"("connection_id" asc);
create index "connector_builder_project_workspace_idx" on "public"."connector_builder_project"("workspace_id" asc);
create index "permission_user_id_idx" on "public"."permission"("user_id" asc);
create index "permission_workspace_id_idx" on "public"."permission"("workspace_id" asc);
create index "connection_idx" on "public"."schema_management"("connection_id" asc);
create index "connection_id_stream_name_namespace_idx" on "public"."stream_reset"("connection_id" asc, "stream_name" asc, "stream_namespace" asc);
create index "user_auth_provider_auth_user_id_idx" on "public"."user"("auth_provider" asc, "auth_user_id" asc);
create index "user_email_idx" on "public"."user"("email" asc);
