openapi: 3.0.1
info:
  title: WorkloadApi
  description: API managing the workload
  version: 1.0.0
servers:
- url: http://localhost:8007/api
paths:
  /api/v1/workload/cancel:
    put:
      tags:
      - workload
      summary: Cancel the execution of a workload
      operationId: workloadCancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkloadCancelRequest"
        required: true
      responses:
        "204":
          description: Success
        "404":
          description: Workload with given id was not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KnownExceptionInfo"
        "410":
          description: "Workload is in terminal state, it cannot be cancelled."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KnownExceptionInfo"
  /api/v1/workload/claim:
    put:
      tags:
      - workload
      summary: Claim the execution of a workload
      operationId: workloadClaim
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkloadClaimRequest"
        required: true
      responses:
        "200":
          description: "Returns a boolean denoting whether claim was successful. True\
            \ if claim was successful, False if workload has already been claimed."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClaimResponse"
        "404":
          description: Workload with given id was not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KnownExceptionInfo"
        "410":
          description: Workload is in terminal state. It cannot be claimed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KnownExceptionInfo"
  /api/v1/workload/create:
    post:
      tags:
      - workload
      summary: Create a workload
      operationId: workloadCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkloadCreateRequest"
        required: true
      responses:
        "204":
          description: Successfully created workload
          content:
            application/json:
              schema:
                type: object
        "200":
          description: Workload with given workload id already exists.
  /api/v1/workload/expired_deadline_list:
    post:
      tags:
      - workload
      summary: Get workloads according to the filters.
      operationId: workloadListWithExpiredDeadline
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExpiredDeadlineWorkloadListRequest"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkloadListResponse"
  /api/v1/workload/failure:
    put:
      tags:
      - workload
      summary: Sets workload status to 'failure'.
      operationId: workloadFailure
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkloadFailureRequest"
        required: true
      responses:
        "204":
          description: Success
        "404":
          description: Workload with given id was not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KnownExceptionInfo"
        "410":
          description: "Workload is not in an active state, it cannot be failed."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KnownExceptionInfo"
  /api/v1/workload/heartbeat:
    put:
      tags:
      - workload
      summary: Heartbeat from a workload
      operationId: workloadHeartbeat
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkloadHeartbeatRequest"
        required: true
      responses:
        "204":
          description: Successfully heartbeated
        "404":
          description: Workload with given id was not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KnownExceptionInfo"
        "410":
          description: Workload should stop because it is no longer expected to be
            running.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KnownExceptionInfo"
  /api/v1/workload/launched:
    put:
      tags:
      - workload
      summary: Sets workload status to 'launched'.
      operationId: workloadLaunched
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkloadLaunchedRequest"
        required: true
      responses:
        "204":
          description: Success
        "404":
          description: Workload with given id was not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KnownExceptionInfo"
        "410":
          description: Workload is not in claimed state. It cannot be set to launched.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KnownExceptionInfo"
  /api/v1/workload/list:
    post:
      tags:
      - workload
      summary: Get workloads according to the filters.
      operationId: workloadList
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkloadListRequest"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkloadListResponse"
  /api/v1/workload/list_long_running_non_sync:
    post:
      tags:
      - workload
      summary: Get workloads according to the filters.
      operationId: workloadListOldNonSync
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LongRunningWorkloadRequest"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkloadListResponse"
  /api/v1/workload/list_long_running_sync:
    post:
      tags:
      - workload
      summary: Get workloads according to the filters.
      operationId: workloadListOldSync
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LongRunningWorkloadRequest"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkloadListResponse"
  /api/v1/workload/running:
    put:
      tags:
      - workload
      summary: Sets workload status to 'running'.
      operationId: workloadRunning
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkloadRunningRequest"
        required: true
      responses:
        "204":
          description: Success
        "404":
          description: Workload with given id was not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KnownExceptionInfo"
        "410":
          description: "Workload is not in pending state, it cannot be set to running."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KnownExceptionInfo"
  /api/v1/workload/success:
    put:
      tags:
      - workload
      summary: Sets workload status to 'success'.
      operationId: workloadSuccess
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkloadSuccessRequest"
        required: true
      responses:
        "204":
          description: Success
        "404":
          description: Workload with given id was not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KnownExceptionInfo"
        "410":
          description: "Workload is not in an active state, it cannot be succeeded."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KnownExceptionInfo"
  /api/v1/workload/{workloadId}:
    get:
      tags:
      - workload
      summary: Get a workload by id
      operationId: workloadGet
      parameters:
      - name: workloadId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successfully retrieved workload by given workload id.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workload"
        "404":
          description: Workload with given id was not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KnownExceptionInfo"
components:
  schemas:
    ClaimResponse:
      required:
      - claimed
      type: object
      properties:
        claimed:
          type: boolean
    ExpiredDeadlineWorkloadListRequest:
      required:
      - deadline
      type: object
      properties:
        dataplane:
          type: array
          nullable: true
          items:
            type: string
        status:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/WorkloadStatus"
        deadline:
          type: string
          format: date-time
    KnownExceptionInfo:
      required:
      - message
      type: object
      properties:
        message:
          type: string
    LongRunningWorkloadRequest:
      type: object
      properties:
        dataplane:
          type: array
          nullable: true
          items:
            type: string
        createdBefore:
          type: string
          format: date-time
          nullable: true
    Workload:
      required:
      - autoId
      - geography
      - id
      - inputPayload
      - labels
      - logPath
      - type
      type: object
      properties:
        id:
          type: string
        dataplaneId:
          type: string
          nullable: true
        status:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/WorkloadStatus"
        labels:
          type: array
          items:
            $ref: "#/components/schemas/WorkloadLabel"
        inputPayload:
          type: string
        logPath:
          type: string
        geography:
          type: string
        mutexKey:
          type: string
          nullable: true
        type:
          $ref: "#/components/schemas/WorkloadType"
        terminationSource:
          type: string
          nullable: true
        terminationReason:
          type: string
          nullable: true
        deadline:
          type: string
          format: date-time
          nullable: true
        autoId:
          type: string
          format: uuid
        signalInput:
          type: string
          nullable: true
    WorkloadCancelRequest:
      required:
      - reason
      - source
      - workloadId
      type: object
      properties:
        workloadId:
          type: string
        reason:
          type: string
        source:
          type: string
    WorkloadClaimRequest:
      required:
      - dataplaneId
      - workloadId
      type: object
      properties:
        workloadId:
          type: string
        dataplaneId:
          type: string
        deadline:
          type: string
          format: date-time
          nullable: true
    WorkloadCreateRequest:
      required:
      - geography
      - labels
      - logPath
      - priority
      - type
      - workloadId
      - workloadInput
      type: object
      properties:
        workloadId:
          type: string
        labels:
          type: array
          items:
            $ref: "#/components/schemas/WorkloadLabel"
        workloadInput:
          type: string
        logPath:
          type: string
        geography:
          type: string
        mutexKey:
          type: string
          nullable: true
        type:
          $ref: "#/components/schemas/WorkloadType"
        deadline:
          type: string
          format: date-time
          nullable: true
        priority:
          $ref: "#/components/schemas/WorkloadPriority"
        signalInput:
          type: string
          nullable: true
    WorkloadFailureRequest:
      required:
      - workloadId
      type: object
      properties:
        workloadId:
          type: string
        source:
          type: string
          nullable: true
        reason:
          type: string
          nullable: true
    WorkloadHeartbeatRequest:
      required:
      - workloadId
      type: object
      properties:
        workloadId:
          type: string
        deadline:
          type: string
          format: date-time
          nullable: true
    WorkloadLabel:
      required:
      - key
      - value
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    WorkloadLaunchedRequest:
      required:
      - workloadId
      type: object
      properties:
        workloadId:
          type: string
        deadline:
          type: string
          format: date-time
          nullable: true
    WorkloadListRequest:
      type: object
      properties:
        dataplane:
          type: array
          nullable: true
          items:
            type: string
        status:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/WorkloadStatus"
        updatedBefore:
          type: string
          format: date-time
          nullable: true
    WorkloadListResponse:
      required:
      - workloads
      type: object
      properties:
        workloads:
          type: array
          items:
            $ref: "#/components/schemas/Workload"
    WorkloadPriority:
      type: string
      enum:
      - high
      - default
    WorkloadRunningRequest:
      required:
      - workloadId
      type: object
      properties:
        workloadId:
          type: string
        deadline:
          type: string
          format: date-time
          nullable: true
    WorkloadStatus:
      type: string
      enum:
      - pending
      - claimed
      - launched
      - running
      - success
      - failure
      - cancelled
    WorkloadSuccessRequest:
      required:
      - workloadId
      type: object
      properties:
        workloadId:
          type: string
    WorkloadType:
      type: string
      enum:
      - sync
      - check
      - discover
      - spec
