import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id "io.airbyte.gradle.jvm.lib"
    id "io.airbyte.gradle.publish"
    id "org.openapi.generator"
    id "org.jetbrains.kotlin.jvm"
    id "org.jetbrains.kotlin.kapt"
}

def specFile = "$projectDir/src/main/openapi/config.yaml"
def airbyteApiSpecFile = "$projectDir/src/main/openapi/api.yaml"
def airbyteApiSpecTemplateDirApi = "$projectDir/src/main/resources/templates/jaxrs-spec-api"
def publicApiSpecTemplateDirApi = "$projectDir/src/main/resources/templates/jaxrs-spec-api/public_api"
def workloadSpecFile = "$projectDir/src/main/openapi/workload-openapi.yaml"
def connectorBuilderServerSpecFile = project(":airbyte-connector-builder-server").file("src/main/openapi/openapi.yaml").getPath()

def genApiServer = tasks.register("generateApiServer", GenerateTask) {
    def serverOutputDir = "${getLayout().buildDirectory.get()}/generated/api/server"

    inputs.file specFile
    outputs.dir serverOutputDir

    generatorName = "jaxrs-spec"
    inputSpec = specFile
    outputDir = serverOutputDir

    apiPackage = "io.airbyte.api.generated"
    invokerPackage = "io.airbyte.api.invoker.generated"
    modelPackage = "io.airbyte.api.model.generated"

    schemaMappings = [
            'OAuthConfiguration'                : 'com.fasterxml.jackson.databind.JsonNode',
            'SourceDefinitionSpecification'     : 'com.fasterxml.jackson.databind.JsonNode',
            'SourceConfiguration'               : 'com.fasterxml.jackson.databind.JsonNode',
            'DestinationDefinitionSpecification': 'com.fasterxml.jackson.databind.JsonNode',
            'DestinationConfiguration'          : 'com.fasterxml.jackson.databind.JsonNode',
            'StreamJsonSchema'                  : 'com.fasterxml.jackson.databind.JsonNode',
            'StateBlob'                         : 'com.fasterxml.jackson.databind.JsonNode',
            'FieldSchema'                       : 'com.fasterxml.jackson.databind.JsonNode',
            'DeclarativeManifest'               : 'com.fasterxml.jackson.databind.JsonNode',
            'SecretPersistenceConfigurationJson': 'com.fasterxml.jackson.databind.JsonNode',
            'ConnectorBuilderProjectTestingValues': 'com.fasterxml.jackson.databind.JsonNode',
    ]

    generateApiDocumentation = false

    configOptions = [
            dateLibrary                   : "java8",
            generatePom                   : "false",
            interfaceOnly                 : "true",
            /*
            JAX-RS generator does not respect nullable properties defined in the OpenApi Spec.
            It means that if a field is not nullable but not set it is still returning a null value for this field in the serialized json.
            The below Jackson annotation is made to only keep non null values in serialized json.
            We are not yet using nullable=true properties in our OpenApi so this is a valid workaround at the moment to circumvent the default JAX-RS behavior described above.
            Feel free to read the conversation on https://github.com/airbytehq/airbyte/pull/13370 for more details.
            */
            additionalModelTypeAnnotations: "\n@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)",

            // Generate separate classes for each endpoint "domain"
            useTags                       : "true",
    ]

    doLast {
        updateToJakartaApi(file("${serverOutputDir}/src/gen/java/${apiPackage.get().replaceAll('\\.', '/').replaceAll('-', '_')}"))
        updateToJakartaApi(file("${serverOutputDir}/src/gen/java/${modelPackage.get().replaceAll('\\.', '/').replaceAll('-', '_')}"))
    }
}

def genApiClient = tasks.register("generateApiClient", GenerateTask) {
    def clientOutputDir = "${getLayout().buildDirectory.get()}/generated/api/client"

    inputs.file specFile
    outputs.dir clientOutputDir

    generatorName = "java"
    inputSpec = specFile
    outputDir = clientOutputDir

    apiPackage = "io.airbyte.api.client.generated"
    invokerPackage = "io.airbyte.api.client.invoker.generated"
    modelPackage = "io.airbyte.api.client.model.generated"

    schemaMappings = [
            'OAuthConfiguration'                : 'com.fasterxml.jackson.databind.JsonNode',
            'SourceDefinitionSpecification'     : 'com.fasterxml.jackson.databind.JsonNode',
            'SourceConfiguration'               : 'com.fasterxml.jackson.databind.JsonNode',
            'DestinationDefinitionSpecification': 'com.fasterxml.jackson.databind.JsonNode',
            'DestinationConfiguration'          : 'com.fasterxml.jackson.databind.JsonNode',
            'StreamJsonSchema'                  : 'com.fasterxml.jackson.databind.JsonNode',
            'StateBlob'                         : 'com.fasterxml.jackson.databind.JsonNode',
            'FieldSchema'                       : 'com.fasterxml.jackson.databind.JsonNode',
            'SecretPersistenceConfigurationJson': 'com.fasterxml.jackson.databind.JsonNode',
            'ConnectorBuilderProjectTestingValues': 'com.fasterxml.jackson.databind.JsonNode',
    ]

    library = "native"

    generateApiDocumentation = false

    configOptions = [
            dateLibrary  : "java8",
            generatePom  : "false",
            interfaceOnly: "true"
    ]
}

def genApiClient2 = tasks.register("genApiClient2", GenerateTask) {
    def clientOutputDir = "${getLayout().buildDirectory.get()}/generated/api/client2"

    inputs.file specFile
    outputs.dir clientOutputDir

    generatorName = "kotlin"
    inputSpec = specFile
    outputDir = clientOutputDir

    apiPackage = "io.airbyte.api.client2.generated"
    invokerPackage = "io.airbyte.api.client2.invoker.generated"
    modelPackage = "io.airbyte.api.client2.model.generated"

    schemaMappings = [
            'OAuthConfiguration'                : 'com.fasterxml.jackson.databind.JsonNode',
            'SourceDefinitionSpecification'     : 'com.fasterxml.jackson.databind.JsonNode',
            'SourceConfiguration'               : 'com.fasterxml.jackson.databind.JsonNode',
            'DestinationDefinitionSpecification': 'com.fasterxml.jackson.databind.JsonNode',
            'DestinationConfiguration'          : 'com.fasterxml.jackson.databind.JsonNode',
            'StreamJsonSchema'                  : 'com.fasterxml.jackson.databind.JsonNode',
            'StateBlob'                         : 'com.fasterxml.jackson.databind.JsonNode',
            'FieldSchema'                       : 'com.fasterxml.jackson.databind.JsonNode',
            'SecretPersistenceConfigurationJson': 'com.fasterxml.jackson.databind.JsonNode',
            'ConnectorBuilderProjectTestingValues': 'com.fasterxml.jackson.databind.JsonNode',
    ]

    generateApiDocumentation = false

    configOptions = [
            enumPropertyNaming  : "UPPERCASE",
            generatePom         : "false",
            interfaceOnly       : "true"
    ]

    doLast {
        def apiClientPath = "${clientOutputDir}/src/main/kotlin/org/openapitools/client/infrastructure/ApiClient.kt"
        updateApiClientWithFailsafe(apiClientPath)
        updateDomainClientsWithFailsafe("${clientOutputDir}/src/main/kotlin/io/airbyte/api/client2/generated")

        // a JsonNode adapter needs to be added to the kotlin client's serializer to handle JsonNode fields in requests
        updateApiClientSerializerWithJsonNodeAdapter("${clientOutputDir}/src/main/kotlin/org/openapitools/client/infrastructure/Serializer.kt")
    }
}

def genApiDocs = tasks.register("generateApiDocs", GenerateTask) {
    def docsOutputDir = "${getLayout().buildDirectory.get()}/generated/api/docs"

    generatorName = "html"
    inputSpec = specFile
    outputDir = docsOutputDir

    apiPackage = "io.airbyte.api.client.generated"
    invokerPackage = "io.airbyte.api.client.invoker.generated"
    modelPackage = "io.airbyte.api.client.model.generated"

    schemaMappings = [
            'OAuthConfiguration'                : 'com.fasterxml.jackson.databind.JsonNode',
            'SourceDefinitionSpecification'     : 'com.fasterxml.jackson.databind.JsonNode',
            'SourceConfiguration'               : 'com.fasterxml.jackson.databind.JsonNode',
            'DestinationDefinitionSpecification': 'com.fasterxml.jackson.databind.JsonNode',
            'DestinationConfiguration'          : 'com.fasterxml.jackson.databind.JsonNode',
            'StreamJsonSchema'                  : 'com.fasterxml.jackson.databind.JsonNode',
            'StateBlob'                         : 'com.fasterxml.jackson.databind.JsonNode',
            'FieldSchema'                       : 'com.fasterxml.jackson.databind.JsonNode',
            'ConnectorBuilderProjectTestingValues': 'com.fasterxml.jackson.databind.JsonNode',
    ]

    generateApiDocumentation = false

    configOptions = [
            dateLibrary  : "java8",
            generatePom  : "false",
            interfaceOnly: "true"
    ]
}

def genPublicApiServer = tasks.register('generatePublicApiServer', GenerateTask) {
    def serverOutputDir = "${getLayout().buildDirectory.get()}/generated/public_api/server"

    inputs.file specFile
    outputs.dir serverOutputDir

    generatorName = "jaxrs-spec"
    inputSpec = specFile
    outputDir = serverOutputDir
    templateDir = publicApiSpecTemplateDirApi

    apiPackage = "io.airbyte.public-api.generated"
    invokerPackage = "io.airbyte.public-api.invoker.generated"
    modelPackage = "io.airbyte.public-api.model.generated"

    generateApiDocumentation = false

    configOptions = [
            dateLibrary                   : "java8",
            generatePom                   : "false",
            interfaceOnly                 : "true",
            returnResponse                : "true",
            useBeanValidation             : "true",
            performBeanValidation         : "true",
            additionalModelTypeAnnotations: "@io.micronaut.core.annotation.Introspected",
            additionalEnumTypeAnnotations : "@io.micronaut.core.annotation.Introspected",
            useTags                       : "true"
    ]

    schemaMappings = [
            'SourceConfiguration'          : 'com.fasterxml.jackson.databind.JsonNode',
            'OAuthInputConfiguration'      : 'com.fasterxml.jackson.databind.JsonNode',
            'OAuthCredentialsConfiguration': 'com.fasterxml.jackson.databind.JsonNode',
            'DestinationConfiguration'     : 'com.fasterxml.jackson.databind.JsonNode',
            'ConnectorBuilderProjectTestingValues': 'com.fasterxml.jackson.databind.JsonNode',
    ]

    doLast {
        updateToJakartaApi(file("${serverOutputDir}/src/gen/java/${apiPackage.get().replaceAll('\\.', '/').replaceAll('-', '_')}"))
        updateToJakartaApi(file("${serverOutputDir}/src/gen/java/${modelPackage.get().replaceAll('\\.', '/').replaceAll('-', '_')}"))
    }

}

def genAirbyteApiServer = tasks.register('generateAirbyteApiServer', GenerateTask) {
    def serverOutputDir = "${getLayout().buildDirectory.get()}/generated/airbyte_api/server"

    inputs.file airbyteApiSpecFile
    outputs.dir serverOutputDir

    generatorName = "jaxrs-spec"
    inputSpec = airbyteApiSpecFile
    outputDir = serverOutputDir
    templateDir = airbyteApiSpecTemplateDirApi

    apiPackage = "io.airbyte.airbyte-api.generated"
    invokerPackage = "io.airbyte.airbyte-api.invoker.generated"
    modelPackage = "io.airbyte.airbyte-api.model.generated"

    generateApiDocumentation = false

    configOptions = [
            dateLibrary                   : "java8",
            generatePom                   : "false",
            interfaceOnly                 : "true",
            returnResponse                : "true",
            useBeanValidation             : "true",
            performBeanValidation         : "true",
            additionalModelTypeAnnotations: "@io.micronaut.core.annotation.Introspected",
            additionalEnumTypeAnnotations : "@io.micronaut.core.annotation.Introspected",
    ]

    schemaMappings = [
            'SourceConfiguration'          : 'com.fasterxml.jackson.databind.JsonNode',
            'OAuthInputConfiguration'      : 'com.fasterxml.jackson.databind.JsonNode',
            'OAuthCredentialsConfiguration': 'com.fasterxml.jackson.databind.JsonNode',
            'DestinationConfiguration'     : 'com.fasterxml.jackson.databind.JsonNode',
            'ConnectorBuilderProjectTestingValues': 'com.fasterxml.jackson.databind.JsonNode',
    ]

    doLast {
        updateToJakartaApi(file("${serverOutputDir}/src/gen/java/${apiPackage.get().replaceAll('\\.', '/').replaceAll('-', '_')}"))
        updateToJakartaApi(file("${serverOutputDir}/src/gen/java/${modelPackage.get().replaceAll('\\.', '/').replaceAll('-', '_')}"))
    }
}

// TODO: Linked to document okhhtp
def genWorkloadApiClient = tasks.register("genWorkloadApiClient", GenerateTask) {
    def clientOutputDir = "${getLayout().buildDirectory.get()}/generated/workloadapi/client"

    inputs.file workloadSpecFile
    outputs.dir clientOutputDir

    generatorName = "kotlin"
    inputSpec = workloadSpecFile
    outputDir = clientOutputDir

    apiPackage = "io.airbyte.workload.api.client.generated"
    packageName = "io.airbyte.workload.api.client.generated"
    modelPackage = "io.airbyte.workload.api.client.model.generated"

    schemaMappings = [
            'OAuthConfiguration'                : 'com.fasterxml.jackson.databind.JsonNode',
            'SourceDefinitionSpecification'     : 'com.fasterxml.jackson.databind.JsonNode',
            'SourceConfiguration'               : 'com.fasterxml.jackson.databind.JsonNode',
            'DestinationDefinitionSpecification': 'com.fasterxml.jackson.databind.JsonNode',
            'DestinationConfiguration'          : 'com.fasterxml.jackson.databind.JsonNode',
            'StreamJsonSchema'                  : 'com.fasterxml.jackson.databind.JsonNode',
            'StateBlob'                         : 'com.fasterxml.jackson.databind.JsonNode',
            'FieldSchema'                       : 'com.fasterxml.jackson.databind.JsonNode',
            'ConnectorBuilderProjectTestingValues': 'com.fasterxml.jackson.databind.JsonNode',
    ]

    generateApiDocumentation = false

    configOptions = [
            enumPropertyNaming  : "UPPERCASE",
            generatePom         : "false",
            interfaceOnly       : "true"
    ]

    doLast {
        def apiClientPath = "${clientOutputDir}/src/main/kotlin/io/airbyte/workload/api/client/generated/infrastructure/ApiClient.kt"
        updateApiClientWithFailsafe(apiClientPath)
        def generatedDomainClientsPath = "${clientOutputDir}/src/main/kotlin/io/airbyte/workload/api/client/generated"
        updateDomainClientsWithFailsafe(generatedDomainClientsPath)
        // the kotlin client (as opposed to the java client) doesn't include the response body in the exception message.
        updateDomainClientsToIncludeHttpResponseBodyOnClientException(generatedDomainClientsPath)
    }

    dependsOn(':airbyte-workload-api-server:compileKotlin', 'genApiClient2')
}

def genConnectorBuilderServerApiClient = tasks.register("genConnectorBuilderServerApiClient", GenerateTask) {
    def clientOutputDir = "${getLayout().buildDirectory.get()}/generated/connectorbuilderserverapi/client"

    inputs.file connectorBuilderServerSpecFile
    outputs.dir clientOutputDir

    generatorName = "kotlin"
    inputSpec = connectorBuilderServerSpecFile
    outputDir = clientOutputDir

    apiPackage = "io.airbyte.connectorbuilderserver.api.client.generated"
    invokerPackage = "io.airbyte.connectorbuilderserver.api.client.invoker.generated"
    modelPackage = "io.airbyte.connectorbuilderserver.api.client.model.generated"

    schemaMappings = [
            'ConnectorConfig'   : 'com.fasterxml.jackson.databind.JsonNode',
            'ConnectorManifest' : 'com.fasterxml.jackson.databind.JsonNode',
            'ConnectorBuilderProjectTestingValues': 'com.fasterxml.jackson.databind.JsonNode',
    ]

    generateApiDocumentation = false

    configOptions = [
            enumPropertyNaming  : "UPPERCASE",
            generatePom         : "false",
            interfaceOnly       : "true"
    ]

    doLast {
        // Delete file generated by the client2 task
        def dir = file("${clientOutputDir}/src/main/kotlin/org").deleteDir()

        def generatedDomainClientsPath = "${clientOutputDir}/src/main/kotlin/io/airbyte/connectorbuilderserver/api/client/generated"
        updateDomainClientsWithFailsafe(generatedDomainClientsPath)
        // the kotlin client (as opposed to the java client) doesn't include the response body in the exception message.
        updateDomainClientsToIncludeHttpResponseBodyOnClientException(generatedDomainClientsPath)
    }

    dependsOn('genApiClient2')
}


compileJava.dependsOn genApiDocs, genApiClient, genApiServer, genAirbyteApiServer, genPublicApiServer

kapt {
    correctErrorTypes true
}

// uses afterEvaluate because at configuration time, the kaptGenerateStubsKotlin task does not exist.
afterEvaluate {
    tasks.named('kaptGenerateStubsKotlin').configure {
        mustRunAfter genApiDocs, genApiClient, genApiClient2, genApiServer, genAirbyteApiServer, genPublicApiServer,
                genWorkloadApiClient, genConnectorBuilderServerApiClient
    }
}

tasks.named("compileKotlin") {
    dependsOn tasks.named("genApiClient2")
    dependsOn tasks.named("genWorkloadApiClient")
    dependsOn tasks.named("genConnectorBuilderServerApiClient")
}

dependencies {
    annotationProcessor libs.micronaut.openapi
    kapt libs.micronaut.openapi
    kapt platform(libs.micronaut.platform)
    kapt libs.bundles.micronaut.annotation.processor
    kapt libs.v3.swagger.annotations

    api libs.bundles.micronaut.annotation
    api libs.micronaut.http
    api libs.bundles.micronaut.metrics
    api libs.failsafe.okhttp
    api libs.okhttp
    api libs.guava
    api libs.java.jwt
    api libs.google.auth.library.oauth2.http
    api libs.kotlin.logging

    implementation platform(libs.micronaut.platform)
    implementation libs.bundles.micronaut
    implementation libs.commons.io
    implementation libs.jakarta.annotation.api
    implementation libs.jakarta.ws.rs.api
    implementation libs.jakarta.validation.api
    implementation libs.jackson.datatype
    implementation libs.jackson.databind
    implementation libs.moshi.kotlin
    implementation libs.openapi.jackson.databind.nullable
    implementation libs.reactor.core
    implementation libs.slf4j.api
    implementation libs.swagger.annotations

    implementation project(":airbyte-commons")

    compileOnly libs.v3.swagger.annotations

    testRuntimeOnly libs.junit.jupiter.engine
    testImplementation libs.bundles.junit
    testImplementation libs.assertj.core
    testImplementation libs.junit.pioneer
    testImplementation libs.mockk
    testImplementation libs.kotlin.test.runner.junit5
}

sourceSets {
    main {
        java {
            srcDirs "$buildDir/generated/api/server/src/gen/java",
                    "$buildDir/generated/airbyte_api/server/src/gen/java",
                    "$buildDir/generated/public_api/server/src/gen/java",
                    "$buildDir/generated/api/client/src/main/java",
                    "$buildDir/generated/api/client2/src/main/kotlin",
                    "$buildDir/generated/workloadapi/client/src/main/kotlin",
                    "$buildDir/generated/connectorbuilderserverapi/client/src/main/kotlin"
            "$projectDir/src/main/java"
        }
        resources {
            srcDir "$projectDir/src/main/openapi/"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs = [
            '-parameters'
    ]
}

airbyte {
    spotless {
        excludes = ["src/main/openapi/workload-openapi.yaml"]
    }
}

// Even though Kotlin is excluded on Spotbugs, this project
// still runs into spotbug issues. Working theory is that
// generated code is being picked up. Disable as a short-term fix.
tasks.named("spotbugsMain") {
    enabled = false
}

private def updateApiClientWithFailsafe(def clientPath) {
    /*
     * UPDATE ApiClient.kt to use Failsafe.
     */
    def apiClientFile = file(clientPath)
    def apiClientFileText = apiClientFile.text

    // replace class declaration
    apiClientFileText = apiClientFileText.replace(
            'open class ApiClient(val baseUrl: String, val client: OkHttpClient = defaultClient) {',
            'open class ApiClient(val baseUrl: String, val client: OkHttpClient = defaultClient, val policy : RetryPolicy<Response> = RetryPolicy.ofDefaults()) {')

    // replace execute call
    apiClientFileText = apiClientFileText.replace(
            'val response = client.newCall(request).execute()',
            '''val call = client.newCall(request)
        val failsafeCall = FailsafeCall.with(policy).compose(call)
        val response: Response = failsafeCall.execute()

        return response.use { processResponse(response) }
        }

        protected inline fun <reified T: Any?> processResponse(response: Response): ApiResponse<T?> {''')

    // add imports if not exist
    if (!apiClientFileText.contains("import dev.failsafe.RetryPolicy")) {
        def newImports = '''import dev.failsafe.RetryPolicy
import dev.failsafe.okhttp.FailsafeCall'''
        apiClientFileText = apiClientFileText.replaceFirst('import ', newImports + '\nimport ')

    }
    apiClientFile.write(apiClientFileText)
}

private def updateDomainClientsWithFailsafe(def clientPath) {
    /*
     * UPDATE domain clients to use Failsafe.
     */
    def dir = file(clientPath)
    dir.eachFile { domainClient ->
        if (domainClient.name.endsWith('.kt')) {
            def domainClientFileText = domainClient.text

            // replace class declaration
            domainClientFileText = domainClientFileText.replaceAll(
                    /class (\S+)\(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient\) : ApiClient\(basePath, client\)/,
                    'class $1(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient, policy : RetryPolicy<okhttp3.Response> = RetryPolicy.ofDefaults()) : ApiClient(basePath, client, policy)'
            )

            // add imports if not exist
            if(!domainClientFileText.contains("import dev.failsafe.RetryPolicy")) {
                def newImports = "import dev.failsafe.RetryPolicy"
                domainClientFileText = domainClientFileText.replaceFirst('import ', newImports + '\nimport ')
            }

            domainClient.write(domainClientFileText)
        }
    }
}

private def updateDomainClientsToIncludeHttpResponseBodyOnClientException(def clientPath) {
    def dir = file(clientPath)
    dir.eachFile { domainClient ->
        if (domainClient.name.endsWith('.kt')) {
            def domainClientFileText = domainClient.text

            domainClientFileText = domainClientFileText.replace(
                    'throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)',
                    'throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body ?: ""}", localVarError.statusCode, localVarResponse)')

            domainClient.write(domainClientFileText)
        }
    }
}

private def updateApiClientSerializerWithJsonNodeAdapter(def serializerPath) {
    /*
     * UPDATE Serializer to include JsonNode adapter
     */
    def serializerFile = file(serializerPath)
    def serializerFileText = serializerFile.text

    // add import if not exists
    if (!serializerFileText.contains("import io.airbyte.api.client.infrastructure.JsonNodeAdapter")) {
        def newImport = "import io.airbyte.api.client.infrastructure.JsonNodeAdapter"
        serializerFileText = serializerFileText.replaceFirst('import ', newImport + '\nimport ')
    }

    // add JsonNode adapter to builder
    serializerFileText = serializerFileText.replace("Moshi.Builder()", '''Moshi.Builder()
        .add(JsonNodeAdapter())''')

    serializerFile.write(serializerFileText)
}

private def updateToJakartaApi(srcDir) {
    srcDir.eachFileRecurse { file ->
        if(file.isFile()) {
            def contents = file.text
            contents = contents
                    .replaceAll('javax\\.ws\\.rs', 'jakarta.ws.rs')
                    .replaceAll('javax\\.validation', 'jakarta.validation')
                    .replaceAll('javax\\.annotation', 'jakarta.annotation')
            file.write(contents)
        }
    }
}
