/*
 * Copyright (c) 2020-2025 Airbyte, Inc., all rights reserved.
 */

package io.airbyte.config;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.annotation.Generated;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

/**
 * StreamSyncStats
 * <p>
 * Sync stats for a particular stream.
 *
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
  "streamName",
  "streamNamespace",
  "stats",
  "wasBackfilled",
  "wasResumed"
})
@Generated(value = "Generated by jsonSchema2Pojo")
public class StreamSyncStats implements Serializable {

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("streamName")
  private String streamName;
  @JsonProperty("streamNamespace")
  private String streamNamespace;
  /**
   * SyncStats
   * <p>
   * sync stats. (Required)
   *
   */
  @JsonProperty("stats")
  @JsonPropertyDescription("sync stats.")
  private SyncStats stats;
  /**
   * Indicates whether the stream state was cleared before the sync
   *
   */
  @JsonProperty("wasBackfilled")
  @JsonPropertyDescription("Indicates whether the stream state was cleared before the sync")
  private Boolean wasBackfilled;
  /**
   * Indicates whether the stream was resumed from a previous state
   *
   */
  @JsonProperty("wasResumed")
  @JsonPropertyDescription("Indicates whether the stream was resumed from a previous state")
  private Boolean wasResumed;
  @JsonIgnore
  private Map<String, Object> additionalProperties = new HashMap<String, Object>();
  private final static long serialVersionUID = -2488712104695543581L;

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("streamName")
  public String getStreamName() {
    return streamName;
  }

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("streamName")
  public void setStreamName(String streamName) {
    this.streamName = streamName;
  }

  public StreamSyncStats withStreamName(String streamName) {
    this.streamName = streamName;
    return this;
  }

  @JsonProperty("streamNamespace")
  public String getStreamNamespace() {
    return streamNamespace;
  }

  @JsonProperty("streamNamespace")
  public void setStreamNamespace(String streamNamespace) {
    this.streamNamespace = streamNamespace;
  }

  public StreamSyncStats withStreamNamespace(String streamNamespace) {
    this.streamNamespace = streamNamespace;
    return this;
  }

  /**
   * SyncStats
   * <p>
   * sync stats. (Required)
   *
   */
  @JsonProperty("stats")
  public SyncStats getStats() {
    return stats;
  }

  /**
   * SyncStats
   * <p>
   * sync stats. (Required)
   *
   */
  @JsonProperty("stats")
  public void setStats(SyncStats stats) {
    this.stats = stats;
  }

  public StreamSyncStats withStats(SyncStats stats) {
    this.stats = stats;
    return this;
  }

  /**
   * Indicates whether the stream state was cleared before the sync
   *
   */
  @JsonProperty("wasBackfilled")
  public Boolean getWasBackfilled() {
    return wasBackfilled;
  }

  /**
   * Indicates whether the stream state was cleared before the sync
   *
   */
  @JsonProperty("wasBackfilled")
  public void setWasBackfilled(Boolean wasBackfilled) {
    this.wasBackfilled = wasBackfilled;
  }

  public StreamSyncStats withWasBackfilled(Boolean wasBackfilled) {
    this.wasBackfilled = wasBackfilled;
    return this;
  }

  /**
   * Indicates whether the stream was resumed from a previous state
   *
   */
  @JsonProperty("wasResumed")
  public Boolean getWasResumed() {
    return wasResumed;
  }

  /**
   * Indicates whether the stream was resumed from a previous state
   *
   */
  @JsonProperty("wasResumed")
  public void setWasResumed(Boolean wasResumed) {
    this.wasResumed = wasResumed;
  }

  public StreamSyncStats withWasResumed(Boolean wasResumed) {
    this.wasResumed = wasResumed;
    return this;
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  @JsonAnySetter
  public void setAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
  }

  public StreamSyncStats withAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
    return this;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(StreamSyncStats.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');
    sb.append("streamName");
    sb.append('=');
    sb.append(((this.streamName == null) ? "<null>" : this.streamName));
    sb.append(',');
    sb.append("streamNamespace");
    sb.append('=');
    sb.append(((this.streamNamespace == null) ? "<null>" : this.streamNamespace));
    sb.append(',');
    sb.append("stats");
    sb.append('=');
    sb.append(((this.stats == null) ? "<null>" : this.stats));
    sb.append(',');
    sb.append("wasBackfilled");
    sb.append('=');
    sb.append(((this.wasBackfilled == null) ? "<null>" : this.wasBackfilled));
    sb.append(',');
    sb.append("wasResumed");
    sb.append('=');
    sb.append(((this.wasResumed == null) ? "<null>" : this.wasResumed));
    sb.append(',');
    sb.append("additionalProperties");
    sb.append('=');
    sb.append(((this.additionalProperties == null) ? "<null>" : this.additionalProperties));
    sb.append(',');
    if (sb.charAt((sb.length() - 1)) == ',') {
      sb.setCharAt((sb.length() - 1), ']');
    } else {
      sb.append(']');
    }
    return sb.toString();
  }

  @Override
  public int hashCode() {
    int result = 1;
    result = ((result * 31) + ((this.streamNamespace == null) ? 0 : this.streamNamespace.hashCode()));
    result = ((result * 31) + ((this.wasResumed == null) ? 0 : this.wasResumed.hashCode()));
    result = ((result * 31) + ((this.wasBackfilled == null) ? 0 : this.wasBackfilled.hashCode()));
    result = ((result * 31) + ((this.additionalProperties == null) ? 0 : this.additionalProperties.hashCode()));
    result = ((result * 31) + ((this.streamName == null) ? 0 : this.streamName.hashCode()));
    result = ((result * 31) + ((this.stats == null) ? 0 : this.stats.hashCode()));
    return result;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) {
      return true;
    }
    if ((other instanceof StreamSyncStats) == false) {
      return false;
    }
    StreamSyncStats rhs = ((StreamSyncStats) other);
    return (((((((this.streamNamespace == rhs.streamNamespace)
        || ((this.streamNamespace != null) && this.streamNamespace.equals(rhs.streamNamespace)))
        && ((this.wasResumed == rhs.wasResumed) || ((this.wasResumed != null) && this.wasResumed.equals(rhs.wasResumed))))
        && ((this.wasBackfilled == rhs.wasBackfilled) || ((this.wasBackfilled != null) && this.wasBackfilled.equals(rhs.wasBackfilled))))
        && ((this.additionalProperties == rhs.additionalProperties)
            || ((this.additionalProperties != null) && this.additionalProperties.equals(rhs.additionalProperties))))
        && ((this.streamName == rhs.streamName) || ((this.streamName != null) && this.streamName.equals(rhs.streamName))))
        && ((this.stats == rhs.stats) || ((this.stats != null) && this.stats.equals(rhs.stats))));
  }

}
