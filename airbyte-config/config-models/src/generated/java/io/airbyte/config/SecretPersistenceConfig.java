/*
 * Copyright (c) 2020-2025 Airbyte, Inc., all rights reserved.
 */

package io.airbyte.config;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import jakarta.annotation.Generated;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

/**
 * SecretPersistenceConfig
 * <p>
 * A configuration object used to instantiate a SecretPersistence object at runtime
 *
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
  "secretPersistenceType",
  "configuration",
  "scopeId",
  "scopeType"
})
@Generated(value = "Generated by jsonSchema2Pojo")
public class SecretPersistenceConfig implements Serializable {

  /**
   * SecretPersistenceType
   * <p>
   * enum that describes different types of secret persistence (Required)
   *
   */
  @JsonProperty("secretPersistenceType")
  @JsonPropertyDescription("enum that describes different types of secret persistence")
  private SecretPersistenceType secretPersistenceType;
  /**
   * The value from the secret coordinate in the global secret persistence that contains the override
   * secret persistence config (Required)
   *
   */
  @JsonProperty("configuration")
  @JsonPropertyDescription("The value from the secret coordinate in the global secret persistence that contains the override secret persistence config")
  private Map<String, String> configuration;
  /**
   * The resource ID tied to this secret persistence configuration. (Required)
   *
   */
  @JsonProperty("scopeId")
  @JsonPropertyDescription("The resource ID tied to this secret persistence configuration.")
  private UUID scopeId;
  /**
   * ScopeType
   * <p>
   * Scope type of resource id (Required)
   *
   */
  @JsonProperty("scopeType")
  @JsonPropertyDescription("Scope type of resource id")
  private ScopeType scopeType;
  @JsonIgnore
  private Map<String, Object> additionalProperties = new HashMap<String, Object>();
  private final static long serialVersionUID = 5947194833666245897L;

  /**
   * SecretPersistenceType
   * <p>
   * enum that describes different types of secret persistence (Required)
   *
   */
  @JsonProperty("secretPersistenceType")
  public SecretPersistenceType getSecretPersistenceType() {
    return secretPersistenceType;
  }

  /**
   * SecretPersistenceType
   * <p>
   * enum that describes different types of secret persistence (Required)
   *
   */
  @JsonProperty("secretPersistenceType")
  public void setSecretPersistenceType(SecretPersistenceType secretPersistenceType) {
    this.secretPersistenceType = secretPersistenceType;
  }

  public SecretPersistenceConfig withSecretPersistenceType(SecretPersistenceType secretPersistenceType) {
    this.secretPersistenceType = secretPersistenceType;
    return this;
  }

  /**
   * The value from the secret coordinate in the global secret persistence that contains the override
   * secret persistence config (Required)
   *
   */
  @JsonProperty("configuration")
  public Map<String, String> getConfiguration() {
    return configuration;
  }

  /**
   * The value from the secret coordinate in the global secret persistence that contains the override
   * secret persistence config (Required)
   *
   */
  @JsonProperty("configuration")
  public void setConfiguration(Map<String, String> configuration) {
    this.configuration = configuration;
  }

  public SecretPersistenceConfig withConfiguration(Map<String, String> configuration) {
    this.configuration = configuration;
    return this;
  }

  /**
   * The resource ID tied to this secret persistence configuration. (Required)
   *
   */
  @JsonProperty("scopeId")
  public UUID getScopeId() {
    return scopeId;
  }

  /**
   * The resource ID tied to this secret persistence configuration. (Required)
   *
   */
  @JsonProperty("scopeId")
  public void setScopeId(UUID scopeId) {
    this.scopeId = scopeId;
  }

  public SecretPersistenceConfig withScopeId(UUID scopeId) {
    this.scopeId = scopeId;
    return this;
  }

  /**
   * ScopeType
   * <p>
   * Scope type of resource id (Required)
   *
   */
  @JsonProperty("scopeType")
  public ScopeType getScopeType() {
    return scopeType;
  }

  /**
   * ScopeType
   * <p>
   * Scope type of resource id (Required)
   *
   */
  @JsonProperty("scopeType")
  public void setScopeType(ScopeType scopeType) {
    this.scopeType = scopeType;
  }

  public SecretPersistenceConfig withScopeType(ScopeType scopeType) {
    this.scopeType = scopeType;
    return this;
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  @JsonAnySetter
  public void setAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
  }

  public SecretPersistenceConfig withAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
    return this;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(SecretPersistenceConfig.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');
    sb.append("secretPersistenceType");
    sb.append('=');
    sb.append(((this.secretPersistenceType == null) ? "<null>" : this.secretPersistenceType));
    sb.append(',');
    sb.append("configuration");
    sb.append('=');
    sb.append(((this.configuration == null) ? "<null>" : this.configuration));
    sb.append(',');
    sb.append("scopeId");
    sb.append('=');
    sb.append(((this.scopeId == null) ? "<null>" : this.scopeId));
    sb.append(',');
    sb.append("scopeType");
    sb.append('=');
    sb.append(((this.scopeType == null) ? "<null>" : this.scopeType));
    sb.append(',');
    sb.append("additionalProperties");
    sb.append('=');
    sb.append(((this.additionalProperties == null) ? "<null>" : this.additionalProperties));
    sb.append(',');
    if (sb.charAt((sb.length() - 1)) == ',') {
      sb.setCharAt((sb.length() - 1), ']');
    } else {
      sb.append(']');
    }
    return sb.toString();
  }

  @Override
  public int hashCode() {
    int result = 1;
    result = ((result * 31) + ((this.secretPersistenceType == null) ? 0 : this.secretPersistenceType.hashCode()));
    result = ((result * 31) + ((this.scopeId == null) ? 0 : this.scopeId.hashCode()));
    result = ((result * 31) + ((this.additionalProperties == null) ? 0 : this.additionalProperties.hashCode()));
    result = ((result * 31) + ((this.configuration == null) ? 0 : this.configuration.hashCode()));
    result = ((result * 31) + ((this.scopeType == null) ? 0 : this.scopeType.hashCode()));
    return result;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) {
      return true;
    }
    if ((other instanceof SecretPersistenceConfig) == false) {
      return false;
    }
    SecretPersistenceConfig rhs = ((SecretPersistenceConfig) other);
    return ((((((this.secretPersistenceType == rhs.secretPersistenceType)
        || ((this.secretPersistenceType != null) && this.secretPersistenceType.equals(rhs.secretPersistenceType)))
        && ((this.scopeId == rhs.scopeId) || ((this.scopeId != null) && this.scopeId.equals(rhs.scopeId))))
        && ((this.additionalProperties == rhs.additionalProperties)
            || ((this.additionalProperties != null) && this.additionalProperties.equals(rhs.additionalProperties))))
        && ((this.configuration == rhs.configuration) || ((this.configuration != null) && this.configuration.equals(rhs.configuration))))
        && ((this.scopeType == rhs.scopeType) || ((this.scopeType != null) && this.scopeType.equals(rhs.scopeType))));
  }

  /**
   * SecretPersistenceType
   * <p>
   * enum that describes different types of secret persistence
   *
   */
  public enum SecretPersistenceType {

    TESTING("testing"),
    GOOGLE("google"),
    VAULT("vault"),
    AWS("aws"),
    AZURE("azure");

    private final String value;
    private final static Map<String, SecretPersistenceType> CONSTANTS = new HashMap<String, SecretPersistenceType>();

    static {
      for (SecretPersistenceType c : values()) {
        CONSTANTS.put(c.value, c);
      }
    }

    private SecretPersistenceType(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return this.value;
    }

    @JsonValue
    public String value() {
      return this.value;
    }

    @JsonCreator
    public static SecretPersistenceType fromValue(String value) {
      SecretPersistenceType constant = CONSTANTS.get(value);
      if (constant == null) {
        throw new IllegalArgumentException(value);
      } else {
        return constant;
      }
    }

  }

}
