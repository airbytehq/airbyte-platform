/*
 * Copyright (c) 2020-2024 Airbyte, Inc., all rights reserved.
 */

package io.airbyte.config.helpers;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import com.google.cloud.storage.Storage;
import io.airbyte.commons.envvar.EnvVar;
import io.airbyte.config.storage.DefaultGcsClientFactory;
import io.airbyte.config.storage.GcsStorageConfig;
import io.airbyte.config.storage.StorageBucketConfig;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

@Tag("logger-client")
class GcsLogsIntTest {

  private static Storage getClientFactory() {
    return new DefaultGcsClientFactory(new GcsStorageConfig(
        new StorageBucketConfig(System.getenv(EnvVar.STORAGE_BUCKET_LOG.name()), "", "", ""),
        System.getenv(EnvVar.GOOGLE_APPLICATION_CREDENTIALS.name()))).get();
  }

  /**
   * The test files here were generated by {@link S3LogsTest}. See that class for more information.
   *
   * Generate enough files to force pagination and confirm all data is read.
   */
  @Test
  void testRetrieveAllLogs() throws IOException {
    final var logConfigs = mock(LogConfigs.class);
    final var gcsConfig = mock(GcsStorageConfig.class, Mockito.RETURNS_DEEP_STUBS);
    when(logConfigs.getStorageConfig()).thenReturn(gcsConfig);
    when(gcsConfig.getBuckets().getLog()).thenReturn(System.getenv(EnvVar.STORAGE_BUCKET_LOG.name()));

    final File data;
    data = GcsLogs.getFile(getClientFactory(), logConfigs, "paginate", 6);
    final var retrieved = new ArrayList<String>();
    Files.lines(data.toPath()).forEach(retrieved::add);

    final var expected = List.of("Line 0", "Line 1", "Line 2", "Line 3", "Line 4", "Line 5", "Line 6", "Line 7", "Line 8");

    assertEquals(expected, retrieved);

  }

  /**
   * The test files for this test have been pre-generated and uploaded into the bucket folder. The
   * folder contains the following files with these contents:
   * <li>first-file.txt - Line 1, Line 2, Line 3</li>
   * <li>second-file.txt - Line 4, Line 5, Line 6</li>
   * <li>third-file.txt - Line 7, Line 8, Line 9</li>
   */
  @Test
  void testTail() throws IOException {
    final var logConfigs = mock(LogConfigs.class);
    final var gcsConfig = mock(GcsStorageConfig.class, Mockito.RETURNS_DEEP_STUBS);
    when(logConfigs.getStorageConfig()).thenReturn(gcsConfig);
    when(gcsConfig.getBuckets().getLog()).thenReturn(System.getenv(EnvVar.STORAGE_BUCKET_LOG.name()));

    final var data = new GcsLogs(GcsLogsIntTest::getClientFactory).tailCloudLog(logConfigs, "tail", 6);

    final var expected = List.of("Line 4", "Line 5", "Line 6", "Line 7", "Line 8", "Line 9");
    assertEquals(data, expected);
  }

}
