micronaut:
  application:
    name: airbyte-cron
  caches:
    # used by the analytics tracking client to cache calls to resolve the deployment and identity (workspace) for
    # track events
    analytics-tracking-deployments:
      charset: "UTF-8"
      expire-after-access: 10m
    analytics-tracking-identity:
      charset: "UTF-8"
      expire-after-access: 10m
    remote-definitions-provider:
      expire-after-write: 15s
    platform-compatibility-provider:
      expire-after-write: 15s
  metrics:
    enabled: ${MICROMETER_METRICS_ENABLED:false}
    export:
      otlp:
        enabled: ${MICROMETER_METRICS_OTLP_ENABLED:false}
        step: ${MICROMETER_METRICS_STEP:PT30S}
        url: ${OTEL_COLLECTOR_ENDPOINT:`http://localhost:4318/v1/metrics`}
      statsd:
        enabled: ${MICROMETER_METRICS_STATSD_ENABLED:false}
        flavor: ${MICROMETER_METRICS_STATSD_FLAVOR:datadog}
        step: ${MICROMETER_METRICS_STEP:PT30S}
        host: ${STATSD_HOST:localhost}
        port: ${STATSD_PORT:8125}
  server:
    port: 9001

airbyte:
  connector-registry:
    seed-provider: ${CONNECTOR_REGISTRY_SEED_PROVIDER:remote}
    remote:
      base-url: ${CONNECTOR_REGISTRY_BASE_URL:}
      timeout-ms: ${CONNECTOR_REGISTRY_TIMEOUT_MS:30000}
  license-key: ${AIRBYTE_LICENSE_KEY:}
  cron:
    update-definitions:
      enabled: ${UPDATE_DEFINITIONS_CRON_ENABLED:true}
    declarative-sources-updater:
      enabled: ${RUN_DECLARATIVE_SOURCES_UPDATER:true}
    db-prune:
      enabled: ${DB_PRUNE_CRON_ENABLED:true}
  edition: ${AIRBYTE_EDITION:COMMUNITY}

  stigg:
    enabled: ${STIGG_ENABLED:false}
    api-key: ${STIGG_API_KEY:}
    sidecar-host: ${STIGG_SIDECAR_HOST:}
    sidecar-port: ${STIGG_SIDECAR_PORT:8800}

  feature-flag:
    client: ${FEATURE_FLAG_CLIENT:CONFIGFILE}
    path: ${FEATURE_FLAG_PATH:/flags}
    api-key: ${LAUNCHDARKLY_KEY:}
  flyway:
    configs:
      initialization-timeout-ms: ${CONFIGS_DATABASE_INITIALIZATION_TIMEOUT_MS:60000}
      minimum-migration-version: ${CONFIGS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION}
  protocol:
    min-version: ${AIRBYTE_PROTOCOL_VERSION_MIN:0.0.0}
    max-version: ${AIRBYTE_PROTOCOL_VERSION_MAX:0.3.0}
  tracking:
    strategy: ${TRACKING_STRATEGY:LOGGING}
    write-key: ${SEGMENT_WRITE_KEY:}
  version: ${AIRBYTE_VERSION}
  workflow:
    failure:
      restart-delay: ${WORKFLOW_FAILURE_RESTART_DELAY_SECONDS:600}
  workload:
    monitor:
      claim-check-rate: PT1M
      heartbeat-check-rate: PT1M
      not-started-check-rate: PT1M
      non-sync-age-check-rate: PT1M
      queue-depth-check-rate: PT1M
      sync-age-check-rate: PT1M
      non-sync-workload-timeout: ${NON_SYNC_WORKLOAD_TIMEOUT:PT4H} # Should be longer than the sum of the deadlines
      sync-workload-timeout: ${SYNC_WORKLOAD_TIMEOUT:P30D} # Should be longer than the sum of the deadlines
    queue:
      deletion-batch-size: ${WORKLOAD_QUEUE_DELETION_BATCH_SIZE:40000}
      deletion-cron: 0 15 * * * ?
  internal-api:
    auth:
      type: INTERNAL_CLIENT_TOKEN
      signature-secret: ${AB_JWT_SIGNATURE_SECRET:}
  workload-api:
    base-path: ${WORKLOAD_API_HOST:}
    connect-timeout-seconds: ${WORKLOAD_API_CONNECT_TIMEOUT_SECONDS:30}
    read-timeout-seconds: ${WORKLOAD_API_READ_TIMEOUT_SECONDS:300}
    retries:
      delay-seconds: ${WORKLOAD_API_RETRY_DELAY_SECONDS:2}
      max: ${WORKLOAD_API_MAX_RETRIES:5}
  workspace-root: ${WORKSPACE_ROOT}
  secret:
    persistence: ${SECRET_PERSISTENCE:TESTING_CONFIG_DB_TABLE}
    store:
      aws:
        access-key: ${AWS_SECRET_MANAGER_ACCESS_KEY_ID:}
        secret-key: ${AWS_SECRET_MANAGER_SECRET_ACCESS_KEY:}
        region: ${AWS_SECRET_MANAGER_REGION:}
        kmsKeyArn: ${AWS_KMS_KEY_ARN:}
        tags: ${AWS_SECRET_MANAGER_SECRET_TAGS:}
      gcp:
        credentials: ${SECRET_STORE_GCP_CREDENTIALS:}
        project-id: ${SECRET_STORE_GCP_PROJECT_ID:}
        region: ${SECRET_STORE_GCP_REGION:}
      vault:
        address: ${VAULT_ADDRESS:}
        prefix: ${VAULT_PREFIX:}
        token: ${VAULT_AUTH_TOKEN:}
      azure:
        vault-url: ${AB_AZURE_KEY_VAULT_VAULT_URL:}
        tenant-id: ${AB_AZURE_KEY_VAULT_TENANT_ID:}
        client-id: ${AB_AZURE_KEY_VAULT_CLIENT_ID:}
        client-secret: ${AB_AZURE_KEY_VAULT_CLIENT_SECRET:}
        tags: ${AB_AZURE_KEY_VAULT_TAGS:}
  temporal:
    cloud:
      client:
        cert: ${TEMPORAL_CLOUD_CLIENT_CERT:}
        key: ${TEMPORAL_CLOUD_CLIENT_KEY:}
      enabled: ${TEMPORAL_CLOUD_ENABLED:false}
      host: ${TEMPORAL_CLOUD_HOST:}
      namespace: ${TEMPORAL_CLOUD_NAMESPACE:}
      connector-rollout:
        host: ${TEMPORAL_CLOUD_HOST_CONNECTOR_ROLLOUT:}
        namespace: ${TEMPORAL_CLOUD_NAMESPACE_CONNECTOR_ROLLOUT:}
    host: ${TEMPORAL_HOST:`airbyte-temporal:7233`}
    retention: ${TEMPORAL_HISTORY_RETENTION_IN_DAYS:30}
    sdk:
      timeouts:
        rpc-timeout: ${TEMPORAL_SDK_RPC_TIMEOUT:60s}
        rpc-long-poll-timeout: ${TEMPORAL_SDK_RPC_LONG_POLL_TIMEOUT:70s}
        rpc-query-timeout: ${TEMPORAL_SDK_RPC_QUERY_TIMEOUT:10s}

datasources:
  config:
    connection-test-query: SELECT 1
    connection-timeout: 30000
    idle-timeout: 600000
    initialization-fail-timeout: -1 # Disable fail fast checking to avoid issues due to other pods not being started in time
    maximum-pool-size: 5
    minimum-idle: 0
    url: ${DATABASE_URL}
    driverClassName: org.postgresql.Driver
    username: ${DATABASE_USER}
    password: ${DATABASE_PASSWORD:}
  jobs:
    connection-test-query: SELECT 1
    connection-timeout: 30000
    idle-timeout: 600000
    initialization-fail-timeout: -1 # Disable fail fast checking to avoid issues due to other pods not being started in time
    maximum-pool-size: 5
    minimum-idle: 0
    url: ${DATABASE_URL}
    driverClassName: org.postgresql.Driver
    username: ${DATABASE_USER}
    password: ${DATABASE_PASSWORD:}
  local-secrets:
    connection-test-query: SELECT 1
    connection-timeout: 30000
    idle-timeout: 600000
    initialization-fail-timeout: -1 # Disable fail fast checking to avoid issues due to other pods not being started in time
    maximum-pool-size: 20
    minimum-idle: 0
    url: ${DATABASE_URL}
    driverClassName: org.postgresql.Driver
    username: ${DATABASE_USER}
    password: ${DATABASE_PASSWORD:}
    pool-name: config-pool

docker:
  network: ${DOCKER_NETWORK:host}

endpoints:
  all:
    port: 8085
  beans:
    enabled: true
    sensitive: false
  caches:
    enabled: true
    sensitive: false
  env:
    enabled: true
    sensitive: false
  health:
    enabled: true
    sensitive: false
  info:
    enabled: true
    sensitive: true
  loggers:
    enabled: true
    sensitive: true
  metrics:
    enabled: ${MICROMETER_METRICS_ENABLED:false}
    sensitive: false
  refresh:
    enabled: false
    sensitive: true
  routes:
    enabled: true
    sensitive: false
  threaddump:
    enabled: true
    sensitive: true

flyway:
  enabled: true
  datasources:
    config:
      enabled: false
      locations:
        - "classpath:io/airbyte/db/instance/configs/migrations"
    jobs:
      enabled: false
      locations:
        - "classpath:io/airbyte/db/instance/jobs/migrations"

jooq:
  datasources:
    config:
      jackson-converter-enabled: true
      sql-dialect: POSTGRES
    jobs:
      jackson-converter-enabled: true
      sql-dialect: POSTGRES

logger:
  levels:
    com.zaxxer.hikari: ERROR
    com.zaxxer.hikari.pool: ERROR
    io.grpc: INFO
    io.fabric8.kubernetes.client: INFO
    io.netty: INFO
    io.temporal: INFO
#   Uncomment to help resolve issues with conditional beans
#      io.micronaut.context.condition: DEBUG
