plugins {
    id "io.airbyte.gradle.jvm.app"
    id "io.airbyte.gradle.docker"
    id "io.airbyte.gradle.publish"
    id "org.jetbrains.kotlin.jvm"
    id "org.jetbrains.kotlin.kapt"
}

dependencies {
    annotationProcessor libs.lombok
    implementation libs.lombok
    implementation libs.commons.io

    implementation libs.bundles.kubernetes.client
    implementation libs.bundles.temporal
    implementation libs.bundles.datadog
    implementation libs.failsafe
    implementation libs.failsafe.okhttp
    implementation libs.java.jwt
    implementation libs.kotlin.logging
    implementation libs.okhttp
    implementation libs.sentry.java

    implementation project(':airbyte-api')
    implementation project(':airbyte-analytics')
    implementation project(':airbyte-commons')
    implementation project(':airbyte-commons-auth')
    implementation project(':airbyte-commons-micronaut')
    implementation project(':airbyte-commons-temporal')
    implementation project(':airbyte-config:config-models')
    implementation project(':airbyte-config:config-persistence')
    implementation project(':airbyte-config:init')
    implementation project(':airbyte-json-validation')
    implementation project(':airbyte-data')
    implementation project(':airbyte-db:db-lib')
    implementation project(":airbyte-featureflag")
    implementation project(':airbyte-metrics:metrics-lib')
    implementation project(':airbyte-persistence:job-persistence')

    annotationProcessor platform(libs.micronaut.bom)
    annotationProcessor libs.bundles.micronaut.annotation.processor
    kapt libs.bundles.micronaut.annotation.processor

    implementation platform(libs.micronaut.bom)
    implementation libs.bundles.micronaut
}

Properties env = new Properties()
rootProject.file('.env.dev').withInputStream { env.load(it) }

airbyte {
    application {
        mainClass = 'io.airbyte.cron.MicronautCronRunner'
        defaultJvmArgs = ['-XX:+ExitOnOutOfMemoryError', '-XX:MaxRAMPercentage=75.0']
        localEnvVars = env + [
                "AIRBYTE_ROLE"   : System.getenv("AIRBYTE_ROLE") ?: "undefined",
                "AIRBYTE_VERSION": env.VERSION
        ] as Map<String, String>
    }

    docker {
        imageName = "cron"
    }
}

// The DuplicatesStrategy will be required while this module is mixture of kotlin and java _with_ lombok dependencies.
// Kapt, by default, runs all annotation processors and disables annotation processing by javac, however
// this default behavior breaks the lombok java annotation processor.  To avoid lombok breaking, kapt has
// keepJavacAnnotationProcessors enabled, which causes duplicate META-INF files to be generated.
// Once lombok has been removed, this can also be removed.
tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
